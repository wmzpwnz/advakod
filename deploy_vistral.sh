#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –ê–î–í–ê–ö–û–î —Å Vistral-24B-Instruct
# –î–ª—è –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å 32+ GB RAM

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
SERVER_IP="${1:-89.23.98.167}"
SERVER_USER="${2:-root}"
SERVER_PASSWORD="${3:-}"

log_info "üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ê–î–í–ê–ö–û–î —Å Vistral-24B-Instruct"
log_info "üñ•Ô∏è  –°–µ—Ä–≤–µ—Ä: $SERVER_IP"
log_info "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $SERVER_USER"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ
run_remote() {
    if [ -n "$SERVER_PASSWORD" ]; then
        sshpass -p "$SERVER_PASSWORD" ssh -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "$1"
    else
        ssh -o StrictHostKeyChecking=no "$SERVER_USER@$SERVER_IP" "$1"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
copy_files() {
    if [ -n "$SERVER_PASSWORD" ]; then
        sshpass -p "$SERVER_PASSWORD" scp -o StrictHostKeyChecking=no -r "$1" "$SERVER_USER@$SERVER_IP:$2"
    else
        scp -o StrictHostKeyChecking=no -r "$1" "$SERVER_USER@$SERVER_IP:$2"
    fi
}

log_info "üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º RAM –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
RAM_CHECK=$(run_remote "free -m | awk 'NR==2{print \$2}'")
if [ "$RAM_CHECK" -lt 24000 ]; then
    log_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RAM –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!"
    log_error "–î–æ—Å—Ç—É–ø–Ω–æ: ${RAM_CHECK} MB"
    log_error "–¢—Ä–µ–±—É–µ—Ç—Å—è: 24000+ MB (24+ GB)"
    log_error "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–µ—Ä–≤–µ—Ä —Å 32+ GB RAM"
    exit 1
fi

log_success "RAM: ${RAM_CHECK} MB (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ
DISK_CHECK=$(run_remote "df / | awk 'NR==2{print \$4}'")
if [ "$DISK_CHECK" -lt 50000000 ]; then
    log_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ!"
    log_error "–î–æ—Å—Ç—É–ø–Ω–æ: $(($DISK_CHECK / 1024 / 1024)) MB"
    log_error "–¢—Ä–µ–±—É–µ—Ç—Å—è: 50000+ MB (50+ GB)"
    exit 1
fi

log_success "–î–∏—Å–∫: $(($DISK_CHECK / 1024 / 1024)) MB (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)"

log_info "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker
run_remote "curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && rm get-docker.sh"
run_remote "systemctl enable docker && systemctl start docker"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Compose
run_remote "curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose"
run_remote "chmod +x /usr/local/bin/docker-compose"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
run_remote "apt-get update && apt-get install -y curl wget git htop ufw fail2ban sshpass"

log_success "Docker –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

log_info "üìÅ –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞..."

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
run_remote "mkdir -p /opt/advakod"
run_remote "mkdir -p /opt/advakod/models"
run_remote "mkdir -p /opt/advakod/backups"
run_remote "mkdir -p /opt/advakod/logs"

log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"

log_info "üì¶ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞..."

# –ö–æ–ø–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
copy_files "./backend" "/opt/advakod/"
copy_files "./frontend" "/opt/advakod/"
copy_files "./docker-compose.prod.yml" "/opt/advakod/"
copy_files "./nginx.conf" "/opt/advakod/"
copy_files "./env.production" "/opt/advakod/"
copy_files "./download_vistral_24b.sh" "/opt/advakod/"
copy_files "./*.sh" "/opt/advakod/"

log_success "–§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã"

log_info "ü§ñ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å Vistral-24B-Instruct..."

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
run_remote "cd /opt/advakod && chmod +x download_vistral_24b.sh && ./download_vistral_24b.sh /opt/advakod/models"

log_success "–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞"

log_info "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."

# –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
run_remote "cd /opt/advakod && cp env.production .env"

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è Vistral
run_remote "cd /opt/advakod && echo 'VISTRAL_MODEL_PATH=/opt/advakod/models/vistral-24b-instruct-q4_K_M.gguf' >> .env"
run_remote "cd /opt/advakod && echo 'VISTRAL_N_CTX=8192' >> .env"
run_remote "cd /opt/advakod && echo 'VISTRAL_N_THREADS=8' >> .env"
run_remote "cd /opt/advakod && echo 'VISTRAL_MAX_CONCURRENCY=1' >> .env"
run_remote "cd /opt/advakod && echo 'VISTRAL_INFERENCE_TIMEOUT=900' >> .env"

log_success "–û–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"

log_info "üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
run_remote "cd /opt/advakod && docker-compose -f docker-compose.prod.yml up -d"

log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"

log_info "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 5-10 –º–∏–Ω—É—Ç)..."

# –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
sleep 60

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
log_info "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."

run_remote "cd /opt/advakod && docker-compose -f docker-compose.prod.yml ps"

log_info "üåê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL..."

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL
run_remote "cd /opt/advakod && chmod +x setup_ssl.sh && ./setup_ssl.sh advacodex.com admin@advacodex.com"

log_success "SSL –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

log_info "üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º firewall..."

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º firewall
run_remote "ufw allow 22/tcp"
run_remote "ufw allow 80/tcp"
run_remote "ufw allow 443/tcp"
run_remote "ufw --force enable"

log_success "Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

log_info "üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ..."

# –¢–µ—Å—Ç–∏—Ä—É–µ–º API
sleep 30
API_TEST=$(run_remote "curl -s -o /dev/null -w '%{http_code}' http://localhost/api/v1/health" || echo "000")

if [ "$API_TEST" = "200" ]; then
    log_success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!"
else
    log_warning "‚ö†Ô∏è  API –º–æ–∂–µ—Ç –±—ã—Ç—å –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤ (–∫–æ–¥: $API_TEST)"
    log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs backend"
fi

log_success "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
log_info "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏:"
log_info "   üåê URL: https://advacodex.com"
log_info "   üîß API: https://advacodex.com/api/v1"
log_info "   ü§ñ –ú–æ–¥–µ–ª—å: Vistral-24B-Instruct"
log_info "   üíæ RAM: ~24-28 GB –∏–∑ ${RAM_CHECK} MB"
log_info "   ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 10-30 —Å–µ–∫ –Ω–∞ –æ—Ç–≤–µ—Ç"

log_info "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
log_info "   docker-compose -f docker-compose.prod.yml ps"
log_info "   docker-compose -f docker-compose.prod.yml logs -f backend"
log_info "   docker-compose -f docker-compose.prod.yml restart backend"

log_success "üöÄ –ê–î–í–ê–ö–û–î —Å Vistral-24B –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
