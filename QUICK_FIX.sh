#!/bin/bash
# üîß –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–í–ê–ö–û–î

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_step() { echo -e "${PURPLE}üîπ $1${NC}"; }

clear
echo -e "${PURPLE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                                                            ‚ïë"
echo "‚ïë        üîß –ë–´–°–¢–†–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ê–î–í–ê–ö–û–î                     ‚ïë"
echo "‚ïë                                                            ‚ïë"
echo "‚ïë        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º            ‚ïë"
echo "‚ïë                                                            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"
echo ""

log_info "üöÄ –ù–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ..."
echo ""

# ============================================
# –®–ê–ì 1: –ü–†–û–í–ï–†–ö–ê –ò –ü–û–î–ì–û–¢–û–í–ö–ê
# ============================================

log_step "–®–ê–ì 1/6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
echo ""

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /opt/advakod 2>/dev/null || {
    log_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /opt/advakod –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    log_info "–°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é..."
    mkdir -p /opt/advakod
    log_warning "–ù—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞!"
    log_warning "scp -r backend frontend docker-compose.prod.yml nginx.conf root@31.130.145.75:/opt/advakod/"
    exit 1
}

log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
if ! command -v docker &> /dev/null; then
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
    systemctl enable docker
    systemctl start docker
fi

if ! systemctl is-active --quiet docker; then
    log_info "–ó–∞–ø—É—Å–∫–∞—é Docker..."
    systemctl start docker
fi

log_success "Docker –≥–æ—Ç–æ–≤"

echo ""

# ============================================
# –®–ê–ì 2: –û–°–¢–ê–ù–û–í–ö–ê –°–¢–ê–†–´–• –ö–û–ù–¢–ï–ô–ù–ï–†–û–í
# ============================================

log_step "–®–ê–ì 2/6: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
echo ""

log_info "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker-compose -f docker-compose.prod.yml down 2>/dev/null || true

log_info "–£–¥–∞–ª—è—é —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã..."
docker container prune -f 2>/dev/null || true

log_success "–°—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

echo ""

# ============================================
# –®–ê–ì 3: –ü–†–û–í–ï–†–ö–ê –ò –ó–ê–ì–†–£–ó–ö–ê –ú–û–î–ï–õ–ï–ô
# ============================================

log_step "–®–ê–ì 3/6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π"
echo ""

MODELS_DIR="/opt/advakod/models"
mkdir -p "$MODELS_DIR"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Vistral-24B
VISTRAL_FILE=$(find "$MODELS_DIR" -name "*vistral*" -name "*.gguf" -type f | head -n 1)

if [ -z "$VISTRAL_FILE" ]; then
    log_warning "Vistral-24B –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    log_info "–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å..."
    
    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
    cat > download_vistral.sh << 'EOF'
#!/bin/bash
MODELS_DIR="/opt/advakod/models"
mkdir -p "$MODELS_DIR"

log_info() { echo -e "\033[0;34m‚ÑπÔ∏è  $1\033[0m"; }
log_success() { echo -e "\033[0;32m‚úÖ $1\033[0m"; }

log_info "–ó–∞–≥—Ä—É–∂–∞—é Vistral-24B-Instruct-GGUF..."

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º git-lfs
git lfs install

# –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
cd "$MODELS_DIR"
GIT_LFS_SKIP_SMUDGE=1 git clone https://huggingface.co/Vikhrmodels/Vistral-24B-Instruct-GGUF vistral

cd vistral

# –ó–∞–≥—Ä—É–∂–∞–µ–º GGUF —Ñ–∞–π–ª
git lfs pull --include="*.gguf"

# –ù–∞—Ö–æ–¥–∏–º —Ñ–∞–π–ª –º–æ–¥–µ–ª–∏
VISTRAL_FILE=$(find . -name "*.gguf" -type f | head -n 1)
if [ -n "$VISTRAL_FILE" ]; then
    ln -sf "$(pwd)/$VISTRAL_FILE" "/opt/advakod/models/vistral-24b.gguf"
    log_success "Vistral-24B –∑–∞–≥—Ä—É–∂–µ–Ω–∞: $VISTRAL_FILE"
else
    log_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å"
    exit 1
fi
EOF

    chmod +x download_vistral.sh
    bash download_vistral.sh
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    VISTRAL_FILE=$(find "$MODELS_DIR" -name "*vistral*" -name "*.gguf" -type f | head -n 1)
fi

if [ -n "$VISTRAL_FILE" ]; then
    log_success "Vistral-24B –Ω–∞–π–¥–µ–Ω–∞: $VISTRAL_FILE"
    FILE_SIZE=$(stat -c%s "$VISTRAL_FILE" 2>/dev/null || echo "0")
    FILE_SIZE_GB=$((FILE_SIZE / 1024 / 1024 / 1024))
    log_info "–†–∞–∑–º–µ—Ä: ${FILE_SIZE_GB} GB"
else
    log_error "Vistral-24B –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    log_warning "–ú–æ–¥–µ–ª—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (–∑–∞–π–º–µ—Ç –≤—Ä–µ–º—è)"
fi

echo ""

# ============================================
# –®–ê–ì 4: –°–û–ó–î–ê–ù–ò–ï .ENV –§–ê–ô–õ–ê
# ============================================

log_step "–®–ê–ì 4/6: –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞"
echo ""

log_info "–°–æ–∑–¥–∞—é .env —Ñ–∞–π–ª..."

cat > .env << 'ENVEOF'
# –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
PROJECT_NAME="–ê–î–í–ê–ö–û–î - –ò–ò-–Æ—Ä–∏—Å—Ç –¥–ª—è –†–§"
VERSION="2.0.0"
ENVIRONMENT=production
DEBUG=false

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
DATABASE_URL=postgresql://advakod:AdvakodSecurePass2024!@postgres:5432/advakod_db
POSTGRES_USER=advakod
POSTGRES_PASSWORD=AdvakodSecurePass2024!
POSTGRES_DB=advakod_db

# Vistral-24B –º–æ–¥–µ–ª—å
VISTRAL_MODEL_PATH=/opt/advakod/models/vistral-24b.gguf
VISTRAL_N_CTX=8192
VISTRAL_N_THREADS=8
VISTRAL_MAX_CONCURRENCY=1
VISTRAL_INFERENCE_TIMEOUT=900

# Borealis (Speech-to-Text)
BOREALIS_MODEL_PATH=/opt/advakod/models/borealis/
BOREALIS_ENABLED=true

# Qdrant –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞
QDRANT_HOST=qdrant
QDRANT_PORT=6333
QDRANT_COLLECTION_NAME=legal_documents

# Redis –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
REDIS_URL=redis://redis:6379
CACHE_TTL_DEFAULT=3600
CACHE_TTL_AI_RESPONSE=7200

# JWT –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
SECRET_KEY=AdvakodSecretKey2024WithNumbers123AndLettersABC456DEF789GHI
ALGORITHM=HS256
ACCESS_TOKEN_EXPIRE_MINUTES=480

# CORS
CORS_ORIGINS=http://localhost:3000,http://localhost:3001,http://31.130.145.75
ENVEOF

log_success ".env —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω"

echo ""

# ============================================
# –®–ê–ì 5: –ó–ê–ü–£–°–ö DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–û–í
# ============================================

log_step "–®–ê–ì 5/6: –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
echo ""

log_info "–ó–∞–ø—É—Å–∫–∞—é –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã..."

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p logs uploads ssl

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
docker-compose -f docker-compose.prod.yml up -d

log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã"

echo ""

# ============================================
# –®–ê–ì 6: –ü–†–û–í–ï–†–ö–ê –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò
# ============================================

log_step "–®–ê–ì 6/6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"
echo ""

log_info "–û–∂–∏–¥–∞—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ (2 –º–∏–Ω—É—Ç—ã)..."
sleep 30

log_info "–ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f docker-compose.prod.yml ps

echo ""

log_info "–ü—Ä–æ–≤–µ—Ä—è—é –ª–æ–≥–∏ backend..."
docker-compose -f docker-compose.prod.yml logs --tail=10 backend

echo ""

log_info "–ü—Ä–æ–≤–µ—Ä—è—é API..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API
if curl -s http://localhost/api/v1/health 2>/dev/null | grep -q "healthy"; then
    log_success "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ!"
else
    log_warning "‚ö†Ô∏è  API –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
    log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f backend"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
if curl -s http://31.130.145.75/api/v1/health 2>/dev/null | grep -q "healthy"; then
    log_success "‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ!"
else
    log_warning "‚ö†Ô∏è  API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ firewall)"
fi

echo ""

# ============================================
# –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢
# ============================================

log_step "üéâ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!"
echo ""

log_success "–ê–î–í–ê–ö–û–î –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω!"
echo ""

log_info "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:"
log_info "   üåê API: http://31.130.145.75/api/v1"
log_info "   üîß Health: http://31.130.145.75/api/v1/health"
log_info "   üìù Docs: http://31.130.145.75/docs"
echo ""

log_info "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
log_info "   –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f backend"
log_info "   –°—Ç–∞—Ç—É—Å: docker-compose -f docker-compose.prod.yml ps"
log_info "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker-compose.prod.yml restart"
echo ""

log_info "ü§ñ –§—É–Ω–∫—Ü–∏–∏:"
log_info "   ‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç —Å AI-—é—Ä–∏—Å—Ç–æ–º (Vistral-24B)"
log_info "   ‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (Borealis)"
log_info "   ‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞"
log_info "   ‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö"
echo ""

log_success "üöÄ –ê–î–í–ê–ö–û–î –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"