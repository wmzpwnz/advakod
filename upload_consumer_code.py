#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞
"""

import requests
import json
import os

# URL –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
BASE_URL = "http://localhost:8000/api/v1"
ADMIN_EMAIL = "admin@ai-lawyer.ru"
ADMIN_PASSWORD = None  # –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ

def login_admin():
    """–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"""
    if ADMIN_PASSWORD is None:
        import getpass
        password = getpass.getpass("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ")
    else:
        password = ADMIN_PASSWORD
    
    login_data = {
        "email": ADMIN_EMAIL,
        "password": password
    }
    
    response = requests.post(f"{BASE_URL}/auth/admin-login", json=login_data)
    if response.status_code == 200:
        return response.json()["access_token"]
    else:
        print(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.text}")
        return None

def upload_document(token, file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç"""
    headers = {"Authorization": f"Bearer {token}"}
    
    if not os.path.exists(file_path):
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None
    
    with open(file_path, 'rb') as file:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME —Ç–∏–ø –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
        if file_path.endswith('.txt'):
            mime_type = 'text/plain'
        elif file_path.endswith('.pdf'):
            mime_type = 'application/pdf'
        elif file_path.endswith('.docx'):
            mime_type = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        else:
            mime_type = 'text/plain'
            
        files = {'file': (os.path.basename(file_path), file, mime_type)}
        data = {'description': '–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§'}
        
        response = requests.post(f"{BASE_URL}/admin/documents/upload", headers=headers, files=files, data=data)
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {result.get('message', 'N/A')}")
            return result
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.text}")
            return None

def get_documents(token):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    headers = {"Authorization": f"Bearer {token}"}
    
    response = requests.get(f"{BASE_URL}/admin/documents", headers=headers)
    if response.status_code == 200:
        result = response.json()
        print(f"\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã ({result['total']}):")
        for doc in result['documents']:
            metadata = doc.get('metadata', {})
            print(f"  - {metadata.get('filename', 'Unknown')}")
            print(f"    –¢–∏–ø: {metadata.get('document_type', 'unknown')}")
            print(f"    –°—Ç—Ä–∞–Ω–∏—Ü: {metadata.get('pages', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            print(f"    –†–∞–∑–º–µ—Ä: {metadata.get('file_size', 0)} –±–∞–π—Ç")
            print()
        return result
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {response.text}")
        return None

def main():
    print("üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞")
    print("=" * 50)
    
    # –í—Ö–æ–¥–∏–º –≤ —Å–∏—Å—Ç–µ–º—É
    print("1. –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É...")
    token = login_admin()
    if not token:
        return
    
    print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥")
    
    # –ò—â–µ–º —Ñ–∞–π–ª –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞
    possible_paths = [
        "/Users/macbook/Desktop/advakod/test_consumer_code.txt",
        "/Users/macbook/Desktop/advakod/backend/constitution.pdf",
        "/Users/macbook/Desktop/advakod/constitution.pdf",
        "/Users/macbook/Desktop/advakod/backend/documents/example_law.txt"
    ]
    
    file_path = None
    for path in possible_paths:
        if os.path.exists(path):
            file_path = path
            break
    
    if not file_path:
        print("‚ùå –§–∞–π–ª –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–¥–µ–∫—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for path in possible_paths:
            print(f"  - {path}")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {file_path}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
    print("2. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    result = upload_document(token, file_path)
    
    if result:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        print("3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã...")
        get_documents(token)
    
    print("\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
