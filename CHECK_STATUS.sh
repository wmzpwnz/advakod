#!/bin/bash
# üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ö–†–ò–ü–¢ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –°–¢–ê–¢–£–°–ê –ê–î–í–ê–ö–û–î

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }

clear
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë                                                            ‚ïë"
echo "‚ïë        üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–î–í–ê–ö–û–î - –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê        ‚ïë"
echo "‚ïë                                                            ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"
echo ""

# ============================================
# –ü–†–û–í–ï–†–ö–ê 1: –°–ò–°–¢–ï–ú–ù–´–ï –†–ï–°–£–†–°–´
# ============================================

log_info "üîç –ü–†–û–í–ï–†–ö–ê 1: –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã"
echo ""

TOTAL_RAM=$(free -m | awk 'NR==2{print $2}')
CPU_CORES=$(nproc)
DISK_SPACE=$(df / | awk 'NR==2{print $4}')
LOAD_AVG=$(uptime | awk -F'load average:' '{print $2}')

log_info "  CPU: $CPU_CORES —è–¥–µ—Ä"
log_info "  RAM: $TOTAL_RAM MB"
log_info "  –î–∏—Å–∫: $(($DISK_SPACE / 1024 / 1024)) GB"
log_info "  –ù–∞–≥—Ä—É–∑–∫–∞: $LOAD_AVG"

if [ "$TOTAL_RAM" -lt 30000 ]; then
    log_error "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ RAM! –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 32 GB"
    log_error "–î–æ—Å—Ç—É–ø–Ω–æ: $TOTAL_RAM MB"
else
    log_success "–†–µ—Å—É—Ä—Å—ã: OK"
fi

echo ""

# ============================================
# –ü–†–û–í–ï–†–ö–ê 2: DOCKER
# ============================================

log_info "üîç –ü–†–û–í–ï–†–ö–ê 2: Docker"
echo ""

if command -v docker &> /dev/null; then
    log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    
    if systemctl is-active --quiet docker; then
        log_success "Docker —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω"
    else
        log_error "Docker —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
        log_info "–ó–∞–ø—É—Å–∫–∞—é Docker..."
        systemctl start docker
        systemctl enable docker
    fi
else
    log_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker..."
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
    systemctl enable docker
    systemctl start docker
fi

if command -v docker-compose &> /dev/null; then
    log_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    log_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    log_info "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é Docker Compose..."
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
fi

echo ""

# ============================================
# –ü–†–û–í–ï–†–ö–ê 3: –§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê
# ============================================

log_info "üîç –ü–†–û–í–ï–†–ö–ê 3: –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"
echo ""

cd /opt/advakod 2>/dev/null || {
    log_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è /opt/advakod –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    log_info "–°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é..."
    mkdir -p /opt/advakod
    log_warning "–ù—É–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:"
    log_warning "scp -r backend frontend docker-compose.prod.yml nginx.conf root@31.130.145.75:/opt/advakod/"
    exit 1
}

log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
FILES=("backend" "frontend" "docker-compose.prod.yml" "nginx.conf" "DEPLOY_ALL_IN_ONE.sh")
MISSING_FILES=()

for file in "${FILES[@]}"; do
    if [ -e "$file" ]; then
        log_success "  $file - –Ω–∞–π–¥–µ–Ω"
    else
        log_error "  $file - –ù–ï –ù–ê–ô–î–ï–ù!"
        MISSING_FILES+=("$file")
    fi
done

if [ ${#MISSING_FILES[@]} -gt 0 ]; then
    log_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: ${MISSING_FILES[*]}"
    log_warning "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä:"
    log_warning "scp -r backend frontend docker-compose.prod.yml nginx.conf DEPLOY_ALL_IN_ONE.sh root@31.130.145.75:/opt/advakod/"
    exit 1
fi

echo ""

# ============================================
# –ü–†–û–í–ï–†–ö–ê 4: DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–´
# ============================================

log_info "üîç –ü–†–û–í–ï–†–ö–ê 4: Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
echo ""

if [ -f "docker-compose.prod.yml" ]; then
    log_info "–°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
    docker-compose -f docker-compose.prod.yml ps
    
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    CONTAINERS=("advakod_postgres" "advakod_qdrant" "advakod_redis" "advakod_backend" "advakod_frontend" "advakod_nginx")
    
    for container in "${CONTAINERS[@]}"; do
        if docker ps --format "table {{.Names}}" | grep -q "$container"; then
            STATUS=$(docker ps --format "table {{.Names}}\t{{.Status}}" | grep "$container" | awk '{print $2}')
            if [[ "$STATUS" == *"Up"* ]]; then
                log_success "  $container - –∑–∞–ø—É—â–µ–Ω"
            else
                log_error "  $container - –ù–ï –ó–ê–ü–£–©–ï–ù!"
            fi
        else
            log_error "  $container - –ù–ï –ù–ê–ô–î–ï–ù!"
        fi
    done
else
    log_error "docker-compose.prod.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

echo ""

# ============================================
# –ü–†–û–í–ï–†–ö–ê 5: –ú–û–î–ï–õ–ò
# ============================================

log_info "üîç –ü–†–û–í–ï–†–ö–ê 5: –ú–æ–¥–µ–ª–∏"
echo ""

MODELS_DIR="/opt/advakod/models"
if [ -d "$MODELS_DIR" ]; then
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Vistral-24B
    if [ -f "$MODELS_DIR/vistral-24b.gguf" ] || [ -f "$MODELS_DIR/vistral-24b-instruct-q4_K_M.gguf" ]; then
        log_success "  Vistral-24B - –Ω–∞–π–¥–µ–Ω–∞"
        VISTRAL_FILE=$(find "$MODELS_DIR" -name "*vistral*" -name "*.gguf" -type f | head -n 1)
        if [ -n "$VISTRAL_FILE" ]; then
            FILE_SIZE=$(stat -c%s "$VISTRAL_FILE" 2>/dev/null || echo "0")
            FILE_SIZE_GB=$((FILE_SIZE / 1024 / 1024 / 1024))
            log_info "    –†–∞–∑–º–µ—Ä: ${FILE_SIZE_GB} GB"
        fi
    else
        log_error "  Vistral-24B - –ù–ï –ù–ê–ô–î–ï–ù–ê!"
        log_warning "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: bash 2_download_models_fixed.sh"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Borealis
    if [ -d "$MODELS_DIR/borealis" ]; then
        log_success "  Borealis - –Ω–∞–π–¥–µ–Ω–∞"
    else
        log_warning "  Borealis - –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
    fi
else
    log_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –º–æ–¥–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    log_warning "–°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é..."
    mkdir -p "$MODELS_DIR"
fi

echo ""

# ============================================
# –ü–†–û–í–ï–†–ö–ê 6: API
# ============================================

log_info "üîç –ü–†–û–í–ï–†–ö–ê 6: API"
echo ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π API
if curl -s http://localhost/api/v1/health 2>/dev/null | grep -q "healthy"; then
    log_success "API —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ"
else
    log_error "API –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ª–æ–∫–∞–ª—å–Ω–æ!"
    log_info "–ü—Ä–æ–≤–µ—Ä—è—é –ª–æ–≥–∏ backend..."
    docker-compose -f docker-compose.prod.yml logs --tail=20 backend
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–π –¥–æ—Å—Ç—É–ø
if curl -s http://31.130.145.75/api/v1/health 2>/dev/null | grep -q "healthy"; then
    log_success "API –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
else
    log_warning "API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑–≤–Ω–µ"
    log_info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ firewall –∏ nginx"
fi

echo ""

# ============================================
# –ü–†–û–í–ï–†–ö–ê 7: NGINX
# ============================================

log_info "üîç –ü–†–û–í–ï–†–ö–ê 7: Nginx"
echo ""

if docker ps --format "table {{.Names}}" | grep -q "advakod_nginx"; then
    log_success "Nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if docker exec advakod_nginx nginx -t 2>/dev/null; then
        log_success "Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
    else
        log_error "Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫–∏!"
    fi
else
    log_error "Nginx –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
fi

echo ""

# ============================================
# –ü–†–û–í–ï–†–ö–ê 8: –ü–û–†–¢–´
# ============================================

log_info "üîç –ü–†–û–í–ï–†–ö–ê 8: –ü–æ—Ä—Ç—ã"
echo ""

PORTS=("80" "443" "8000" "5432" "6333" "6379")
for port in "${PORTS[@]}"; do
    if netstat -tlnp 2>/dev/null | grep -q ":$port "; then
        log_success "  –ü–æ—Ä—Ç $port - –æ—Ç–∫—Ä—ã—Ç"
    else
        log_warning "  –ü–æ—Ä—Ç $port - –∑–∞–∫—Ä—ã—Ç"
    fi
done

echo ""

# ============================================
# –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
# ============================================

log_info "üéØ –ò–¢–û–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê"
echo ""

# –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã
PROBLEMS=0

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
if ! docker ps --format "table {{.Names}}" | grep -q "advakod_backend"; then
    log_error "Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
    PROBLEMS=$((PROBLEMS + 1))
fi

if ! docker ps --format "table {{.Names}}" | grep -q "advakod_nginx"; then
    log_error "Nginx –Ω–µ –∑–∞–ø—É—â–µ–Ω!"
    PROBLEMS=$((PROBLEMS + 1))
fi

if [ ! -f "/opt/advakod/models/vistral-24b.gguf" ] && [ ! -f "/opt/advakod/models/vistral-24b-instruct-q4_K_M.gguf" ]; then
    log_error "–ú–æ–¥–µ–ª—å Vistral-24B –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
    PROBLEMS=$((PROBLEMS + 1))
fi

if [ $PROBLEMS -eq 0 ]; then
    log_success "üéâ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢!"
    log_info "–°–∞–π—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://31.130.145.75"
else
    log_error "‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–û $PROBLEMS –ü–†–û–ë–õ–ï–ú!"
    log_info "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: bash QUICK_FIX.sh"
fi

echo ""
log_info "üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
log_info "  –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f backend"
log_info "  –°—Ç–∞—Ç—É—Å: docker-compose -f docker-compose.prod.yml ps"
log_info "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker-compose.prod.yml restart"
log_info "  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: bash QUICK_FIX.sh"