#!/bin/bash

# üöÄ –°–∫—Ä–∏–ø—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–ø–ª–æ—è –ê–î–í–ê–ö–û–î –≤ –æ–±–ª–∞–∫–æ
# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç: DigitalOcean, AWS, GCP, Hetzner

set -e

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ $# -eq 0 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <provider> [domain]"
    echo ""
    echo "–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã:"
    echo "  digitalocean  - DigitalOcean Droplet"
    echo "  aws          - AWS EC2"
    echo "  gcp          - Google Cloud Platform"
    echo "  hetzner      - Hetzner Cloud (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0 hetzner yourdomain.com"
    echo "  $0 digitalocean"
    exit 1
fi

PROVIDER=$1
DOMAIN=${2:-"localhost"}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
install_docker() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker..."
    
    if command -v docker &> /dev/null; then
        log_success "Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    curl -fsSL https://get.docker.com -o get-docker.sh
    sh get-docker.sh
    rm get-docker.sh
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É docker
    sudo usermod -aG docker $USER
    
    log_success "Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker Compose
install_docker_compose() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose..."
    
    if command -v docker-compose &> /dev/null; then
        log_success "Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        return
    fi
    
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose
    
    log_success "Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ firewall
setup_firewall() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ firewall..."
    
    if command -v ufw &> /dev/null; then
        sudo ufw --force enable
        sudo ufw allow 22    # SSH
        sudo ufw allow 80    # HTTP
        sudo ufw allow 443   # HTTPS
        sudo ufw deny 8000   # API —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Nginx
        log_success "Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else
        log_warning "UFW –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ firewall –≤—Ä—É—á–Ω—É—é"
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è .env –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
create_production_env() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ .env –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞..."
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–∞—Ä–æ–ª–∏
    SECRET_KEY=$(openssl rand -base64 32)
    POSTGRES_PASSWORD=$(openssl rand -base64 16)
    
    cat > .env.production << EOF
# –ü–†–û–î–ê–ö–®–ï–ù –ù–ê–°–¢–†–û–ô–ö–ò –ê–î–í–ê–ö–û–î
PROJECT_NAME="–ê–î–í–ê–ö–û–î - –ò–ò-–Æ—Ä–∏—Å—Ç –¥–ª—è –†–§"
VERSION="1.0.0"
ENVIRONMENT="production"
DEBUG=false

# PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL="postgresql://advakod:${POSTGRES_PASSWORD}@postgres:5432/advakod_db"
POSTGRES_HOST="postgres"
POSTGRES_PORT=5432
POSTGRES_USER="advakod"
POSTGRES_PASSWORD="${POSTGRES_PASSWORD}"
POSTGRES_DB="advakod_db"

# Qdrant –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
QDRANT_HOST="qdrant"
QDRANT_PORT=6333
QDRANT_COLLECTION_NAME="legal_documents"

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
SECRET_KEY="${SECRET_KEY}"
ACCESS_TOKEN_EXPIRE_MINUTES=240

# –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
REDIS_URL="redis://redis:6379"

# CORS (–æ–±–Ω–æ–≤–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–æ–º–µ–Ω—ã)
BACKEND_CORS_ORIGINS="https://${DOMAIN},https://www.${DOMAIN}"

# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
SENTRY_DSN=""
EOF
    
    log_success ".env.production —Å–æ–∑–¥–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Nginx
setup_nginx() {
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx..."
    
    cat > nginx.conf << EOF
events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:8000;
    }
    
    upstream frontend {
        server frontend:3000;
    }
    
    server {
        listen 80;
        server_name ${DOMAIN} www.${DOMAIN};
        
        # Frontend
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
        
        # API
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
        
        # WebSocket
        location /ws/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade \$http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host \$host;
            proxy_set_header X-Real-IP \$remote_addr;
            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto \$scheme;
        }
    }
}
EOF
    
    log_success "Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Docker Compose –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
create_docker_compose() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ docker-compose.prod.yml..."
    
    cat > docker-compose.prod.yml << EOF
version: '3.8'

services:
  # PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  postgres:
    image: postgres:15-alpine
    container_name: advakod_postgres
    environment:
      POSTGRES_DB: advakod_db
      POSTGRES_USER: advakod
      POSTGRES_PASSWORD: \${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - advakod_network

  # Qdrant –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: advakod_qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    restart: unless-stopped
    networks:
      - advakod_network

  # Redis –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
  redis:
    image: redis:7-alpine
    container_name: advakod_redis
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - advakod_network

  # Backend
  backend:
    build: ./backend
    container_name: advakod_backend
    environment:
      - DATABASE_URL=postgresql://advakod:\${POSTGRES_PASSWORD}@postgres:5432/advakod_db
      - REDIS_URL=redis://redis:6379
      - QDRANT_HOST=qdrant
    depends_on:
      - postgres
      - redis
      - qdrant
    restart: unless-stopped
    networks:
      - advakod_network

  # Frontend
  frontend:
    build: ./frontend
    container_name: advakod_frontend
    environment:
      - REACT_APP_API_URL=https://${DOMAIN}/api
      - REACT_APP_WS_URL=wss://${DOMAIN}/ws
    restart: unless-stopped
    networks:
      - advakod_network

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: advakod_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - advakod_network

volumes:
  postgres_data:
  qdrant_data:
  redis_data:

networks:
  advakod_network:
    driver: bridge
EOF
    
    log_success "docker-compose.prod.yml —Å–æ–∑–¥–∞–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log_info "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ö–æ–ø–∏—Ä—É–µ–º .env
    cp .env.production .env
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    docker-compose -f docker-compose.prod.yml up -d
    
    log_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
        log_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
    else
        log_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
        docker-compose -f docker-compose.prod.yml logs
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SSL
setup_ssl() {
    if [ "$DOMAIN" = "localhost" ]; then
        log_warning "SSL –ø—Ä–æ–ø—É—â–µ–Ω –¥–ª—è localhost"
        return
    fi
    
    log_info "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Certbot
    sudo apt update
    sudo apt install -y certbot python3-certbot-nginx
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
    sudo certbot --nginx -d $DOMAIN -d www.$DOMAIN --non-interactive --agree-tos --email admin@$DOMAIN
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -
    
    log_success "SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
create_admin() {
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞..."
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    sleep 10
    
    # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    docker exec advakod_backend python create_admin.py
    
    log_success "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –ê–î–í–ê–ö–û–î - –î–µ–ø–ª–æ–π –≤ –æ–±–ª–∞–∫–æ"
    echo "=============================="
    echo "–ü—Ä–æ–≤–∞–π–¥–µ—Ä: $PROVIDER"
    echo "–î–æ–º–µ–Ω: $DOMAIN"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ root
    if [ "$EUID" -eq 0 ]; then
        log_error "–ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        exit 1
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    install_docker
    install_docker_compose
    setup_firewall
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    create_production_env
    setup_nginx
    create_docker_compose
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
    start_services
    create_admin
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSL –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if [ "$DOMAIN" != "localhost" ]; then
        setup_ssl
    fi
    
    echo ""
    log_success "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
    echo ""
    echo "üåê –î–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–∏—Å–∞–º:"
    if [ "$DOMAIN" = "localhost" ]; then
        echo "- Frontend: http://localhost"
        echo "- API: http://localhost/api"
        echo "- API Docs: http://localhost/api/docs"
    else
        echo "- Frontend: https://$DOMAIN"
        echo "- API: https://$DOMAIN/api"
        echo "- API Docs: https://$DOMAIN/api/docs"
    fi
    echo ""
    echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
    echo "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ DNS –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–æ–º–µ–Ω–∞"
    echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"
    echo "4. –°–æ–∑–¥–∞–π—Ç–µ –±—ç–∫–∞–ø—ã"
    echo ""
    echo "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:"
    echo "- –õ–æ–≥–∏: docker-compose -f docker-compose.prod.yml logs -f"
    echo "- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f docker-compose.prod.yml restart"
    echo "- –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose -f docker-compose.prod.yml down"
}

# –ó–∞–ø—É—Å–∫
main "$@"
