#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∫–æ–¥–µ–∫—Å–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π RAG —Å–∏—Å—Ç–µ–º–æ–π –ø—Ä–æ–µ–∫—Ç–∞
"""

import json
import os
import sys
from pathlib import Path
from datetime import datetime
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.append('/root/advakod/backend')

from app.services.vector_store_service import VectorStoreService
from app.services.embeddings_service import EmbeddingsService
from app.services.document_service import DocumentService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class RAGIntegrationManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π RAG —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.vector_store = VectorStoreService()
        self.embeddings_service = EmbeddingsService()
        self.document_service = DocumentService()
        
        # –ü—É—Ç–∏ –∫ –Ω–∞—à–∏–º —Å–∫–∞—á–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        self.chunks_dir = Path("/root/advakod/final_system/rag_integration/chunks")
        self.processed_docs_dir = Path("/root/advakod/final_system/rag_integration/processed_documents")
        
        self.integrated_count = 0
        self.failed_count = 0
        
        logger.info("‚úÖ RAGIntegrationManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def initialize_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä–≤–∏—Å—ã RAG —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã RAG —Å–∏—Å—Ç–µ–º—ã...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        self.vector_store.initialize()
        if not self.vector_store.is_ready():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ")
            return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        try:
            self.embeddings_service.initialize()
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {e}")
        
        logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    
    def load_chunks_from_files(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —á–∞–Ω–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤"""
        if not self.chunks_dir.exists():
            logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —á–∞–Ω–∫–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.chunks_dir}")
            return []
        
        chunks = []
        chunk_files = list(self.chunks_dir.glob("*.json"))
        
        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ {len(chunk_files)} —Ñ–∞–π–ª–æ–≤ —á–∞–Ω–∫–æ–≤")
        
        for chunk_file in chunk_files:
            try:
                with open(chunk_file, 'r', encoding='utf-8') as f:
                    chunk_data = json.load(f)
                    chunks.append(chunk_data)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞ {chunk_file}: {e}")
                self.failed_count += 1
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(chunks)} —á–∞–Ω–∫–æ–≤")
        return chunks
    
    def prepare_chunks_for_rag(self, chunks):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —á–∞–Ω–∫–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å RAG"""
        prepared_chunks = []
        
        for chunk in chunks:
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                chunk_id = chunk.get('id', '')
                text = chunk.get('text', '')
                metadata = chunk.get('metadata', {})
                
                if not text or len(text.strip()) < 10:
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–∞–Ω–∫ {chunk_id} - —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç")
                    continue
                
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è RAG
                rag_metadata = {
                    'source': 'pravo.gov.ru',
                    'document_type': metadata.get('document_type', 'legal_document'),
                    'file_type': metadata.get('file_type', 'unknown'),
                    'file_name': metadata.get('file_name', ''),
                    'legal_score': metadata.get('legal_score', 0),
                    'is_valid': metadata.get('is_valid', False),
                    'chunk_index': metadata.get('chunk_index', 0),
                    'total_chunks': metadata.get('total_chunks', 1),
                    'processing_timestamp': metadata.get('processing_timestamp', datetime.now().isoformat()),
                    'integration_timestamp': datetime.now().isoformat()
                }
                
                prepared_chunk = {
                    'id': chunk_id,
                    'text': text,
                    'metadata': rag_metadata
                }
                
                prepared_chunks.append(prepared_chunk)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —á–∞–Ω–∫–∞: {e}")
                self.failed_count += 1
        
        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(prepared_chunks)} —á–∞–Ω–∫–æ–≤ –¥–ª—è RAG")
        return prepared_chunks
    
    def integrate_chunks_with_vector_store(self, chunks):
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —á–∞–Ω–∫–∏ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""
        logger.info("üîó –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —á–∞–Ω–∫–∏ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º...")
        
        for i, chunk in enumerate(chunks, 1):
            try:
                chunk_id = chunk['id']
                text = chunk['text']
                metadata = chunk['metadata']
                
                logger.info(f"üì• –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —á–∞–Ω–∫ {i}/{len(chunks)}: {chunk_id}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —á–∞–Ω–∫–∞
                try:
                    embedding = self.embeddings_service.generate_embedding(text)
                    if embedding is None:
                        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è {chunk_id}")
                        continue
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è {chunk_id}: {e}")
                    continue
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                try:
                    self.vector_store.add_document(
                        document_id=chunk_id,
                        text=text,
                        embedding=embedding,
                        metadata=metadata
                    )
                    
                    self.integrated_count += 1
                    logger.info(f"‚úÖ –ß–∞–Ω–∫ {chunk_id} —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞–Ω–∫–∞ {chunk_id} –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {e}")
                    self.failed_count += 1
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —á–∞–Ω–∫–∞ {i}: {e}")
                self.failed_count += 1
        
        logger.info(f"üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.integrated_count} —É—Å–ø–µ—à–Ω–æ, {self.failed_count} –æ—à–∏–±–æ–∫")
    
    def create_integration_report(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        report = {
            'timestamp': datetime.now().isoformat(),
            'integration_summary': {
                'total_chunks_processed': self.integrated_count + self.failed_count,
                'successfully_integrated': self.integrated_count,
                'failed_integrations': self.failed_count,
                'success_rate': (self.integrated_count / (self.integrated_count + self.failed_count) * 100) if (self.integrated_count + self.failed_count) > 0 else 0
            },
            'rag_system_status': {
                'vector_store_status': self.vector_store.get_status(),
                'embeddings_service_ready': hasattr(self.embeddings_service, 'is_ready') and self.embeddings_service.is_ready()
            },
            'source_data': {
                'chunks_directory': str(self.chunks_dir),
                'processed_documents_directory': str(self.processed_docs_dir),
                'source': 'pravo.gov.ru'
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_file = Path("/root/advakod/rag_integration_report.json")
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìä –û—Ç—á–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        return report
    
    def run_integration(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π RAG —Å–∏—Å—Ç–µ–º–æ–π")
        start_time = datetime.now()
        
        try:
            # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
            if not self.initialize_services():
                return False
            
            # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫–∏
            chunks = self.load_chunks_from_files()
            if not chunks:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–∞–Ω–∫–∏")
                return False
            
            # 3. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —á–∞–Ω–∫–∏ –¥–ª—è RAG
            prepared_chunks = self.prepare_chunks_for_rag(chunks)
            if not prepared_chunks:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —á–∞–Ω–∫–∏")
                return False
            
            # 4. –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
            self.integrate_chunks_with_vector_store(prepared_chunks)
            
            # 5. –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report = self.create_integration_report()
            
            end_time = datetime.now()
            duration = end_time - start_time
            
            logger.info("=" * 60)
            logger.info("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
            logger.info("=" * 60)
            logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration}")
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {report['integration_summary']['total_chunks_processed']}")
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {report['integration_summary']['successfully_integrated']}")
            logger.info(f"‚ùå –û—à–∏–±–æ–∫: {report['integration_summary']['failed_integrations']}")
            logger.info(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {report['integration_summary']['success_rate']:.1f}%")
            
            return report
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∫–∞—á–∞–Ω–Ω—ã—Ö –∫–æ–¥–µ–∫—Å–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π RAG —Å–∏—Å—Ç–µ–º–æ–π")
    print("=" * 60)
    
    integration_manager = RAGIntegrationManager()
    report = integration_manager.run_integration()
    
    if report:
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
        print(f"   üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {report['integration_summary']['total_chunks_processed']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {report['integration_summary']['successfully_integrated']}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {report['integration_summary']['failed_integrations']}")
        print(f"   üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {report['integration_summary']['success_rate']:.1f}%")
        
        print(f"\nüîó –°–¢–ê–¢–£–° RAG –°–ò–°–¢–ï–ú–´:")
        vs_status = report['rag_system_status']['vector_store_status']
        print(f"   üìä –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {'‚úÖ –ì–æ—Ç–æ–≤–æ' if vs_status['initialized'] else '‚ùå –ù–µ –≥–æ—Ç–æ–≤–æ'}")
        print(f"   üìÅ –ü—É—Ç—å –∫ –ë–î: {vs_status['db_path']}")
        print(f"   üìÑ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {vs_status['documents_count']}")
        
        print(f"\nüéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å RAG —Å–∏—Å—Ç–µ–º–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–∫–∞—á–∞–Ω–Ω—ã–µ –∫–æ–¥–µ–∫—Å—ã.")
    else:
        print(f"\n‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")

if __name__ == "__main__":
    main()

