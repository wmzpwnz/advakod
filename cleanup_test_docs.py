#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend'))

from app.services.vector_store_service import vector_store_service
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def cleanup_test_documents():
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if not vector_store_service.is_ready():
            vector_store_service.initialize()
        
        collection = vector_store_service.collection
        total_docs = collection.count()
        
        if total_docs == 0:
            print("üìÑ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        results = collection.get(
            limit=total_docs,
            include=['metadatas', 'documents']
        )
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        test_doc_ids = []
        real_doc_ids = []
        
        for i, (doc_id, meta) in enumerate(zip(results['ids'], results['metadatas'])):
            filename = meta.get('filename', '')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            if (filename.startswith('tmp') or 
                filename == 'Unknown' or 
                'test' in filename.lower() or
                meta.get('file_size', 0) == 0):
                test_doc_ids.append(doc_id)
                print(f"üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {filename} (ID: {doc_id})")
            else:
                real_doc_ids.append(doc_id)
                print(f"‚úÖ –†–µ–∞–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: {filename} (ID: {doc_id})")
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –¢–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(test_doc_ids)}")
        print(f"   –†–µ–∞–ª—å–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(real_doc_ids)}")
        
        if test_doc_ids:
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            print(f"\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º {len(test_doc_ids)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
            collection.delete(ids=test_doc_ids)
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
        else:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        remaining_docs = collection.count()
        print(f"\nüìä –û—Å—Ç–∞–ª–æ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {remaining_docs}")
        
        if remaining_docs > 0:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã
            remaining_results = collection.get(
                limit=remaining_docs,
                include=['metadatas']
            )
            
            print("\nüìÑ –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã:")
            for i, (doc_id, meta) in enumerate(zip(remaining_results['ids'], remaining_results['metadatas'])):
                filename = meta.get('filename', 'Unknown')
                doc_type = meta.get('document_type', 'unknown')
                pages = meta.get('pages', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                file_size = meta.get('file_size', 0)
                print(f"   {i+1}. {filename}")
                print(f"      –¢–∏–ø: {doc_type}, –°—Ç—Ä–∞–Ω–∏—Ü: {pages}, –†–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    cleanup_test_documents()
