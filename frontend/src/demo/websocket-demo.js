/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ ResilientWebSocket
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ResilientWebSocket —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
 */

import ResilientWebSocket from '../services/ResilientWebSocket';

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ResilientWebSocket
export const demonstrateResilientWebSocket = () => {
  console.log('üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è ResilientWebSocket');
  
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  const ws = new ResilientWebSocket('wss://echo.websocket.org', {
    maxReconnectAttempts: 5,
    reconnectDelay: 1000,
    maxReconnectDelay: 10000,
    pingInterval: 30000,
    pongTimeout: 5000
  });

  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
  ws.on('open', () => {
    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    ws.send({
      type: 'test',
      message: '–ü—Ä–∏–≤–µ—Ç –æ—Ç ResilientWebSocket!',
      timestamp: Date.now()
    });
  });

  ws.on('message', (data) => {
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
  });

  ws.on('close', ({ code, reason, shouldReconnect }) => {
    console.log(`‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: ${code} - ${reason}`);
    console.log(`üîÑ –ë—É–¥–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${shouldReconnect}`);
  });

  ws.on('stateChange', (state) => {
    console.log(`üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${state}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å
    const userStatus = ws.getUserFriendlyStatus();
    console.log(`üë§ –°—Ç–∞—Ç—É—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userStatus.text} (${userStatus.color})`);
  });

  ws.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
  });

  ws.on('maxReconnectAttemptsReached', () => {
    console.log('üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
  });

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
  ws.connect().then(() => {
    console.log('üéâ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
    setTimeout(() => {
      const status = ws.getStatus();
      console.log('üìä –°—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', {
        connected: status.connected,
        state: status.connectionState,
        attempts: status.reconnectAttempts,
        queuedMessages: status.queuedMessages,
        stats: status.stats
      });
    }, 1000);
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    setTimeout(() => {
      for (let i = 1; i <= 3; i++) {
        ws.send({
          type: 'demo',
          message: `–°–æ–æ–±—â–µ–Ω–∏–µ ${i}`,
          timestamp: Date.now()
        });
      }
    }, 2000);
    
    // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    setTimeout(() => {
      console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      ws.reconnect();
    }, 5000);
    
    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log('üëã –û—Ç–∫–ª—é—á–µ–Ω–∏–µ...');
      ws.disconnect();
    }, 10000);
    
  }).catch((error) => {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:', error);
  });

  return ws;
};

// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
export const WebSocketDemo = () => {
  const [ws, setWs] = React.useState(null);
  const [messages, setMessages] = React.useState([]);
  const [status, setStatus] = React.useState('disconnected');

  React.useEffect(() => {
    const websocket = new ResilientWebSocket('wss://echo.websocket.org');
    
    websocket.on('open', () => {
      console.log('Demo WebSocket connected');
    });
    
    websocket.on('message', (data) => {
      setMessages(prev => [...prev, data]);
    });
    
    websocket.on('stateChange', (state) => {
      setStatus(state);
    });
    
    websocket.connect();
    setWs(websocket);
    
    return () => {
      websocket.disconnect();
    };
  }, []);

  const sendMessage = () => {
    if (ws) {
      ws.send({
        type: 'demo',
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
        timestamp: Date.now()
      });
    }
  };

  return (
    <div className="p-4">
      <h2 className="text-xl font-bold mb-4">WebSocket Demo</h2>
      
      <div className="mb-4">
        <span className="font-medium">–°—Ç–∞—Ç—É—Å: </span>
        <span className={`px-2 py-1 rounded text-sm ${
          status === 'connected' ? 'bg-green-100 text-green-800' :
          status === 'connecting' ? 'bg-yellow-100 text-yellow-800' :
          status === 'reconnecting' ? 'bg-orange-100 text-orange-800' :
          'bg-red-100 text-red-800'
        }`}>
          {status}
        </span>
      </div>
      
      <button
        onClick={sendMessage}
        disabled={status !== 'connected'}
        className="px-4 py-2 bg-blue-600 text-white rounded disabled:opacity-50 mb-4"
      >
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
      </button>
      
      <div className="border rounded p-4 h-64 overflow-y-auto">
        <h3 className="font-medium mb-2">–°–æ–æ–±—â–µ–Ω–∏—è:</h3>
        {messages.map((msg, index) => (
          <div key={index} className="text-sm mb-1">
            {JSON.stringify(msg)}
          </div>
        ))}
      </div>
    </div>
  );
};

export default demonstrateResilientWebSocket;