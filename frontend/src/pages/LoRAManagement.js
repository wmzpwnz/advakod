import React, { useState, useEffect } from 'react';
import { 
  Brain, 
  Play, 
  Pause, 
  CheckCircle, 
  XCircle, 
  Star, 
  Filter, 
  Download, 
  Upload,
  Settings,
  BarChart3,
  Clock,
  AlertCircle,
  CheckSquare,
  Square,
  Database,
  TrendingUp,
  Activity,
  RefreshCw
} from 'lucide-react';
import axios from 'axios';
import { getApiUrl } from '../config/api';

const LoRAManagement = () => {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [trainingData, setTrainingData] = useState([]);
  const [stats, setStats] = useState({});
  const [selectedData, setSelectedData] = useState([]);
  const [filters, setFilters] = useState({
    complexity: 'all',
    approved: 'all',
    quality: 'all'
  });
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    loadStats();
    loadTrainingData();
  }, []);

  const loadStats = async () => {
    try {
      const response = await axios.get(getApiUrl('/lora/data/stats?days=7'));
      setStats(response.data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      setStats({
        total_data: 0,
        approved_data: 0,
        pending_data: 0,
        quality_score: 0
      });
    }
  };

  const loadTrainingData = async () => {
    try {
      setIsLoading(true);
      const params = new URLSearchParams();
      if (filters.complexity !== 'all') params.append('complexity', filters.complexity);
      if (filters.approved !== 'all') params.append('approved_only', filters.approved === 'approved');
      
      const response = await axios.get(`${getApiUrl('/lora/data')}?${params}`);
      setTrainingData(response.data || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–∞–Ω–Ω—ã—Ö
      setTrainingData([]);
    } finally {
      setIsLoading(false);
    }
  };

  const collectData = async () => {
    try {
      setIsLoading(true);
      const response = await axios.post(getApiUrl('/lora/data/collect'), {
        limit: 1000,
        days_back: 30,
        collection_type: 'auto'
      });
      
      if (response.data.error) {
        setError(`–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: ${response.data.error}`);
      } else {
        alert(`–°–æ–±—Ä–∞–Ω–æ ${response.data.total_processed} –¥–∏–∞–ª–æ–≥–æ–≤, –æ–¥–æ–±—Ä–µ–Ω–æ ${response.data.total_approved}`);
        loadStats();
        loadTrainingData();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:', error);
      setError('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setIsLoading(false);
    }
  };

  const approveData = async (dataId) => {
    try {
      await axios.post(`${getApiUrl('/lora/data')}/${dataId}/approve`);
      loadTrainingData();
      loadStats();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è:', error);
    }
  };

  const rejectData = async (dataId) => {
    try {
      await axios.post(`${getApiUrl('/lora/data')}/${dataId}/reject`, {
        reason: '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º'
      });
      loadTrainingData();
      loadStats();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:', error);
    }
  };

  const batchApprove = async () => {
    try {
      setIsLoading(true);
      const response = await axios.post(getApiUrl('/lora/data/batch-approve'), {
        data_ids: selectedData
      });
      
      if (response.data.error) {
        setError(`–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è: ${response.data.error}`);
      } else {
        alert(`–û–¥–æ–±—Ä–µ–Ω–æ ${response.data.approved_count} –∑–∞–ø–∏—Å–µ–π`);
        setSelectedData([]);
        loadTrainingData();
        loadStats();
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è:', error);
      setError('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–∏—è');
    } finally {
      setIsLoading(false);
    }
  };

  const startTraining = async () => {
    try {
      setIsLoading(true);
      const response = await axios.post(getApiUrl('/lora/training/start'), {
        job_name: '–û–±—É—á–µ–Ω–∏–µ v1.0.0',
        hyperparameters: {
          learning_rate: 0.0001,
          num_epochs: 3,
          batch_size: 4
        }
      });
      
      alert('–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!');
      loadStats();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
      setError('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—É—á–µ–Ω–∏—è');
    } finally {
      setIsLoading(false);
    }
  };

  const renderStars = (rating) => {
    const stars = [];
    for (let i = 1; i <= 5; i++) {
      stars.push(
        <Star
          key={i}
          className={`w-4 h-4 ${
            i <= rating ? 'text-yellow-400 fill-current' : 'text-gray-300'
          }`}
        />
      );
    }
    return stars;
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-white dark:bg-gray-800 shadow-sm border-b dark:border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="py-6">
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white">üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LoRA</h1>
            <p className="mt-2 text-gray-600 dark:text-gray-400">–û–±—É—á–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ –ò–ò-—é—Ä–∏—Å—Ç–∞</p>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
        <div className="mb-8">
          <nav className="flex space-x-8">
            {[
              { id: 'dashboard', name: '–î–∞—à–±–æ—Ä–¥', icon: BarChart3 },
              { id: 'data', name: '–î–∞–Ω–Ω—ã–µ', icon: Database },
              { id: 'training', name: '–û–±—É—á–µ–Ω–∏–µ', icon: Play },
              { id: 'models', name: '–ú–æ–¥–µ–ª–∏', icon: Settings }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex items-center space-x-2 px-3 py-2 rounded-md text-sm font-medium ${
                  activeTab === tab.id
                    ? 'bg-blue-100 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400'
                    : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
                }`}
              >
                <tab.icon className="w-4 h-4" />
                <span>{tab.name}</span>
              </button>
            ))}
          </nav>
        </div>

        {/* –î–∞—à–±–æ—Ä–¥ */}
        {activeTab === 'dashboard' && (
          <div className="space-y-6">
            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <Database className="w-8 h-8 text-blue-600 dark:text-blue-400" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500 dark:text-gray-400">–í—Å–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö</p>
                    <p className="text-2xl font-semibold text-gray-900 dark:text-white">
                      {stats.total_data || 0}
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <CheckCircle className="w-8 h-8 text-green-600 dark:text-green-400" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500 dark:text-gray-400">–û–¥–æ–±—Ä–µ–Ω–æ</p>
                    <p className="text-2xl font-semibold text-gray-900 dark:text-white">
                      {stats.approved_data || 0}
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <Clock className="w-8 h-8 text-yellow-600 dark:text-yellow-400" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500 dark:text-gray-400">–û–∂–∏–¥–∞–µ—Ç</p>
                    <p className="text-2xl font-semibold text-gray-900 dark:text-white">
                      {stats.pending_data || 0}
                    </p>
                  </div>
                </div>
              </div>

              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
                <div className="flex items-center">
                  <Star className="w-8 h-8 text-purple-600 dark:text-purple-400" />
                  <div className="ml-4">
                    <p className="text-sm font-medium text-gray-500 dark:text-gray-400">–ö–∞—á–µ—Å—Ç–≤–æ</p>
                    <p className="text-2xl font-semibold text-gray-900 dark:text-white">
                      {stats.quality_score || 0}%
                    </p>
                  </div>
                </div>
              </div>
            </div>

            {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <button
                  onClick={collectData}
                  disabled={isLoading}
                  className="flex items-center justify-center space-x-2 px-4 py-2 bg-blue-600 dark:bg-blue-700 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-800 disabled:opacity-50"
                >
                  <Database className="w-4 h-4" />
                  <span>–°–æ–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ</span>
                </button>
                
                <button
                  onClick={startTraining}
                  disabled={isLoading}
                  className="flex items-center justify-center space-x-2 px-4 py-2 bg-green-600 dark:bg-green-700 text-white rounded-lg hover:bg-green-700 dark:hover:bg-green-800 disabled:opacity-50"
                >
                  <Play className="w-4 h-4" />
                  <span>–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ</span>
                </button>
                
                <button
                  onClick={loadStats}
                  className="flex items-center justify-center space-x-2 px-4 py-2 bg-gray-600 dark:bg-gray-700 text-white rounded-lg hover:bg-gray-700 dark:hover:bg-gray-800"
                >
                  <RefreshCw className="w-4 h-4" />
                  <span>–û–±–Ω–æ–≤–∏—Ç—å</span>
                </button>
              </div>
            </div>
          </div>
        )}

        {/* –î–∞–Ω–Ω—ã–µ */}
        {activeTab === 'data' && (
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏</h3>
              
              {/* –§–∏–ª—å—Ç—Ä—ã */}
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –°–ª–æ–∂–Ω–æ—Å—Ç—å
                  </label>
                  <select
                    value={filters.complexity}
                    onChange={(e) => setFilters({...filters, complexity: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="all">–í—Å–µ</option>
                    <option value="simple">–ü—Ä–æ—Å—Ç–∞—è</option>
                    <option value="medium">–°—Ä–µ–¥–Ω—è—è</option>
                    <option value="complex">–°–ª–æ–∂–Ω–∞—è</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –°—Ç–∞—Ç—É—Å
                  </label>
                  <select
                    value={filters.approved}
                    onChange={(e) => setFilters({...filters, approved: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="all">–í—Å–µ</option>
                    <option value="approved">–û–¥–æ–±—Ä–µ–Ω–æ</option>
                    <option value="pending">–û–∂–∏–¥–∞–µ—Ç</option>
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –ö–∞—á–µ—Å—Ç–≤–æ
                  </label>
                  <select
                    value={filters.quality}
                    onChange={(e) => setFilters({...filters, quality: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="all">–í—Å–µ</option>
                    <option value="high">–í—ã—Å–æ–∫–æ–µ</option>
                    <option value="medium">–°—Ä–µ–¥–Ω–µ–µ</option>
                    <option value="low">–ù–∏–∑–∫–æ–µ</option>
                  </select>
                </div>
              </div>

              {/* –î–µ–π—Å—Ç–≤–∏—è */}
              <div className="flex space-x-4 mb-6">
                <button
                  onClick={batchApprove}
                  disabled={selectedData.length === 0}
                  className="flex items-center space-x-2 px-4 py-2 bg-green-600 dark:bg-green-700 text-white rounded-lg hover:bg-green-700 dark:hover:bg-green-800 disabled:opacity-50"
                >
                  <CheckSquare className="w-4 h-4" />
                  <span>–û–¥–æ–±—Ä–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ ({selectedData.length})</span>
                </button>
                
                <button
                  onClick={loadTrainingData}
                  className="flex items-center space-x-2 px-4 py-2 bg-blue-600 dark:bg-blue-700 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-800"
                >
                  <RefreshCw className="w-4 h-4" />
                  <span>–û–±–Ω–æ–≤–∏—Ç—å</span>
                </button>
              </div>

              {/* –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö */}
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                  <thead className="bg-gray-50 dark:bg-gray-700">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        <input
                          type="checkbox"
                          checked={selectedData.length === trainingData.length && trainingData.length > 0}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedData(trainingData.map(item => item.id));
                            } else {
                              setSelectedData([]);
                            }
                          }}
                          className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                        />
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        –í–æ–ø—Ä–æ—Å
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        –û—Ç–≤–µ—Ç
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        –ö–∞—á–µ—Å—Ç–≤–æ
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        –°—Ç–∞—Ç—É—Å
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                        –î–µ–π—Å—Ç–≤–∏—è
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    {isLoading ? (
                      <tr>
                        <td colSpan="6" className="px-6 py-4 text-center">
                          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 dark:border-blue-400 mx-auto"></div>
                        </td>
                      </tr>
                    ) : trainingData.length === 0 ? (
                      <tr>
                        <td colSpan="6" className="px-6 py-4 text-center text-gray-500 dark:text-gray-400">
                          –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        </td>
                      </tr>
                    ) : (
                      trainingData.map((item) => (
                        <tr key={item.id}>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <input
                              type="checkbox"
                              checked={selectedData.includes(item.id)}
                              onChange={(e) => {
                                if (e.target.checked) {
                                  setSelectedData([...selectedData, item.id]);
                                } else {
                                  setSelectedData(selectedData.filter(id => id !== item.id));
                                }
                              }}
                              className="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600"
                            />
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-900 dark:text-gray-100 max-w-xs truncate">
                            {item.question || '–ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞'}
                          </td>
                          <td className="px-6 py-4 text-sm text-gray-900 dark:text-gray-100 max-w-xs truncate">
                            {item.answer || '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <div className="flex">
                              {renderStars(item.quality_score || 0)}
                            </div>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap">
                            <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                              item.is_approved 
                                ? 'bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-400' 
                                : 'bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-400'
                            }`}>
                              {item.is_approved ? '–û–¥–æ–±—Ä–µ–Ω–æ' : '–û–∂–∏–¥–∞–µ—Ç'}
                            </span>
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <div className="flex space-x-2">
                              <button
                                onClick={() => approveData(item.id)}
                                className="text-green-600 dark:text-green-400 hover:text-green-900 dark:hover:text-green-300"
                              >
                                <CheckCircle className="w-4 h-4" />
                              </button>
                              <button
                                onClick={() => rejectData(item.id)}
                                className="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300"
                              >
                                <XCircle className="w-4 h-4" />
                              </button>
                            </div>
                          </td>
                        </tr>
                      ))
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {/* –û–±—É—á–µ–Ω–∏–µ */}
        {activeTab === 'training' && (
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">–ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è</h3>
              <p className="text-gray-600 dark:text-gray-400 mb-4">
                –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ LoRA
              </p>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
                  </label>
                  <input
                    type="text"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û–±—É—á–µ–Ω–∏–µ v1.1.0"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white placeholder-gray-400 dark:placeholder-gray-400 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
                  </label>
                  <input
                    type="number"
                    min="1"
                    max="10"
                    defaultValue="3"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white placeholder-gray-400 dark:placeholder-gray-400 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div className="mt-6">
                <button
                  onClick={startTraining}
                  disabled={isLoading}
                  className="flex items-center space-x-2 px-6 py-3 bg-blue-600 dark:bg-blue-700 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-800 disabled:opacity-50"
                >
                  <Play className="w-4 h-4" />
                  <span>–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ</span>
                </button>
              </div>
            </div>

            {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ–±—É—á–µ–Ω–∏—è</h3>
              </div>
              <div className="p-6">
                <p className="text-gray-500 dark:text-gray-400 text-center">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ–±—É—á–µ–Ω–∏—è</p>
              </div>
            </div>
          </div>
        )}

        {/* –ú–æ–¥–µ–ª–∏ */}
        {activeTab === 'models' && (
          <div className="space-y-6">
            <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª—è–º–∏</h3>
              <p className="text-gray-600 dark:text-gray-400 mb-4">
                –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –≤–µ—Ä—Å–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π
              </p>
              
              <div className="mt-6">
                <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 dark:bg-blue-700 text-white rounded-lg hover:bg-blue-700 dark:hover:bg-blue-800">
                  <Upload className="w-4 h-4" />
                  <span>–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é</span>
                </button>
              </div>
            </div>

            {/* –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π */}
            <div className="bg-white dark:bg-gray-800 rounded-lg shadow">
              <div className="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                <h3 className="text-lg font-semibold text-gray-900 dark:text-white">–í–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–µ–π</h3>
              </div>
              <div className="p-6">
                <p className="text-gray-500 dark:text-gray-400 text-center">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π</p>
              </div>
            </div>
          </div>
        )}

        {/* –û—à–∏–±–∫–∏ */}
        {error && (
          <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-md p-4">
            <div className="flex">
              <AlertCircle className="h-5 w-5 text-red-400 dark:text-red-500" />
              <div className="ml-3">
                <h3 className="text-sm font-medium text-red-800 dark:text-red-400">–û—à–∏–±–∫–∞</h3>
                <div className="mt-2 text-sm text-red-700 dark:text-red-300">
                  {typeof error === 'string' ? error : (error.message || error.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')}
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default LoRAManagement;
