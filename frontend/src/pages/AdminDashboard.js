import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useNavigate } from 'react-router-dom';
import CanaryManagement from '../components/CanaryManagement';
import LoRAManagement from '../components/LoRAManagement';

const AdminDashboard = () => {
  const { user, token } = useAuth();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState('dashboard');
  const [stats, setStats] = useState(null);
  const [users, setUsers] = useState([]);
  const [auditLogs, setAuditLogs] = useState([]);
  const [securityEvents, setSecurityEvents] = useState([]);
  const [systemHealth, setSystemHealth] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const [showCanaryManagement, setShowCanaryManagement] = useState(false);
  const [showLoRAManagement, setShowLoRAManagement] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  useEffect(() => {
    if (!user || !user.is_admin) {
      navigate('/');
      return;
    }
    loadDashboardData();
  }, [user, navigate, loadDashboardData]);

  const loadDashboardData = useCallback(async () => {
    try {
      setLoading(true);
      const headers = {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      };

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const statsResponse = await fetch('/api/v1/admin/dashboard', { headers });
      if (statsResponse.status === 401 || statsResponse.status === 403) {
        setError('–°–µ—Å—Å–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –ê–¥–º–∏–Ω.');
        setStats(null);
        setUsers([]);
        return;
      }
      if (statsResponse.ok) {
        const statsData = await statsResponse.json();
        setStats(statsData);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
      const healthResponse = await fetch('/api/v1/monitoring/health', { headers });
      if (healthResponse.ok) {
        const healthData = await healthResponse.json();
        setSystemHealth(healthData);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const usersResponse = await fetch('/api/v1/admin/users?limit=10&_ts=' + Date.now(), { headers });
      if (usersResponse.ok) {
        const usersData = await usersResponse.json();
        setUsers(Array.isArray(usersData?.users) ? usersData.users : (Array.isArray(usersData) ? usersData : []));
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–≥–∏ –∞—É–¥–∏—Ç–∞
      const auditResponse = await fetch('/api/v1/admin/audit-logs?limit=20', { headers });
      if (auditResponse.ok) {
        const auditData = await auditResponse.json();
        setAuditLogs(auditData.logs);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const securityResponse = await fetch('/api/v1/admin/security-events?limit=10', { headers });
      if (securityResponse.ok) {
        const securityData = await securityResponse.json();
        setSecurityEvents(securityData.events);
      }

    } catch (err) {
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${err.message}`);
      console.error('Admin dashboard error:', err);
    } finally {
      setLoading(false);
    }
  }, [token]);

  const toggleUserStatus = async (userId, currentStatus) => {
    try {
      const response = await fetch(`/api/v1/admin/users/${userId}/toggle-status`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        setUsers(users.map(user => 
          user.id === userId 
            ? { ...user, is_active: !currentStatus }
            : user
        ));
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        loadDashboardData();
      } else {
        const errorData = await response.json();
        setError(errorData.detail || '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      console.error('Toggle user status error:', err);
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleString('ru-RU');
  };

  const getSeverityColor = (severity) => {
    switch (severity) {
      case 'high': return 'text-red-500';
      case 'medium': return 'text-yellow-500';
      case 'low': return 'text-green-500';
      default: return 'text-gray-500';
    }
  };

  const getThreatLevelColor = (level) => {
    switch (level) {
      case 'high': return 'bg-red-100 text-red-800';
      case 'medium': return 'bg-yellow-100 text-yellow-800';
      case 'low': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-white text-xl">–ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-900">
      {/* Header */}
      <div className="bg-gray-800 border-b border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center">
              <h1 className="text-2xl font-bold text-white">üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ê–î–í–ê–ö–û–î</h1>
            </div>
            <div className="flex items-center space-x-4">
              <span className="text-gray-300">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.email}</span>
              <button
                onClick={() => navigate('/')}
                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
              >
                –í—ã–π—Ç–∏
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Navigation Tabs */}
      <div className="bg-gray-800 border-b border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <nav className="flex space-x-8">
            {[
              { id: 'dashboard', name: 'üìä –î–∞—à–±–æ—Ä–¥', icon: 'üìä' },
              { id: 'users', name: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', icon: 'üë•' },
              { id: 'roles', name: 'üîê –†–æ–ª–∏', icon: 'üîê' },
              { id: 'audit', name: 'üìã –ê—É–¥–∏—Ç', icon: 'üìã' },
              { id: 'security', name: 'üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', icon: 'üîí' },
              { id: 'system', name: '‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞', icon: '‚öôÔ∏è' },
              { id: 'canary', name: 'üöÄ Canary', icon: 'üöÄ' },
              { id: 'lora', name: 'üß† LoRA', icon: 'üß†' }
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${
                  activeTab === tab.id
                    ? 'border-red-500 text-red-400'
                    : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-300'
                }`}
              >
                {tab.name}
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Error Message */}
      {error && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            {error}
            <button
              onClick={() => setError('')}
              className="float-right text-red-700 hover:text-red-900"
            >
              ‚úï
            </button>
          </div>
        </div>
      )}

      {/* Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Dashboard Tab */}
        {activeTab === 'dashboard' && stats && (
          <div className="space-y-6">
            {/* Stats Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
                <div className="flex items-center">
                  <div className="p-2 bg-blue-500 rounded-lg">
                    <span className="text-white text-xl">üë•</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-gray-400 text-sm">–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                    <p className="text-white text-2xl font-bold">{stats.users.total}</p>
                    <p className="text-green-400 text-sm">+{stats.users.new_24h} –∑–∞ 24—á</p>
                  </div>
                </div>
              </div>

              <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
                <div className="flex items-center">
                  <div className="p-2 bg-green-500 rounded-lg">
                    <span className="text-white text-xl">üí¨</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-gray-400 text-sm">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                    <p className="text-white text-2xl font-bold">{stats.chats.total_messages}</p>
                    <p className="text-green-400 text-sm">+{stats.chats.new_messages_24h} –∑–∞ 24—á</p>
                  </div>
                </div>
              </div>

              <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
                <div className="flex items-center">
                  <div className="p-2 bg-yellow-500 rounded-lg">
                    <span className="text-white text-xl">‚≠ê</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-gray-400 text-sm">–ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</p>
                    <p className="text-white text-2xl font-bold">{stats.users.premium}</p>
                    <p className="text-gray-400 text-sm">{Math.round((stats.users.premium / stats.users.total) * 100)}% –æ—Ç –æ–±—â–µ–≥–æ</p>
                  </div>
                </div>
              </div>

              <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
                <div className="flex items-center">
                  <div className="p-2 bg-red-500 rounded-lg">
                    <span className="text-white text-xl">üîí</span>
                  </div>
                  <div className="ml-4">
                    <p className="text-gray-400 text-sm">–°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</p>
                    <p className="text-white text-2xl font-bold">{stats.security.events_24h}</p>
                    <p className="text-gray-400 text-sm">–∑–∞ 24 —á–∞—Å–∞</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Top Users */}
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <h3 className="text-lg font-semibold text-white mb-4">üèÜ –¢–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
              <div className="space-y-3">
                {stats.top_users.map((user, index) => (
                  <div key={user.id} className="flex items-center justify-between p-3 bg-gray-700 rounded-lg">
                    <div className="flex items-center">
                      <span className="text-gray-400 mr-3">#{index + 1}</span>
                      <div>
                        <p className="text-white font-medium">{user.username || user.email}</p>
                        <p className="text-gray-400 text-sm">{user.email}</p>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      {user.is_premium && (
                        <span className="bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded">Premium</span>
                      )}
                      <span className="text-gray-400 text-sm">{formatDate(user.created_at)}</span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Users Tab */}
        {activeTab === 'users' && (
          <div className="space-y-6">
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <h3 className="text-lg font-semibold text-white mb-4">üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</h3>
              <div className="overflow-x-auto">
                <table className="min-w-full">
                  <thead>
                    <tr className="border-b border-gray-700">
                      <th className="text-left text-gray-400 py-3">ID</th>
                      <th className="text-left text-gray-400 py-3">Email</th>
                      <th className="text-left text-gray-400 py-3">–ò–º—è</th>
                      <th className="text-left text-gray-400 py-3">–°—Ç–∞—Ç—É—Å</th>
                      <th className="text-left text-gray-400 py-3">Premium</th>
                      <th className="text-left text-gray-400 py-3">–°–æ–∑–¥–∞–Ω</th>
                      <th className="text-left text-gray-400 py-3">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                  </thead>
                  <tbody>
                    {users.map((user) => (
                      <tr key={user.id} className="border-b border-gray-700">
                        <td className="text-white py-3">{user.id}</td>
                        <td className="text-white py-3">{user.email}</td>
                        <td className="text-white py-3">{user.full_name || '-'}</td>
                        <td className="py-3">
                          <span className={`px-2 py-1 rounded text-xs ${
                            user.is_active 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-red-100 text-red-800'
                          }`}>
                            {user.is_active ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}
                          </span>
                        </td>
                        <td className="py-3">
                          {user.is_premium && (
                            <span className="bg-yellow-100 text-yellow-800 px-2 py-1 rounded text-xs">
                              Premium
                            </span>
                          )}
                        </td>
                        <td className="text-gray-400 py-3 text-sm">{formatDate(user.created_at)}</td>
                        <td className="py-3">
                          <button
                            onClick={() => toggleUserStatus(user.id, user.is_active)}
                            className={`px-3 py-1 rounded text-xs transition-colors ${
                              user.is_active
                                ? 'bg-red-600 hover:bg-red-700 text-white'
                                : 'bg-green-600 hover:bg-green-700 text-white'
                            }`}
                          >
                            {user.is_active ? '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å'}
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}

        {/* Roles Tab */}
        {activeTab === 'roles' && (
          <div className="space-y-6">
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-lg font-semibold text-white">üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏</h3>
                <button
                  onClick={() => navigate('/role-management')}
                  className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition-colors flex items-center"
                >
                  <span className="mr-2">üîß</span>
                  –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
                </button>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div className="bg-gray-700 p-4 rounded-lg border border-gray-600">
                  <div className="flex items-center mb-2">
                    <span className="text-red-400 text-xl mr-2">üëë</span>
                    <h4 className="text-white font-medium">–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω</h4>
                  </div>
                  <p className="text-gray-400 text-sm mb-3">–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã</p>
                  <div className="flex flex-wrap gap-1">
                    <span className="bg-red-100 text-red-800 text-xs px-2 py-1 rounded">–í—Å–µ –ø—Ä–∞–≤–∞</span>
                  </div>
                </div>

                <div className="bg-gray-700 p-4 rounded-lg border border-gray-600">
                  <div className="flex items-center mb-2">
                    <span className="text-purple-400 text-xl mr-2">üõ°Ô∏è</span>
                    <h4 className="text-white font-medium">–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</h4>
                  </div>
                  <p className="text-gray-400 text-sm mb-3">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</p>
                  <div className="flex flex-wrap gap-1">
                    <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</span>
                    <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded">–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
                    <span className="bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded">–ß–∞—Ç—ã</span>
                  </div>
                </div>

                <div className="bg-gray-700 p-4 rounded-lg border border-gray-600">
                  <div className="flex items-center mb-2">
                    <span className="text-blue-400 text-xl mr-2">üëÆ</span>
                    <h4 className="text-white font-medium">–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä</h4>
                  </div>
                  <p className="text-gray-400 text-sm mb-3">–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
                  <div className="flex flex-wrap gap-1">
                    <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">–ú–æ–¥–µ—Ä–∞—Ü–∏—è</span>
                    <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded">–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
                  </div>
                </div>

                <div className="bg-gray-700 p-4 rounded-lg border border-gray-600">
                  <div className="flex items-center mb-2">
                    <span className="text-green-400 text-xl mr-2">üìÑ</span>
                    <h4 className="text-white font-medium">–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä</h4>
                  </div>
                  <p className="text-gray-400 text-sm mb-3">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º</p>
                  <div className="flex flex-wrap gap-1">
                    <span className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded">–î–æ–∫—É–º–µ–Ω—Ç—ã</span>
                    <span className="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
                  </div>
                </div>

                <div className="bg-gray-700 p-4 rounded-lg border border-gray-600">
                  <div className="flex items-center mb-2">
                    <span className="text-yellow-400 text-xl mr-2">üéß</span>
                    <h4 className="text-white font-medium">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</h4>
                  </div>
                  <p className="text-gray-400 text-sm mb-3">–ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —á–∞—Ç–æ–≤</p>
                  <div className="flex flex-wrap gap-1">
                    <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</span>
                    <span className="bg-yellow-100 text-yellow-800 text-xs px-2 py-1 rounded">–ß–∞—Ç—ã</span>
                    <span className="bg-gray-100 text-gray-800 text-xs px-2 py-1 rounded">–õ–æ–≥–∏</span>
                  </div>
                </div>

                <div className="bg-gray-700 p-4 rounded-lg border border-gray-600">
                  <div className="flex items-center mb-2">
                    <span className="text-indigo-400 text-xl mr-2">üìä</span>
                    <h4 className="text-white font-medium">–ê–Ω–∞–ª–∏—Ç–∏–∫</h4>
                  </div>
                  <p className="text-gray-400 text-sm mb-3">–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤</p>
                  <div className="flex flex-wrap gap-1">
                    <span className="bg-purple-100 text-purple-800 text-xs px-2 py-1 rounded">–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</span>
                    <span className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">–≠–∫—Å–ø–æ—Ä—Ç</span>
                  </div>
                </div>
              </div>

              <div className="mt-6 p-4 bg-gray-700 rounded-lg border border-gray-600">
                <h4 className="text-white font-medium mb-2">üõ°Ô∏è –ó–∞—â–∏—Ç–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞</h4>
                <p className="text-gray-400 text-sm mb-3">
                  –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—â–∏—â–µ–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –º–µ—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:
                </p>
                <ul className="text-gray-400 text-sm space-y-1">
                  <li>‚Ä¢ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞</li>
                  <li>‚Ä¢ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è</li>
                  <li>‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç–∑—ã–≤–∞ —Ä–æ–ª–∏ super_admin</li>
                  <li>‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</li>
                </ul>
              </div>
            </div>
          </div>
        )}

        {/* Audit Tab */}
        {activeTab === 'audit' && (
          <div className="space-y-6">
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <h3 className="text-lg font-semibold text-white mb-4">üìã –õ–æ–≥–∏ –∞—É–¥–∏—Ç–∞</h3>
              <div className="space-y-3">
                {auditLogs.map((log) => (
                  <div key={log.id} className="p-4 bg-gray-700 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <span className={`px-2 py-1 rounded text-xs ${getSeverityColor(log.severity)}`}>
                          {log.severity}
                        </span>
                        <span className="text-white font-medium">{log.action}</span>
                        <span className="text-gray-400">{log.description}</span>
                      </div>
                      <span className="text-gray-400 text-sm">{formatDate(log.created_at)}</span>
                    </div>
                    {log.ip_address && (
                      <div className="mt-2 text-sm text-gray-400">
                        IP: {log.ip_address} | User ID: {log.user_id || 'N/A'}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Security Tab */}
        {activeTab === 'security' && (
          <div className="space-y-6">
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <h3 className="text-lg font-semibold text-white mb-4">üîí –°–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</h3>
              <div className="space-y-3">
                {securityEvents.map((event) => (
                  <div key={event.id} className="p-4 bg-gray-700 rounded-lg">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <span className={`px-2 py-1 rounded text-xs ${getThreatLevelColor(event.threat_level)}`}>
                          {event.threat_level}
                        </span>
                        <span className="text-white font-medium">{event.event_type}</span>
                        <span className="text-gray-400">{event.description}</span>
                      </div>
                      <span className="text-gray-400 text-sm">{formatDate(event.created_at)}</span>
                    </div>
                    {event.ip_address && (
                      <div className="mt-2 text-sm text-gray-400">
                        IP: {event.ip_address} | User ID: {event.user_id || 'N/A'} | Status: {event.status}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* System Tab */}
        {activeTab === 'system' && systemHealth && (
          <div className="space-y-6">
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <h3 className="text-lg font-semibold text-white mb-4">‚öôÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-white font-medium mb-3">ü§ñ AI –ú–æ–¥–µ–ª–∏</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400">Saiga Mistral 7B</span>
                      <span className={`px-2 py-1 rounded text-xs ${
                        systemHealth.ai_models.saiga_ready 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {systemHealth.ai_models.saiga_ready ? '–ì–æ—Ç–æ–≤' : '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è'}
                      </span>
                    </div>
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400">Embeddings</span>
                      <span className={`px-2 py-1 rounded text-xs ${
                        systemHealth.ai_models.embeddings_ready 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {systemHealth.ai_models.embeddings_ready ? '–ì–æ—Ç–æ–≤' : '–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è'}
                      </span>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="text-white font-medium mb-3">üóÑÔ∏è –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400">ChromaDB</span>
                      <span className={`px-2 py-1 rounded text-xs ${
                        systemHealth.vector_store.ready 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {systemHealth.vector_store.ready ? '–ì–æ—Ç–æ–≤' : '–ù–µ –≥–æ—Ç–æ–≤'}
                      </span>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="text-white font-medium mb-3">üß† RAG –°–∏—Å—Ç–µ–º–∞</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400">–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å</span>
                      <span className={`px-2 py-1 rounded text-xs ${
                        systemHealth.rag_system.ready 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {systemHealth.rag_system.ready ? '–ì–æ—Ç–æ–≤' : '–ù–µ –≥–æ—Ç–æ–≤'}
                      </span>
                    </div>
                  </div>
                </div>

                <div>
                  <h4 className="text-white font-medium mb-3">üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</h4>
                  <div className="space-y-2">
                    <div className="flex items-center justify-between">
                      <span className="text-gray-400">SQLite</span>
                      <span className="px-2 py-1 rounded text-xs bg-green-100 text-green-800">
                        –ü–æ–¥–∫–ª—é—á–µ–Ω–∞
                      </span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Canary Tab */}
        {activeTab === 'canary' && (
          <div className="space-y-6">
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <h2 className="text-xl font-bold text-white mb-4">üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Canary-—Ä–µ–ª–∏–∑–∞–º–∏</h2>
              <p className="text-gray-400 mb-6">
                –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π –º–æ–¥–µ–ª–µ–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç–∫–∞—Ç–æ–º –ø—Ä–∏ –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫.
              </p>
              <button
                onClick={() => setShowCanaryManagement(true)}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                –û—Ç–∫—Ä—ã—Ç—å Canary Management
              </button>
            </div>
          </div>
        )}

        {/* LoRA Tab */}
        {activeTab === 'lora' && (
          <div className="space-y-6">
            <div className="bg-gray-800 p-6 rounded-lg border border-gray-700">
              <h2 className="text-xl font-bold text-white mb-4">üß† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ LoRA –æ–±—É—á–µ–Ω–∏–µ–º</h2>
              <p className="text-gray-400 mb-6">
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º LoRA —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∏–º–µ—Ä–æ–≤.
              </p>
              <button
                onClick={() => setShowLoRAManagement(true)}
                className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition-colors"
              >
                –û—Ç–∫—Ä—ã—Ç—å LoRA Management
              </button>
            </div>
          </div>
        )}
      </div>

      {/* Modals */}
      <CanaryManagement
        isVisible={showCanaryManagement}
        onClose={() => setShowCanaryManagement(false)}
      />

      <LoRAManagement
        isVisible={showLoRAManagement}
        onClose={() => setShowLoRAManagement(false)}
      />
    </div>
  );
};

export default AdminDashboard;
