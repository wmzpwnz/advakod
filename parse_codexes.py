#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–µ–∫—Å–æ–≤ —Å pravo.gov.ru
"""

import requests
from bs4 import BeautifulSoup
import re
import json
from urllib.parse import urljoin, urlparse
import time

def parse_codexes():
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥–µ–∫—Å—ã —Å pravo.gov.ru"""
    
    url = "http://pravo.gov.ru/codex/"
    
    try:
        print(f"üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {url}")
        response = requests.get(url, timeout=30)
        response.raise_for_status()
        
        soup = BeautifulSoup(response.content, 'html.parser')
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–¥–µ–∫—Å—ã
        codex_links = []
        
        # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ —Å actual.pravo.gov.ru
        for link in soup.find_all('a', href=True):
            href = link.get('href')
            if 'actual.pravo.gov.ru' in href:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏
                text = link.get_text(strip=True)
                if text and len(text) > 10:  # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ç–µ–∫—Å—Ç—ã
                    codex_links.append({
                        'title': text,
                        'url': href
                    })
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(codex_links)}")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–æ–¥–µ–∫—Å—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—è–º
        codexes = {}
        
        for link in codex_links:
            title = link['title']
            url = link['url']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–¥–µ–∫—Å–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            if '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å' in title and '–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π' not in title:
                codex_name = '–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö' in title:
                codex_name = '–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –†–§'
            elif '–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–ó–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–£–≥–æ–ª–æ–≤–Ω–æ-–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å' in title:
                codex_name = '–£–≥–æ–ª–æ–≤–Ω–æ-–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§'
            elif '–ö–æ–¥–µ–∫—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—É–¥–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞' in title:
                codex_name = '–ö–æ–¥–µ–∫—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—É–¥–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –†–§'
            else:
                # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–¥–µ–∫—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞
                words = title.split()[:3]
                codex_name = ' '.join(words)
            
            if codex_name not in codexes:
                codexes[codex_name] = {
                    'priority': 1 if any(x in codex_name for x in ['–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π', '–ù–∞–ª–æ–≥–æ–≤—ã–π', '–¢—Ä—É–¥–æ–≤–æ–π', '–£–≥–æ–ª–æ–≤–Ω—ã–π']) else 2,
                    'urls': [],
                    'keywords': []
                }
            
            codexes[codex_name]['urls'].append(url)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
            keywords = []
            if '–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π' in codex_name:
                keywords.extend(['–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å', '–≥–∫ —Ä—Ñ', '51-–§–ó'])
            elif '–ù–∞–ª–æ–≥–æ–≤—ã–π' in codex_name:
                keywords.extend(['–Ω–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å', '–Ω–∫ —Ä—Ñ', '146-–§–ó'])
            elif '–¢—Ä—É–¥–æ–≤–æ–π' in codex_name:
                keywords.extend(['—Ç—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å', '—Ç–∫ —Ä—Ñ', '197-–§–ó'])
            elif '–£–≥–æ–ª–æ–≤–Ω—ã–π' in codex_name and '–ø—Ä–æ—Ü–µ—Å—Å—É–∞–ª—å–Ω—ã–π' not in codex_name:
                keywords.extend(['—É–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å', '—É–∫ —Ä—Ñ', '63-–§–ó'])
            elif '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö' in codex_name:
                keywords.extend(['–∫–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö', '–∫–æ–∞–ø —Ä—Ñ', '195-–§–ó'])
            elif '–°–µ–º–µ–π–Ω—ã–π' in codex_name:
                keywords.extend(['—Å–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å', '—Å–∫ —Ä—Ñ', '223-–§–ó'])
            elif '–ñ–∏–ª–∏—â–Ω—ã–π' in codex_name:
                keywords.extend(['–∂–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å', '–∂–∫ —Ä—Ñ', '188-–§–ó'])
            elif '–ó–µ–º–µ–ª—å–Ω—ã–π' in codex_name:
                keywords.extend(['–∑–µ–º–µ–ª—å–Ω—ã–π –∫–æ–¥–µ–∫—Å', '–∑–∫ —Ä—Ñ', '136-–§–ó'])
            
            codexes[codex_name]['keywords'] = list(set(keywords))
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã URL
        for codex_name in codexes:
            codexes[codex_name]['urls'] = list(set(codexes[codex_name]['urls']))
        
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–¥–µ–∫—Å–æ–≤: {len(codexes)}")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        for codex_name, info in codexes.items():
            print(f"\nüìñ {codex_name}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {info['priority']}")
            print(f"   –°—Å—ã–ª–æ–∫: {len(info['urls'])}")
            print(f"   –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(info['keywords'])}")
            for i, url in enumerate(info['urls'], 1):
                print(f"   {i}. {url}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_file = '/root/advakod/parsed_codexes.json'
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(codexes, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}")
        
        return codexes
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
        return {}

if __name__ == "__main__":
    parse_codexes()
