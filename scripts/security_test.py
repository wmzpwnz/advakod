#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ò–ò-—é—Ä–∏—Å—Ç
"""

import requests
import json
import time
from typing import Dict, List

class SecurityTester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def test_secrets_exposure(self) -> Dict:
        """–¢–µ—Å—Ç –Ω–∞ —É—Ç–µ—á–∫—É —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–µ—á–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        config_files = [
            "/config.env",
            "/.env", 
            "/backend/config.env",
            "/backend/.env"
        ]
        
        results = []
        for file_path in config_files:
            try:
                response = self.session.get(f"{self.base_url}{file_path}")
                if response.status_code == 200:
                    content = response.text
                    if any(secret in content.lower() for secret in ['secret_key', 'password', 'api_key']):
                        results.append({
                            "file": file_path,
                            "status": "VULNERABLE",
                            "details": "–°–µ–∫—Ä–µ—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ"
                        })
            except:
                pass
                
        return {
            "test": "secrets_exposure",
            "results": results,
            "status": "FAIL" if results else "PASS"
        }
    
    def test_input_validation(self) -> Dict:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ payloads
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "javascript:alert('XSS')",
            "<img src=x onerror=alert('XSS')>",
            "'; DROP TABLE users; --"
        ]
        
        results = []
        for payload in xss_payloads:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–∞—Ç API
                response = self.session.post(
                    f"{self.base_url}/api/v1/chat/message",
                    json={"message": payload, "session_id": 1},
                    headers={"Content-Type": "application/json"}
                )
                
                if response.status_code == 200:
                    results.append({
                        "payload": payload,
                        "status": "VULNERABLE",
                        "details": "XSS payload –ø—Ä–∏–Ω—è—Ç –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"
                    })
            except Exception as e:
                results.append({
                    "payload": payload,
                    "status": "ERROR",
                    "details": str(e)
                })
                
        return {
            "test": "input_validation",
            "results": results,
            "status": "FAIL" if any(r["status"] == "VULNERABLE" for r in results) else "PASS"
        }
    
    def test_authentication_bypass(self) -> Dict:
        """–¢–µ—Å—Ç –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ö–æ–¥–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        protected_endpoints = [
            "/api/v1/chat/sessions",
            "/api/v1/admin/dashboard",
            "/api/v1/users"
        ]
        
        results = []
        for endpoint in protected_endpoints:
            try:
                response = self.session.get(f"{self.base_url}{endpoint}")
                if response.status_code == 200:
                    results.append({
                        "endpoint": endpoint,
                        "status": "VULNERABLE",
                        "details": "–î–æ—Å—Ç—É–ø –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
                    })
                elif response.status_code == 401:
                    results.append({
                        "endpoint": endpoint,
                        "status": "SECURE",
                        "details": "–ü—Ä–∞–≤–∏–ª—å–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"
                    })
            except Exception as e:
                results.append({
                    "endpoint": endpoint,
                    "status": "ERROR",
                    "details": str(e)
                })
                
        return {
            "test": "authentication_bypass",
            "results": results,
            "status": "PASS" if all(r["status"] == "SECURE" for r in results) else "FAIL"
        }
    
    def test_rate_limiting(self) -> Dict:
        """–¢–µ—Å—Ç rate limiting"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
        requests_count = 100
        success_count = 0
        rate_limited_count = 0
        
        for i in range(requests_count):
            try:
                response = self.session.get(f"{self.base_url}/api/v1/chat/sessions")
                if response.status_code == 200:
                    success_count += 1
                elif response.status_code == 429:
                    rate_limited_count += 1
                    break
                time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            except:
                pass
                
        return {
            "test": "rate_limiting",
            "results": {
                "total_requests": requests_count,
                "successful": success_count,
                "rate_limited": rate_limited_count
            },
            "status": "PASS" if rate_limited_count > 0 else "FAIL"
        }
    
    def test_sql_injection(self) -> Dict:
        """–¢–µ—Å—Ç SQL –∏–Ω—ä–µ–∫—Ü–∏–π"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SQL –∏–Ω—ä–µ–∫—Ü–∏–π...")
        
        sql_payloads = [
            "'; DROP TABLE users; --",
            "' OR '1'='1",
            "' UNION SELECT * FROM users --",
            "admin'--",
            "' OR 1=1 --"
        ]
        
        results = []
        for payload in sql_payloads:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö
                test_data = {
                    "username": payload,
                    "email": payload,
                    "message": payload
                }
                
                response = self.session.post(
                    f"{self.base_url}/api/v1/auth/login",
                    data=test_data
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ SQL –æ—à–∏–±–æ–∫
                if any(error in response.text.lower() for error in [
                    'sql', 'database', 'mysql', 'postgresql', 'syntax error'
                ]):
                    results.append({
                        "payload": payload,
                        "status": "VULNERABLE",
                        "details": "–í–æ–∑–º–æ–∂–Ω–∞—è SQL –∏–Ω—ä–µ–∫—Ü–∏—è"
                    })
                    
            except Exception as e:
                results.append({
                    "payload": payload,
                    "status": "ERROR",
                    "details": str(e)
                })
                
        return {
            "test": "sql_injection",
            "results": results,
            "status": "FAIL" if any(r["status"] == "VULNERABLE" for r in results) else "PASS"
        }
    
    def run_all_tests(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        tests = [
            self.test_secrets_exposure,
            self.test_input_validation,
            self.test_authentication_bypass,
            self.test_rate_limiting,
            self.test_sql_injection
        ]
        
        results = {}
        for test in tests:
            try:
                result = test()
                results[result["test"]] = result
                print(f"‚úÖ {result['test']}: {result['status']}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
                
        return results

if __name__ == "__main__":
    tester = SecurityTester()
    results = tester.run_all_tests()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:")
    print("=" * 50)
    
    for test_name, result in results.items():
        status_icon = "‚úÖ" if result["status"] == "PASS" else "‚ùå"
        print(f"{status_icon} {test_name}: {result['status']}")
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("security_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
        
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ security_test_results.json")
