#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ RAG —Å–∏—Å—Ç–µ–º—ã –Ω–∞ golden dataset
"""

import requests
import json
import time
from typing import Dict, List, Tuple
import re

class GoldenRetrievalTester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        
        # Golden dataset –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.golden_questions = [
            {
                "question": "–ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –≤ —Å—Ç. 432 –ì–ö –†–§?",
                "expected_article": "432",
                "expected_law": "–ì–ö –†–§",
                "expected_content": ["—É—Å–ª–æ–≤–∏—è", "–¥–æ–≥–æ–≤–æ—Ä", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ"]
            },
            {
                "question": "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–≤–∞—Ä–∞?",
                "expected_law": "–ó–æ–ó–ü–ü",
                "expected_content": ["–ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å", "–ø—Ä–∞–≤–∞", "—Ç–æ–≤–∞—Ä", "–≤–æ–∑–≤—Ä–∞—Ç", "–æ–±–º–µ–Ω"]
            },
            {
                "question": "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä?",
                "expected_law": "–¢–ö –†–§",
                "expected_content": ["—Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä", "–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "—Ä–∞–±–æ—Ç–Ω–∏–∫", "—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å"]
            },
            {
                "question": "–ß—Ç–æ —Ç–∞–∫–æ–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å?",
                "expected_law": "–ì–ö –†–§",
                "expected_content": ["–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–∞–≤—Ç–æ—Ä—Å–∫–∏–µ –ø—Ä–∞–≤–∞", "–ø–∞—Ç–µ–Ω—Ç"]
            },
            {
                "question": "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò–ü?",
                "expected_content": ["–ò–ü", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "–∑–∞—è–≤–ª–µ–Ω–∏–µ"]
            }
        ]
    
    def test_retrieval_quality(self, question: Dict) -> Dict:
        """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {question['question']}")
        
        start_time = time.time()
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ RAG —Å–∏—Å—Ç–µ–º—É
            response = self.session.post(
                f"{self.base_url}/api/v1/chat/message",
                json={
                    "message": question["question"],
                    "session_id": 1
                },
                headers={"Content-Type": "application/json"}
            )
            
            end_time = time.time()
            response_time = end_time - start_time
            
            if response.status_code != 200:
                return {
                    "question": question["question"],
                    "status": "error",
                    "error": f"HTTP {response.status_code}",
                    "response_time": response_time
                }
            
            data = response.json()
            answer = data.get("message", "")
            sources = data.get("sources", [])
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
            quality_metrics = self.analyze_answer_quality(question, answer, sources)
            
            return {
                "question": question["question"],
                "status": "success",
                "response_time": response_time,
                "answer_length": len(answer),
                "sources_count": len(sources),
                "quality_metrics": quality_metrics,
                "answer": answer,
                "sources": sources
            }
            
        except Exception as e:
            return {
                "question": question["question"],
                "status": "error",
                "error": str(e),
                "response_time": time.time() - start_time
            }
    
    def analyze_answer_quality(self, question: Dict, answer: str, sources: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞"""
        metrics = {}
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å—Ç–∞—Ç–µ–π/–∑–∞–∫–æ–Ω–æ–≤
        if "expected_article" in question:
            article_found = question["expected_article"] in answer
            metrics["expected_article_found"] = article_found
        
        if "expected_law" in question:
            law_found = question["expected_law"] in answer
            metrics["expected_law_found"] = law_found
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        expected_content = question.get("expected_content", [])
        content_matches = 0
        for keyword in expected_content:
            if keyword.lower() in answer.lower():
                content_matches += 1
        
        metrics["content_match_rate"] = content_matches / len(expected_content) if expected_content else 0
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if sources:
            metrics["has_sources"] = True
            metrics["source_quality"] = self.analyze_source_quality(sources, question)
        else:
            metrics["has_sources"] = False
            metrics["source_quality"] = 0
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏ (–ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞)
        hallucination_indicators = [
            "—è –Ω–µ –∑–Ω–∞—é", "–Ω–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å", "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            "–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        ]
        
        has_hallucination_indicators = any(
            indicator in answer.lower() for indicator in hallucination_indicators
        )
        metrics["potential_hallucination"] = has_hallucination_indicators
        
        # 5. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–º–∏)
        metrics["answer_length_adequate"] = len(answer) > 100
        
        # 6. –ù–∞–ª–∏—á–∏–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
        legal_terms = [
            "—Å—Ç–∞—Ç—å—è", "–ø—É–Ω–∫—Ç", "—á–∞—Å—Ç—å", "–∑–∞–∫–æ–Ω", "–∫–æ–¥–µ–∫—Å", "–ø—Ä–∞–≤–æ", "–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—å",
            "–¥–æ–≥–æ–≤–æ—Ä", "—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", "—Å–¥–µ–ª–∫–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
        ]
        
        legal_terms_found = sum(1 for term in legal_terms if term in answer.lower())
        metrics["legal_terms_count"] = legal_terms_found
        metrics["legal_terms_adequate"] = legal_terms_found >= 3
        
        return metrics
    
    def analyze_source_quality(self, sources: List[Dict], question: Dict) -> float:
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        if not sources:
            return 0.0
        
        quality_score = 0.0
        
        for source in sources:
            source_score = 0.0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ —Å—Ö–æ–¥—Å—Ç–≤—É
            similarity = source.get("similarity", 0.0)
            if similarity > 0.7:
                source_score += 0.4
            elif similarity > 0.5:
                source_score += 0.2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
            metadata = source.get("metadata", {})
            if metadata:
                source_score += 0.2
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç—å–∏/–∑–∞–∫–æ–Ω–∞
                if "article" in metadata or "law" in metadata:
                    source_score += 0.2
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –∑–∞–∫–æ–Ω—É
                if "expected_law" in question:
                    if question["expected_law"] in str(metadata):
                        source_score += 0.2
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            content = source.get("content", "")
            if len(content) > 100:
                source_score += 0.1
            
            quality_score += source_score
        
        return min(quality_score / len(sources), 1.0)
    
    def test_hit_at_k(self, k_values: List[int] = [1, 3, 5, 10]) -> Dict:
        """–¢–µ—Å—Ç Hit@K –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π K"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Hit@K...")
        
        results = {}
        
        for k in k_values:
            hit_count = 0
            total_questions = len(self.golden_questions)
            
            for question in self.golden_questions:
                test_result = self.test_retrieval_quality(question)
                
                if test_result["status"] == "success":
                    sources = test_result.get("sources", [])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ —Ç–æ–ø-K
                    relevant_sources = 0
                    for source in sources[:k]:
                        similarity = source.get("similarity", 0.0)
                        if similarity > 0.5:  # –ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                            relevant_sources += 1
                    
                    if relevant_sources > 0:
                        hit_count += 1
            
            hit_at_k = hit_count / total_questions
            results[f"hit_at_{k}"] = hit_at_k
            
            print(f"   Hit@{k}: {hit_at_k:.3f} ({hit_count}/{total_questions})")
        
        return results
    
    def test_citation_accuracy(self) -> Dict:
        """–¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        citation_results = []
        
        for question in self.golden_questions:
            test_result = self.test_retrieval_quality(question)
            
            if test_result["status"] == "success":
                sources = test_result.get("sources", [])
                answer = test_result.get("answer", "")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
                has_citations = False
                for source in sources:
                    source_title = source.get("title", "")
                    if source_title and source_title in answer:
                        has_citations = True
                        break
                
                citation_results.append({
                    "question": question["question"],
                    "has_citations": has_citations,
                    "sources_count": len(sources)
                })
        
        total_questions = len(citation_results)
        questions_with_citations = sum(1 for r in citation_results if r["has_citations"])
        
        citation_accuracy = questions_with_citations / total_questions if total_questions > 0 else 0
        
        return {
            "citation_accuracy": citation_accuracy,
            "total_questions": total_questions,
            "questions_with_citations": questions_with_citations,
            "detailed_results": citation_results
        }
    
    def test_hallucination_rate(self) -> Dict:
        """–¢–µ—Å—Ç —á–∞—Å—Ç–æ—Ç—ã –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π...")
        
        hallucination_results = []
        
        for question in self.golden_questions:
            test_result = self.test_retrieval_quality(question)
            
            if test_result["status"] == "success":
                answer = test_result.get("answer", "")
                sources = test_result.get("sources", [])
                
                # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
                is_hallucination = False
                
                # –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, –Ω–æ –µ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                if not sources and len(answer) > 200:
                    is_hallucination = True
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                contradiction_indicators = [
                    "—Å –æ–¥–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã", "—Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã",
                    "–æ–¥–Ω–∞–∫–æ", "–Ω–æ", "—Ö–æ—Ç—è"
                ]
                
                if any(indicator in answer.lower() for indicator in contradiction_indicators):
                    is_hallucination = True
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –æ–±—â–∏–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏
                vague_indicators = [
                    "–≤ –æ–±—â–µ–º", "–∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ", "–æ–±—ã—á–Ω–æ",
                    "–≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Å–ª—É—á–∞–µ–≤"
                ]
                
                if any(indicator in answer.lower() for indicator in vague_indicators):
                    is_hallucination = True
                
                hallucination_results.append({
                    "question": question["question"],
                    "is_hallucination": is_hallucination,
                    "answer_length": len(answer),
                    "sources_count": len(sources)
                })
        
        total_questions = len(hallucination_results)
        hallucinations = sum(1 for r in hallucination_results if r["is_hallucination"])
        
        hallucination_rate = hallucinations / total_questions if total_questions > 0 else 0
        
        return {
            "hallucination_rate": hallucination_rate,
            "total_questions": total_questions,
            "hallucinations": hallucinations,
            "detailed_results": hallucination_results
        }
    
    def run_all_tests(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ RAG"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞ RAG —Å–∏—Å—Ç–µ–º—ã...")
        
        results = {}
        
        # –¢–µ—Å—Ç Hit@K
        try:
            results["hit_at_k"] = self.test_hit_at_k()
        except Exception as e:
            results["hit_at_k"] = {"error": str(e)}
        
        # –¢–µ—Å—Ç —Ç–æ—á–Ω–æ—Å—Ç–∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            results["citation_accuracy"] = self.test_citation_accuracy()
        except Exception as e:
            results["citation_accuracy"] = {"error": str(e)}
        
        # –¢–µ—Å—Ç —á–∞—Å—Ç–æ—Ç—ã –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
        try:
            results["hallucination_rate"] = self.test_hallucination_rate()
        except Exception as e:
            results["hallucination_rate"] = {"error": str(e)}
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        detailed_results = []
        for question in self.golden_questions:
            try:
                result = self.test_retrieval_quality(question)
                detailed_results.append(result)
            except Exception as e:
                detailed_results.append({
                    "question": question["question"],
                    "status": "error",
                    "error": str(e)
                })
        
        results["detailed_results"] = detailed_results
        
        return results

if __name__ == "__main__":
    tester = GoldenRetrievalTester()
    results = tester.run_all_tests()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–ê RAG:")
    print("=" * 50)
    
    # Hit@K —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if "hit_at_k" in results and "error" not in results["hit_at_k"]:
        print("üéØ Hit@K —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        for metric, value in results["hit_at_k"].items():
            print(f"   {metric}: {value:.3f}")
    
    # –¢–æ—á–Ω–æ—Å—Ç—å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if "citation_accuracy" in results and "error" not in results["citation_accuracy"]:
        ca = results["citation_accuracy"]
        print(f"üìö –¢–æ—á–Ω–æ—Å—Ç—å —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {ca['citation_accuracy']:.3f}")
        print(f"   –í–æ–ø—Ä–æ—Å–æ–≤ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏: {ca['questions_with_citations']}/{ca['total_questions']}")
    
    # –ß–∞—Å—Ç–æ—Ç–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π
    if "hallucination_rate" in results and "error" not in results["hallucination_rate"]:
        hr = results["hallucination_rate"]
        print(f"ü§ñ –ß–∞—Å—Ç–æ—Ç–∞ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π: {hr['hallucination_rate']:.3f}")
        print(f"   –ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–π: {hr['hallucinations']}/{hr['total_questions']}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("golden_retrieval_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
        
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ golden_retrieval_test_results.json")
