#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ò–ò-—é—Ä–∏—Å—Ç
"""

import requests
import time
import statistics
import json
from concurrent.futures import ThreadPoolExecutor, as_completed
from typing import Dict, List, Tuple

class PerformanceTester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        
    def test_single_request(self, endpoint: str, method: str = "GET", 
                          data: Dict = None, headers: Dict = None) -> Tuple[float, int]:
        """–¢–µ—Å—Ç –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        start_time = time.time()
        
        try:
            if method.upper() == "GET":
                response = self.session.get(f"{self.base_url}{endpoint}", headers=headers)
            elif method.upper() == "POST":
                response = self.session.post(
                    f"{self.base_url}{endpoint}", 
                    json=data, 
                    headers=headers
                )
            else:
                raise ValueError(f"Unsupported method: {method}")
                
            end_time = time.time()
            response_time = end_time - start_time
            
            return response_time, response.status_code
            
        except Exception as e:
            end_time = time.time()
            return end_time - start_time, 0
    
    def test_latency(self, endpoint: str, method: str = "GET", 
                    data: Dict = None, headers: Dict = None, 
                    iterations: int = 100) -> Dict:
        """–¢–µ—Å—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏"""
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ {endpoint}...")
        
        response_times = []
        status_codes = []
        
        for i in range(iterations):
            response_time, status_code = self.test_single_request(
                endpoint, method, data, headers
            )
            response_times.append(response_time)
            status_codes.append(status_code)
            
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = {
            "endpoint": endpoint,
            "method": method,
            "iterations": iterations,
            "response_times": {
                "min": min(response_times),
                "max": max(response_times),
                "mean": statistics.mean(response_times),
                "median": statistics.median(response_times),
                "p95": self.percentile(response_times, 95),
                "p99": self.percentile(response_times, 99)
            },
            "status_codes": {
                "200": status_codes.count(200),
                "other": len(status_codes) - status_codes.count(200)
            },
            "success_rate": status_codes.count(200) / len(status_codes) * 100
        }
        
        return stats
    
    def test_concurrent_requests(self, endpoint: str, method: str = "GET",
                               data: Dict = None, headers: Dict = None,
                               concurrent_users: int = 10, 
                               requests_per_user: int = 10) -> Dict:
        """–¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏ {endpoint} —Å {concurrent_users} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...")
        
        def make_requests():
            results = []
            for _ in range(requests_per_user):
                response_time, status_code = self.test_single_request(
                    endpoint, method, data, headers
                )
                results.append((response_time, status_code))
            return results
        
        start_time = time.time()
        
        with ThreadPoolExecutor(max_workers=concurrent_users) as executor:
            futures = [executor.submit(make_requests) for _ in range(concurrent_users)]
            
            all_results = []
            for future in as_completed(futures):
                all_results.extend(future.result())
        
        end_time = time.time()
        total_time = end_time - start_time
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        response_times = [r[0] for r in all_results]
        status_codes = [r[1] for r in all_results]
        
        stats = {
            "endpoint": endpoint,
            "method": method,
            "concurrent_users": concurrent_users,
            "requests_per_user": requests_per_user,
            "total_requests": len(all_results),
            "total_time": total_time,
            "requests_per_second": len(all_results) / total_time,
            "response_times": {
                "min": min(response_times),
                "max": max(response_times),
                "mean": statistics.mean(response_times),
                "median": statistics.median(response_times),
                "p95": self.percentile(response_times, 95),
                "p99": self.percentile(response_times, 99)
            },
            "status_codes": {
                "200": status_codes.count(200),
                "other": len(status_codes) - status_codes.count(200)
            },
            "success_rate": status_codes.count(200) / len(status_codes) * 100
        }
        
        return stats
    
    def test_memory_usage(self) -> Dict:
        """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏...")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª—å—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
        large_message = "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ " * 1000  # ~20KB
        
        response_times = []
        for i in range(50):
            start_time = time.time()
            
            try:
                response = self.session.post(
                    f"{self.base_url}/api/v1/chat/message",
                    json={
                        "message": large_message,
                        "session_id": 1
                    },
                    headers={"Content-Type": "application/json"}
                )
                
                end_time = time.time()
                response_times.append(end_time - start_time)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –ø–∞–º—è—Ç–∏: {e}")
                
        return {
            "test": "memory_usage",
            "large_message_size": len(large_message),
            "iterations": len(response_times),
            "response_times": {
                "min": min(response_times) if response_times else 0,
                "max": max(response_times) if response_times else 0,
                "mean": statistics.mean(response_times) if response_times else 0
            }
        }
    
    def test_database_performance(self) -> Dict:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ë–î
        endpoints = [
            "/api/v1/chat/sessions",
            "/api/v1/auth/me",
            "/api/v1/admin/users"
        ]
        
        results = {}
        for endpoint in endpoints:
            try:
                stats = self.test_latency(endpoint, iterations=20)
                results[endpoint] = stats
            except Exception as e:
                results[endpoint] = {"error": str(e)}
                
        return {
            "test": "database_performance",
            "results": results
        }
    
    def test_ai_model_performance(self) -> Dict:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ AI –º–æ–¥–µ–ª–∏"""
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ AI –º–æ–¥–µ–ª–∏...")
        
        test_messages = [
            "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è?",
            "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏?",
            "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä?",
            "–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å?",
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò–ü?"
        ]
        
        results = []
        for message in test_messages:
            start_time = time.time()
            
            try:
                response = self.session.post(
                    f"{self.base_url}/api/v1/chat/message",
                    json={
                        "message": message,
                        "session_id": 1
                    },
                    headers={"Content-Type": "application/json"}
                )
                
                end_time = time.time()
                response_time = end_time - start_time
                
                if response.status_code == 200:
                    data = response.json()
                    results.append({
                        "message": message,
                        "response_time": response_time,
                        "response_length": len(data.get("message", "")),
                        "status": "success"
                    })
                else:
                    results.append({
                        "message": message,
                        "response_time": response_time,
                        "status": "error",
                        "status_code": response.status_code
                    })
                    
            except Exception as e:
                results.append({
                    "message": message,
                    "status": "error",
                    "error": str(e)
                })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        successful_results = [r for r in results if r["status"] == "success"]
        response_times = [r["response_time"] for r in successful_results]
        
        return {
            "test": "ai_model_performance",
            "total_requests": len(results),
            "successful_requests": len(successful_results),
            "success_rate": len(successful_results) / len(results) * 100,
            "response_times": {
                "min": min(response_times) if response_times else 0,
                "max": max(response_times) if response_times else 0,
                "mean": statistics.mean(response_times) if response_times else 0,
                "median": statistics.median(response_times) if response_times else 0
            },
            "results": results
        }
    
    def percentile(self, data: List[float], percentile: int) -> float:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—è"""
        if not data:
            return 0
        sorted_data = sorted(data)
        index = int(len(sorted_data) * percentile / 100)
        return sorted_data[min(index, len(sorted_data) - 1)]
    
    def run_all_tests(self) -> Dict:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        results = {}
        
        # –¢–µ—Å—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
        endpoints = [
            ("/api/v1/chat/sessions", "GET"),
            ("/api/v1/auth/me", "GET"),
            ("/health", "GET"),
            ("/ready", "GET")
        ]
        
        for endpoint, method in endpoints:
            try:
                results[f"latency_{endpoint.replace('/', '_')}"] = self.test_latency(
                    endpoint, method, iterations=50
                )
            except Exception as e:
                results[f"latency_{endpoint.replace('/', '_')}"] = {"error": str(e)}
        
        # –¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        try:
            results["concurrent_chat"] = self.test_concurrent_requests(
                "/api/v1/chat/message",
                "POST",
                data={"message": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "session_id": 1},
                concurrent_users=5,
                requests_per_user=10
            )
        except Exception as e:
            results["concurrent_chat"] = {"error": str(e)}
        
        # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
        try:
            results["memory_usage"] = self.test_memory_usage()
        except Exception as e:
            results["memory_usage"] = {"error": str(e)}
        
        # –¢–µ—Å—Ç –ë–î
        try:
            results["database_performance"] = self.test_database_performance()
        except Exception as e:
            results["database_performance"] = {"error": str(e)}
        
        # –¢–µ—Å—Ç AI –º–æ–¥–µ–ª–∏
        try:
            results["ai_model_performance"] = self.test_ai_model_performance()
        except Exception as e:
            results["ai_model_performance"] = {"error": str(e)}
        
        return results

if __name__ == "__main__":
    tester = PerformanceTester()
    results = tester.run_all_tests()
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:")
    print("=" * 60)
    
    for test_name, result in results.items():
        if "error" in result:
            print(f"‚ùå {test_name}: ERROR - {result['error']}")
        else:
            print(f"‚úÖ {test_name}: –£—Å–ø–µ—à–Ω–æ")
            
            # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if "response_times" in result:
                rt = result["response_times"]
                print(f"   üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {rt.get('mean', 0):.3f}s")
                print(f"   üìà P95: {rt.get('p95', 0):.3f}s")
                print(f"   üìà P99: {rt.get('p99', 0):.3f}s")
            
            if "requests_per_second" in result:
                print(f"   üöÄ RPS: {result['requests_per_second']:.2f}")
            
            if "success_rate" in result:
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['success_rate']:.1f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    with open("performance_test_results.json", "w", encoding="utf-8") as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
        
    print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ performance_test_results.json")
