#!/bin/bash

# –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ê–î–í–ê–ö–û–î
# –ê–≤—Ç–æ—Ä: –ê–î–í–ê–ö–û–î AI Assistant
# –í–µ—Ä—Å–∏—è: 1.0

set -euo pipefail

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SCRIPT_DIR="/scripts"
BACKUP_DIR="/backups"
LOG_FILE="${BACKUP_DIR}/backup.log"
MAX_LOG_SIZE="10M"

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    local message="[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo -e "${BLUE}${message}${NC}"
    echo "${message}" >> "${LOG_FILE}"
}

error() {
    local message="[ERROR] $1"
    echo -e "${RED}${message}${NC}" >&2
    echo "${message}" >> "${LOG_FILE}"
}

success() {
    local message="[SUCCESS] $1"
    echo -e "${GREEN}${message}${NC}"
    echo "${message}" >> "${LOG_FILE}"
}

warning() {
    local message="[WARNING] $1"
    echo -e "${YELLOW}${message}${NC}"
    echo "${message}" >> "${LOG_FILE}"
}

# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
cleanup_logs() {
    if [ -f "${LOG_FILE}" ]; then
        local log_size=$(stat -c%s "${LOG_FILE}" 2>/dev/null || echo "0")
        local max_size_bytes=$(echo "${MAX_LOG_SIZE}" | sed 's/M/*1024*1024/' | bc 2>/dev/null || echo "10485760")
        
        if [ "${log_size}" -gt "${max_size_bytes}" ]; then
            log "üßπ –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ (—Ä–∞–∑–º–µ—Ä: $(numfmt --to=iec "${log_size}"))"
            tail -n 1000 "${LOG_FILE}" > "${LOG_FILE}.tmp" && mv "${LOG_FILE}.tmp" "${LOG_FILE}"
            success "‚úÖ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
        fi
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
check_services() {
    log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    local services_ok=true
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    if docker exec advakod_postgres pg_isready -U advakod -d advakod_db >/dev/null 2>&1; then
        success "‚úÖ PostgreSQL –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "‚ùå PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        services_ok=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant
    if curl -s http://localhost:6333/health >/dev/null 2>&1; then
        success "‚úÖ Qdrant –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        error "‚ùå Qdrant –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        services_ok=false
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    if docker exec advakod_redis redis-cli ping >/dev/null 2>&1; then
        success "‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω"
    else
        warning "‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)"
    fi
    
    if [ "${services_ok}" = false ]; then
        error "‚ùå –ù–µ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±—ç–∫–∞–ø."
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ PostgreSQL
backup_postgres() {
    log "üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ PostgreSQL..."
    
    if docker run --rm \
        --network advakod_advakod_network \
        -v "${BACKUP_DIR}:/backups" \
        -e POSTGRES_HOST=postgres \
        -e POSTGRES_PORT=5432 \
        -e POSTGRES_DB=advakod_db \
        -e POSTGRES_USER=advakod \
        -e POSTGRES_PASSWORD="${POSTGRES_PASSWORD}" \
        -e MAX_BACKUPS=30 \
        postgres:15-alpine \
        bash -c "
            apk add --no-cache curl jq bc
            chmod +x /scripts/backup_postgres.sh
            /scripts/backup_postgres.sh
        "; then
        success "‚úÖ PostgreSQL –±—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω"
        return 0
    else
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ PostgreSQL"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ Qdrant
backup_qdrant() {
    log "üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ Qdrant..."
    
    if docker run --rm \
        --network advakod_advakod_network \
        -v "${BACKUP_DIR}:/backups" \
        -e QDRANT_HOST=qdrant \
        -e QDRANT_PORT=6333 \
        -e MAX_BACKUPS=30 \
        alpine:latest \
        sh -c "
            apk add --no-cache curl jq bc bash
            chmod +x /scripts/backup_qdrant.sh
            /scripts/backup_qdrant.sh
        "; then
        success "‚úÖ Qdrant –±—ç–∫–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω"
        return 0
    else
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ Qdrant"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
backup_config() {
    log "üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    local timestamp=$(date '+%Y%m%d_%H%M%S')
    local config_backup="${BACKUP_DIR}/advakod_config_${timestamp}.tar.gz"
    
    if tar -czf "${config_backup}" \
        -C /root/advakod \
        docker-compose.prod.yml \
        nginx.conf \
        env.production \
        scripts/ \
        2>/dev/null; then
        
        success "‚úÖ –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: $(basename "${config_backup}")"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        local file_size=$(du -h "${config_backup}" | cut -f1)
        log "üìè –†–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${file_size}"
        
        return 0
    else
        error "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
create_summary_report() {
    local report_file="${BACKUP_DIR}/backup_summary_$(date '+%Y%m%d_%H%M%S').txt"
    
    log "üìä –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞..."
    
    {
        echo "=========================================="
        echo "–°–í–û–î–ù–´–ô –û–¢–ß–ï–¢ –û –†–ï–ó–ï–†–í–ù–û–ú –ö–û–ü–ò–†–û–í–ê–ù–ò–ò"
        echo "=========================================="
        echo "–î–∞—Ç–∞: $(date '+%Y-%m-%d %H:%M:%S')"
        echo "–°–∏—Å—Ç–µ–º–∞: –ê–î–í–ê–ö–û–î - –ò–ò-–Æ—Ä–∏—Å—Ç –¥–ª—è –†–§"
        echo ""
        echo "=== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==="
        echo "–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–æ–≤: $(du -sh "${BACKUP_DIR}" | cut -f1)"
        echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: $(find "${BACKUP_DIR}" -type f | wc -l)"
        echo ""
        echo "=== POSTGRES –ë–≠–ö–ê–ü–´ ==="
        echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: $(find "${BACKUP_DIR}" -name "advakod_postgres_*.sql.gz" | wc -l)"
        echo "–†–∞–∑–º–µ—Ä: $(du -sh "${BACKUP_DIR}"/advakod_postgres_*.sql.gz 2>/dev/null | cut -f1 || echo "0")"
        echo ""
        echo "=== QDRANT –ë–≠–ö–ê–ü–´ ==="
        echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: $(find "${BACKUP_DIR}" -name "advakod_qdrant_*.json.gz" | wc -l)"
        echo "–†–∞–∑–º–µ—Ä: $(du -sh "${BACKUP_DIR}"/advakod_qdrant_*.json.gz 2>/dev/null | cut -f1 || echo "0")"
        echo ""
        echo "=== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==="
        echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: $(find "${BACKUP_DIR}" -name "advakod_config_*.tar.gz" | wc -l)"
        echo "–†–∞–∑–º–µ—Ä: $(du -sh "${BACKUP_DIR}"/advakod_config_*.tar.gz 2>/dev/null | cut -f1 || echo "0")"
        echo ""
        echo "=== –ü–û–°–õ–ï–î–ù–ò–ï –ë–≠–ö–ê–ü–´ ==="
        find "${BACKUP_DIR}" -type f -name "*.gz" -printf '%T@ %p %s\n' | \
        sort -n | tail -10 | while read -r timestamp file size; do
            echo "$(date -d "@${timestamp}" '+%Y-%m-%d %H:%M:%S') - $(basename "${file}") - $(numfmt --to=iec "${size}")"
        done
        echo ""
        echo "=== –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ ==="
        echo "–î–∏—Å–∫: $(df -h "${BACKUP_DIR}" | tail -1 | awk '{print $4 " —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ " $2}')"
        echo "–ü–∞–º—è—Ç—å: $(free -h | grep Mem | awk '{print $7 " —Å–≤–æ–±–æ–¥–Ω–æ –∏–∑ " $2}')"
        echo ""
        echo "=========================================="
    } > "${report_file}"
    
    success "‚úÖ –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: $(basename "${report_file}")"
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
send_notification() {
    local status="$1"
    local message="$2"
    
    log "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${status} - ${message}"
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É email, Slack, Telegram –∏ —Ç.–¥.
    # –ù–∞–ø—Ä–∏–º–µ—Ä:
    # curl -X POST "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK" \
    #      -H "Content-Type: application/json" \
    #      -d "{\"text\":\"–ê–î–í–ê–ö–û–î Backup: ${status} - ${message}\"}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    local start_time=$(date +%s)
    
    log "üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ê–î–í–ê–ö–û–î"
    log "====================================================="
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
    cleanup_logs
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
    if ! check_services; then
        send_notification "FAILED" "–°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        exit 1
    fi
    
    local backup_success=true
    local failed_services=""
    
    # –ë—ç–∫–∞–ø PostgreSQL
    if ! backup_postgres; then
        backup_success=false
        failed_services="${failed_services} PostgreSQL"
    fi
    
    # –ë—ç–∫–∞–ø Qdrant
    if ! backup_qdrant; then
        backup_success=false
        failed_services="${failed_services} Qdrant"
    fi
    
    # –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if ! backup_config; then
        backup_success=false
        failed_services="${failed_services} Config"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    create_summary_report
    
    # –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    local duration_formatted=$(printf '%02d:%02d:%02d' $((duration/3600)) $((duration%3600/60)) $((duration%60)))
    
    if [ "${backup_success}" = true ]; then
        success "üéâ –í—Å–µ –±—ç–∫–∞–ø—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –∑–∞ ${duration_formatted}"
        send_notification "SUCCESS" "–í—Å–µ –±—ç–∫–∞–ø—ã —Å–æ–∑–¥–∞–Ω—ã –∑–∞ ${duration_formatted}"
    else
        error "‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–æ–≤:${failed_services}"
        send_notification "PARTIAL" "–û—à–∏–±–∫–∏ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö:${failed_services}"
        exit 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'error "‚ùå –°–∫—Ä–∏–ø—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"; exit 130' INT TERM

# –ó–∞–ø—É—Å–∫
main "$@"
