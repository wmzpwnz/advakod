#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–¥–µ–∫—Å–æ–≤ —Å pravo.gov.ru
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Python
"""

import os
import sys
import requests
import time
from urllib.parse import urljoin, urlparse
from pathlib import Path
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('codex_downloader.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SimpleCodexDownloader:
    def __init__(self, output_dir="downloaded_codexes"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # –°–ø–∏—Å–æ–∫ –∫–æ–¥–µ–∫—Å–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        self.codexes = {
            "–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π –∫–æ–¥–µ–∫—Å –†–§": "http://pravo.gov.ru/proxy/ips/?docbody=&nd=102120000&rdk=&backlink=1&page=1&rdnd=102120000&link=0001201410140002",
            "–£–≥–æ–ª–æ–≤–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§": "http://pravo.gov.ru/proxy/ips/?docbody=&nd=102120000&rdk=&backlink=1&page=1&rdnd=102120000&link=0001202203030006",
            "–¢—Ä—É–¥–æ–≤–æ–π –∫–æ–¥–µ–∫—Å –†–§": "http://pravo.gov.ru/proxy/ips/?docbody=&nd=102120000&rdk=&backlink=1&page=1&rdnd=102120000&link=0001201412140001",
            "–°–µ–º–µ–π–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§": "http://pravo.gov.ru/proxy/ips/?docbody=&nd=102120000&rdk=&backlink=1&page=1&rdnd=102120000&link=0001201412140002",
            "–ñ–∏–ª–∏—â–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§": "http://pravo.gov.ru/proxy/ips/?docbody=&nd=102120000&rdk=&backlink=1&page=1&rdnd=102120000&link=0001201412140003",
            "–ù–∞–ª–æ–≥–æ–≤—ã–π –∫–æ–¥–µ–∫—Å –†–§": "http://pravo.gov.ru/proxy/ips/?docbody=&nd=102120000&rdk=&backlink=1&page=1&rdnd=102120000&link=0001201412140004",
            "–ë—é–¥–∂–µ—Ç–Ω—ã–π –∫–æ–¥–µ–∫—Å –†–§": "http://pravo.gov.ru/proxy/ips/?docbody=&nd=102120000&rdk=&backlink=1&page=1&rdnd=102120000&link=0001201412140005",
            "–ö–æ–¥–µ–∫—Å –æ–± –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –†–§": "http://pravo.gov.ru/proxy/ips/?docbody=&nd=102120000&rdk=&backlink=1&page=1&rdnd=102120000&link=0001201412140006"
        }
        
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })

    def download_pdf(self, url, filename):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç PDF —Ñ–∞–π–ª"""
        try:
            logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename}")
            response = self.session.get(url, timeout=30)
            response.raise_for_status()
            
            filepath = self.output_dir / filename
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            logger.info(f"‚úÖ –°–∫–∞—á–∞–Ω: {filename} ({len(response.content)} –±–∞–π—Ç)")
            return True
            
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ {filename}: {e}")
            return False

    def download_codex(self, name, url):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∫–æ–¥–µ–∫—Å –ø–æ URL"""
        logger.info(f"üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–µ–∫—Å–∞: {name}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ URL –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        parsed_url = urlparse(url)
        link_param = parsed_url.query.split('link=')[-1] if 'link=' in parsed_url.query else 'unknown'
        filename = f"{link_param}.pdf"
        
        return self.download_pdf(url, filename)

    def download_all(self):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–¥–µ–∫—Å—ã"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∫–æ–¥–µ–∫—Å–æ–≤")
        logger.info(f"üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.output_dir}")
        
        success_count = 0
        total_count = len(self.codexes)
        
        for name, url in self.codexes.items():
            if self.download_codex(name, url):
                success_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            time.sleep(2)
        
        logger.info(f"‚úÖ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/{total_count} –∫–æ–¥–µ–∫—Å–æ–≤")
        return success_count, total_count

    def get_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∫–∞—á–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        files = list(self.output_dir.glob("*.pdf"))
        return {
            "total_files": len(files),
            "files": [f.name for f in files],
            "total_size": sum(f.stat().st_size for f in files)
        }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1:
        output_dir = sys.argv[1]
    else:
        output_dir = "downloaded_codexes"
    
    downloader = SimpleCodexDownloader(output_dir)
    
    try:
        success, total = downloader.download_all()
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
        status = downloader.get_status()
        print(f"\nüìä –°—Ç–∞—Ç—É—Å:")
        print(f"–°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {status['total_files']}")
        print(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {status['total_size']:,} –±–∞–π—Ç")
        
        if status['files']:
            print(f"–§–∞–π–ª—ã: {', '.join(status['files'])}")
        
        return 0 if success == total else 1
        
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())



