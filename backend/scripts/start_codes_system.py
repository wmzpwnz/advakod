#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–¥–µ–∫—Å–æ–≤
"""

import sys
import os
import time
import signal
import logging
from pathlib import Path

sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from app.services.codes_downloader import CodesDownloader
from app.services.codes_rag_integration import CodesRAGIntegration
from app.services.codes_monitor import CodesMonitor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('codes_system.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class CodesSystemManager:
    def __init__(self):
        self.downloader = CodesDownloader()
        self.rag_integration = CodesRAGIntegration()
        self.monitor = CodesMonitor()
        self.running = True
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False

    def initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–¥–µ–∫—Å–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        output_dir = Path(self.downloader.output_dir)
        output_dir.mkdir(exist_ok=True)
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def run_download_cycle(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        logger.info("üì• –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
        
        try:
            success_count, total_count = self.downloader.download_all_codexes()
            logger.info(f"‚úÖ –¶–∏–∫–ª —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω: {success_count}/{total_count}")
            return success_count > 0
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
            return False

    def run_integration_cycle(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger.info("üîó –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        try:
            result = self.rag_integration.integrate_all_codexes()
            if result['success']:
                logger.info(f"‚úÖ –¶–∏–∫–ª –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω: {result['processed_files']} —Ñ–∞–π–ª–æ–≤")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {result['error']}")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            return False

    def run_monitoring_cycle(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üìä –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        try:
            status = self.monitor.get_system_status()
            logger.info(f"üìà –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status}")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False

    def run_system(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∫–æ–¥–µ–∫—Å–æ–≤")
        
        self.initialize_system()
        
        cycle_count = 0
        
        while self.running:
            cycle_count += 1
            logger.info(f"üîÑ –¶–∏–∫–ª #{cycle_count}")
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
            download_success = self.run_download_cycle()
            
            # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã)
            if download_success:
                integration_success = self.run_integration_cycle()
            else:
                logger.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ - –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
                integration_success = True
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            self.run_monitoring_cycle()
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            if self.running:
                logger.info("‚è≥ –ü–∞—É–∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞...")
                for i in range(1800):  # 30 –º–∏–Ω—É—Ç
                    if not self.running:
                        break
                    time.sleep(1)
        
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –∫–æ–¥–µ–∫—Å–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "background":
        # –§–æ–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º
        manager = CodesSystemManager()
        manager.run_system()
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –∫–æ–¥–µ–∫—Å–æ–≤ –ê–î–í–ê–ö–û–î")
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –°–∫–∞—á–∞—Ç—å –∫–æ–¥–µ–∫—Å—ã")
        print("2. –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å RAG")
        print("3. –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        print("5. –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        
        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
        
        manager = CodesSystemManager()
        manager.initialize_system()
        
        if choice == "1":
            manager.run_download_cycle()
        elif choice == "2":
            manager.run_integration_cycle()
        elif choice == "3":
            manager.run_download_cycle()
            manager.run_integration_cycle()
        elif choice == "4":
            manager.run_system()
        elif choice == "5":
            manager.run_monitoring_cycle()
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    main()



