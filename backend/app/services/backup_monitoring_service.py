"""
–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import logging
import asyncio
import os
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
from sqlalchemy.orm import Session
from sqlalchemy import func

from ..core.database import get_db, SessionLocal
try:
    from ..models.backup import BackupRecord, BackupSchedule, BackupIntegrityCheck, RestoreRecord
    from ..models.backup import BackupStatus, BackupType
    BACKUP_MODELS_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è Backup models not available - backup monitoring will be limited")
    BACKUP_MODELS_AVAILABLE = False

try:
    from ..services.notification_service import notification_service
    NOTIFICATION_SERVICE_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è Notification service not available")
    NOTIFICATION_SERVICE_AVAILABLE = False

try:
    from ..services.backup_service import backup_service
    BACKUP_SERVICE_AVAILABLE = True
except ImportError:
    logger.warning("‚ö†Ô∏è Backup service not available")
    BACKUP_SERVICE_AVAILABLE = False

logger = logging.getLogger(__name__)


class BackupMonitoringService:
    """–°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.monitoring_interval = 300  # 5 –º–∏–Ω—É—Ç
        self.alert_thresholds = {
            'max_backup_age_hours': 24,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            'max_failed_backups': 3,     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø–æ–¥—Ä—è–¥
            'min_success_rate': 0.8,     # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            'max_backup_duration_hours': 2,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            'min_integrity_check_age_days': 7,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        }
        self.is_monitoring = False
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.is_monitoring:
            return
        
        self.is_monitoring = True
        logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        while self.is_monitoring:
            try:
                await self._perform_monitoring_check()
                await asyncio.sleep(self.monitoring_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                await asyncio.sleep(60)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.is_monitoring = False
        logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    async def _perform_monitoring_check(self):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            metrics = await self.get_system_metrics()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
            alerts = await self._check_alert_conditions(metrics)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
            for alert in alerts:
                await self._send_alert(alert)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
            if alerts:
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(alerts)} –ø—Ä–æ–±–ª–µ–º –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                logger.debug("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    async def get_system_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not BACKUP_MODELS_AVAILABLE:
            return {
                "status": "unavailable",
                "error": "Backup models not available",
                "timestamp": datetime.utcnow().isoformat()
            }
        
        try:
            with SessionLocal() as db:
                now = datetime.utcnow()
                
                # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                total_backups = db.query(BackupRecord).count()
                successful_backups = db.query(BackupRecord).filter(BackupRecord.success == True).count()
                failed_backups = db.query(BackupRecord).filter(BackupRecord.success == False).count()
            
            # –ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
            last_successful_backup = db.query(BackupRecord).filter(
                BackupRecord.success == True
            ).order_by(BackupRecord.completed_at.desc()).first()
            
            # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            yesterday = now - timedelta(days=1)
            recent_backups = db.query(BackupRecord).filter(
                BackupRecord.created_at >= yesterday
            ).all()
            
            recent_successful = len([b for b in recent_backups if b.success])
            recent_failed = len([b for b in recent_backups if not b.success])
            
            # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            active_schedules = db.query(BackupSchedule).filter(
                BackupSchedule.enabled == True
            ).count()
            
            # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            overdue_schedules = db.query(BackupSchedule).filter(
                BackupSchedule.enabled == True,
                BackupSchedule.next_run_at < now
            ).count()
            
            # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            avg_duration = db.query(func.avg(BackupRecord.duration_seconds)).filter(
                BackupRecord.success == True,
                BackupRecord.duration_seconds.isnot(None),
                BackupRecord.created_at >= now - timedelta(days=7)
            ).scalar()
            
            # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            total_size = db.query(func.sum(BackupRecord.total_size)).filter(
                BackupRecord.success == True
            ).scalar() or 0
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            last_integrity_check = db.query(BackupIntegrityCheck).order_by(
                BackupIntegrityCheck.checked_at.desc()
            ).first()
            
            # –ù–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
            failed_integrity_checks = db.query(BackupIntegrityCheck).filter(
                BackupIntegrityCheck.passed == False,
                BackupIntegrityCheck.checked_at >= now - timedelta(days=7)
            ).count()
            
            # –û–ø–µ—Ä–∞—Ü–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            total_restores = db.query(RestoreRecord).count()
            successful_restores = db.query(RestoreRecord).filter(
                RestoreRecord.success == True
            ).count()
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –ø–æ–¥—Ä—è–¥
            consecutive_failures = 0
            recent_backups_ordered = db.query(BackupRecord).order_by(
                BackupRecord.created_at.desc()
            ).limit(10).all()
            
            for backup in recent_backups_ordered:
                if not backup.success:
                    consecutive_failures += 1
                else:
                    break
            
            return {
                'timestamp': now.isoformat(),
                'total_backups': total_backups,
                'successful_backups': successful_backups,
                'failed_backups': failed_backups,
                'success_rate': successful_backups / total_backups if total_backups > 0 else 0,
                'last_successful_backup': last_successful_backup.completed_at if last_successful_backup else None,
                'last_successful_backup_age_hours': (
                    (now - last_successful_backup.completed_at).total_seconds() / 3600
                    if last_successful_backup and last_successful_backup.completed_at else None
                ),
                'recent_backups_24h': len(recent_backups),
                'recent_successful_24h': recent_successful,
                'recent_failed_24h': recent_failed,
                'active_schedules': active_schedules,
                'overdue_schedules': overdue_schedules,
                'average_duration_seconds': float(avg_duration) if avg_duration else None,
                'total_size_bytes': total_size,
                'last_integrity_check': last_integrity_check.checked_at if last_integrity_check else None,
                'last_integrity_check_age_days': (
                    (now - last_integrity_check.checked_at).days
                    if last_integrity_check else None
                ),
                'failed_integrity_checks_7d': failed_integrity_checks,
                'total_restores': total_restores,
                'successful_restores': successful_restores,
                'consecutive_failures': consecutive_failures,
                'storage_usage': await self._get_storage_usage(),
                'system_health': await self._assess_system_health()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Error getting backup system metrics: {e}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.utcnow().isoformat(),
                "database_available": False
            }
    
    async def _check_alert_conditions(self, metrics: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
        if metrics['last_successful_backup_age_hours']:
            if metrics['last_successful_backup_age_hours'] > self.alert_thresholds['max_backup_age_hours']:
                alerts.append({
                    'type': 'backup_age',
                    'severity': 'high',
                    'title': '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è',
                    'message': f"–ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ {metrics['last_successful_backup_age_hours']:.1f} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥",
                    'threshold': self.alert_thresholds['max_backup_age_hours'],
                    'current_value': metrics['last_successful_backup_age_hours']
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –ø–æ–¥—Ä—è–¥
        if metrics['consecutive_failures'] >= self.alert_thresholds['max_failed_backups']:
            alerts.append({
                'type': 'consecutive_failures',
                'severity': 'high',
                'title': '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–∞—á–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è',
                'message': f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ {metrics['consecutive_failures']} —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π",
                'threshold': self.alert_thresholds['max_failed_backups'],
                'current_value': metrics['consecutive_failures']
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        if metrics['success_rate'] < self.alert_thresholds['min_success_rate']:
            alerts.append({
                'type': 'low_success_rate',
                'severity': 'medium',
                'title': '–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π',
                'message': f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {metrics['success_rate']*100:.1f}%",
                'threshold': self.alert_thresholds['min_success_rate'] * 100,
                'current_value': metrics['success_rate'] * 100
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        if metrics['average_duration_seconds']:
            duration_hours = metrics['average_duration_seconds'] / 3600
            if duration_hours > self.alert_thresholds['max_backup_duration_hours']:
                alerts.append({
                    'type': 'long_backup_duration',
                    'severity': 'medium',
                    'title': '–î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è',
                    'message': f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {duration_hours:.1f} —á–∞—Å–æ–≤",
                    'threshold': self.alert_thresholds['max_backup_duration_hours'],
                    'current_value': duration_hours
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        if metrics['overdue_schedules'] > 0:
            alerts.append({
                'type': 'overdue_schedules',
                'severity': 'medium',
                'title': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è',
                'message': f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {metrics['overdue_schedules']}",
                'threshold': 0,
                'current_value': metrics['overdue_schedules']
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        if metrics['last_integrity_check_age_days']:
            if metrics['last_integrity_check_age_days'] > self.alert_thresholds['min_integrity_check_age_days']:
                alerts.append({
                    'type': 'old_integrity_check',
                    'severity': 'low',
                    'title': '–£—Å—Ç–∞—Ä–µ–≤—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏',
                    'message': f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ {metrics['last_integrity_check_age_days']} –¥–Ω–µ–π –Ω–∞–∑–∞–¥",
                    'threshold': self.alert_thresholds['min_integrity_check_age_days'],
                    'current_value': metrics['last_integrity_check_age_days']
                })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        if metrics['failed_integrity_checks_7d'] > 0:
            alerts.append({
                'type': 'failed_integrity_checks',
                'severity': 'high',
                'title': '–ù–µ—É–¥–∞—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏',
                'message': f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {metrics['failed_integrity_checks_7d']}",
                'threshold': 0,
                'current_value': metrics['failed_integrity_checks_7d']
            })
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_usage = metrics.get('storage_usage', {})
        if storage_usage.get('usage_percent', 0) > 90:
            alerts.append({
                'type': 'high_storage_usage',
                'severity': 'high',
                'title': '–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞',
                'message': f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_usage['usage_percent']:.1f}%",
                'threshold': 90,
                'current_value': storage_usage['usage_percent']
            })
        
        return alerts
    
    async def _send_alert(self, alert: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            if not NOTIFICATION_SERVICE_AVAILABLE:
                logger.warning(f"üö® –ê–ª–µ—Ä—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (notification service unavailable): {alert['title']} - {alert['message']}")
                return
            
            severity_colors = {
                'low': 'info',
                'medium': 'warning', 
                'high': 'error'
            }
            
            await notification_service.create_system_notification(
                title=f"üö® {alert['title']}",
                message=alert['message'],
                notification_type=severity_colors.get(alert['severity'], 'warning'),
                metadata={
                    'alert_type': alert['type'],
                    'severity': alert['severity'],
                    'threshold': alert['threshold'],
                    'current_value': alert['current_value'],
                    'component': 'backup_system'
                }
            )
            
            logger.warning(f"üö® –ê–ª–µ—Ä—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {alert['title']} - {alert['message']}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")
    
    async def _get_storage_usage(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        try:
            import shutil
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            if not BACKUP_SERVICE_AVAILABLE:
                backup_dir = "/tmp/backups"  # Fallback directory
            else:
                backup_dir = backup_service.backup_dir
            
            if os.path.exists(backup_dir):
                total, used, free = shutil.disk_usage(backup_dir)
                
                # –†–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
                backup_dir_size = 0
                for dirpath, dirnames, filenames in os.walk(backup_dir):
                    for filename in filenames:
                        filepath = os.path.join(dirpath, filename)
                        try:
                            backup_dir_size += os.path.getsize(filepath)
                        except (OSError, IOError):
                            continue
                
                return {
                    'total_bytes': total,
                    'used_bytes': used,
                    'free_bytes': free,
                    'backup_dir_size_bytes': backup_dir_size,
                    'usage_percent': (used / total) * 100,
                    'backup_usage_percent': (backup_dir_size / total) * 100 if total > 0 else 0
                }
            else:
                return {
                    'total_bytes': 0,
                    'used_bytes': 0,
                    'free_bytes': 0,
                    'backup_dir_size_bytes': 0,
                    'usage_percent': 0,
                    'backup_usage_percent': 0
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {e}")
            return {
                'total_bytes': 0,
                'used_bytes': 0,
                'free_bytes': 0,
                'backup_dir_size_bytes': 0,
                'usage_percent': 0,
                'backup_usage_percent': 0
            }
    
    async def _assess_system_health(self) -> Dict[str, Any]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
            if BACKUP_SERVICE_AVAILABLE:
                backup_dir_accessible = os.path.exists(backup_service.backup_dir) and os.access(backup_service.backup_dir, os.W_OK)
                backup_dir = backup_service.backup_dir
            else:
                backup_dir_accessible = False
                backup_dir = "unavailable"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
            active_schedules_count = 0
            if BACKUP_MODELS_AVAILABLE:
                try:
                    with SessionLocal() as db:
                        active_schedules_count = db.query(BackupSchedule).filter(
                            BackupSchedule.enabled == True
                        ).count()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Could not check backup schedules: {e}")
                    active_schedules_count = 0
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            issues = []
            if not backup_dir_accessible:
                issues.append("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
            if active_schedules_count == 0:
                issues.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            # –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if len(issues) == 0:
                health_status = "healthy"
                health_score = 100
            elif len(issues) == 1:
                health_status = "warning"
                health_score = 70
            else:
                health_status = "critical"
                health_score = 30
            
            return {
                'status': health_status,
                'score': health_score,
                'issues': issues,
                'backup_dir_accessible': backup_dir_accessible,
                'active_schedules_count': active_schedules_count,
                'last_assessment': datetime.utcnow().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
            return {
                'status': 'unknown',
                'score': 0,
                'issues': [f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {str(e)}"],
                'backup_dir_accessible': False,
                'active_schedules_count': 0,
                'last_assessment': datetime.utcnow().isoformat()
            }
    
    async def generate_health_report(self) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            metrics = await self.get_system_metrics()
            alerts = await self._check_alert_conditions(metrics)
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            recommendations = []
            
            if metrics['success_rate'] < 0.9:
                recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            
            if not metrics['last_integrity_check'] or metrics['last_integrity_check_age_days'] > 7:
                recommendations.append("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π")
            
            if metrics['active_schedules'] == 0:
                recommendations.append("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
            
            if metrics.get('storage_usage', {}).get('usage_percent', 0) > 80:
                recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞")
            
            return {
                'generated_at': datetime.utcnow().isoformat(),
                'metrics': metrics,
                'alerts': alerts,
                'recommendations': recommendations,
                'summary': {
                    'total_issues': len(alerts),
                    'critical_issues': len([a for a in alerts if a['severity'] == 'high']),
                    'warning_issues': len([a for a in alerts if a['severity'] == 'medium']),
                    'info_issues': len([a for a in alerts if a['severity'] == 'low']),
                    'overall_health': metrics['system_health']['status'],
                    'health_score': metrics['system_health']['score']
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {e}")
            return {
                'generated_at': datetime.utcnow().isoformat(),
                'error': str(e),
                'metrics': {},
                'alerts': [],
                'recommendations': [],
                'summary': {
                    'total_issues': 0,
                    'critical_issues': 0,
                    'warning_issues': 0,
                    'info_issues': 0,
                    'overall_health': 'unknown',
                    'health_score': 0
                }
            }


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
backup_monitoring_service = BackupMonitoringService()