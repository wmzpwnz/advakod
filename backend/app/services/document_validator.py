"""
Сервис для валидации документов
Проверяет, что загружаемые документы соответствуют юридической тематике
"""

import logging
import re
from typing import Dict, Any, List, Tuple
from enum import Enum

logger = logging.getLogger(__name__)

class DocumentType(str, Enum):
    """Типы документов"""
    LEGAL = "legal"  # Юридический документ
    REGULATORY = "regulatory"  # Нормативный акт
    LEGISLATIVE = "legislative"  # Законодательный акт
    JUDICIAL = "judicial"  # Судебный документ
    ADMINISTRATIVE = "administrative"  # Административный документ
    CONTRACT = "contract"  # Договор
    INVALID = "invalid"  # Неподходящий документ

class DocumentValidator:
    """Валидатор документов для проверки юридической релевантности"""
    
    def __init__(self):
        # Ключевые слова для юридических документов
        self.legal_keywords = {
            # Основные правовые термины
            'статья', 'статьи', 'статьей', 'статьею',
            'пункт', 'пункты', 'пунктом', 'пункте',
            'часть', 'части', 'частью', 'частию',
            'раздел', 'разделы', 'разделом', 'разделе',
            'глава', 'главы', 'главой', 'главе',
            'подпункт', 'подпункты', 'подпунктом', 'подпункте',
            
            # Правовые акты
            'закон', 'законы', 'законом', 'законе',
            'кодекс', 'кодексы', 'кодексом', 'кодексе',
            'конституция', 'конституции', 'конституцией', 'конституции',
            'указ', 'указы', 'указом', 'указом',
            'постановление', 'постановления', 'постановлением', 'постановлении',
            'приказ', 'приказы', 'приказом', 'приказе',
            'распоряжение', 'распоряжения', 'распоряжением', 'распоряжении',
            'инструкция', 'инструкции', 'инструкцией', 'инструкции',
            'положение', 'положения', 'положением', 'положении',
            'регламент', 'регламенты', 'регламентом', 'регламенте',
            
            # Юридические понятия
            'право', 'права', 'правом', 'праве',
            'обязанность', 'обязанности', 'обязанностью', 'обязанности',
            'ответственность', 'ответственности', 'ответственностью', 'ответственности',
            'нарушение', 'нарушения', 'нарушением', 'нарушении',
            'преступление', 'преступления', 'преступлением', 'преступлении',
            'правонарушение', 'правонарушения', 'правонарушением', 'правонарушении',
            'санкция', 'санкции', 'санкцией', 'санкции',
            'штраф', 'штрафы', 'штрафом', 'штрафе',
            'наказание', 'наказания', 'наказанием', 'наказании',
            
            # Субъекты права
            'гражданин', 'граждане', 'гражданином', 'гражданине',
            'физическое лицо', 'физические лица', 'физическим лицом', 'физическом лице',
            'юридическое лицо', 'юридические лица', 'юридическим лицом', 'юридическом лице',
            'организация', 'организации', 'организацией', 'организации',
            'предприятие', 'предприятия', 'предприятием', 'предприятии',
            'учреждение', 'учреждения', 'учреждением', 'учреждении',
            'государство', 'государства', 'государством', 'государстве',
            'орган', 'органы', 'органом', 'органе',
            'власть', 'власти', 'властью', 'власти',
            
            # Процессуальные термины
            'суд', 'суды', 'судом', 'суде',
            'судья', 'судьи', 'судьей', 'судье',
            'прокурор', 'прокуроры', 'прокурором', 'прокуроре',
            'адвокат', 'адвокаты', 'адвокатом', 'адвокате',
            'юрист', 'юристы', 'юристом', 'юристе',
            'иск', 'иски', 'иском', 'иске',
            'заявление', 'заявления', 'заявлением', 'заявлении',
            'жалоба', 'жалобы', 'жалобой', 'жалобе',
            'апелляция', 'апелляции', 'апелляцией', 'апелляции',
            'кассация', 'кассации', 'кассацией', 'кассации',
            'надзор', 'надзоры', 'надзором', 'надзоре',
            
            # Договорные отношения
            'договор', 'договоры', 'договором', 'договоре',
            'соглашение', 'соглашения', 'соглашением', 'соглашении',
            'контракт', 'контракты', 'контрактом', 'контракте',
            'сделка', 'сделки', 'сделкой', 'сделке',
            'обязательство', 'обязательства', 'обязательством', 'обязательстве',
            'исполнение', 'исполнения', 'исполнением', 'исполнении',
            'нарушение', 'нарушения', 'нарушением', 'нарушении',
            'ответственность', 'ответственности', 'ответственностью', 'ответственности',
            
            # Финансовые и экономические термины
            'налог', 'налоги', 'налогом', 'налоге',
            'сбор', 'сборы', 'сбором', 'сборе',
            'пошлина', 'пошлины', 'пошлиной', 'пошлине',
            'бюджет', 'бюджеты', 'бюджетом', 'бюджете',
            'доход', 'доходы', 'доходом', 'доходе',
            'расход', 'расходы', 'расходом', 'расходе',
            'прибыль', 'прибыли', 'прибылью', 'прибыли',
            'убыток', 'убытки', 'убытком', 'убытке',
            
            # Административные термины
            'лицензия', 'лицензии', 'лицензией', 'лицензии',
            'разрешение', 'разрешения', 'разрешением', 'разрешении',
            'регистрация', 'регистрации', 'регистрацией', 'регистрации',
            'сертификат', 'сертификаты', 'сертификатом', 'сертификате',
            'патент', 'патенты', 'патентом', 'патенте',
            'функция', 'функции', 'функцией', 'функции',
            'полномочие', 'полномочия', 'полномочием', 'полномочии',
            'компетенция', 'компетенции', 'компетенцией', 'компетенции',
            'товарный знак', 'товарные знаки', 'товарным знаком', 'товарном знаке',
            
            # Медицинское и фармацевтическое право
            'рецепт', 'рецепты', 'рецептом', 'рецепте',
            'лекарство', 'лекарства', 'лекарством', 'лекарстве',
            'медицинский', 'медицинская', 'медицинское', 'медицинские',
            'фармацевтический', 'фармацевтическая', 'фармацевтическое', 'фармацевтические',
        }
        
        # Ключевые слова для исключения (неюридический контент)
        self.invalid_keywords = {
            # Художественная литература
            'сказка', 'сказки', 'сказкой', 'сказке',
            'рассказ', 'рассказы', 'рассказом', 'рассказе',
            'повесть', 'повести', 'повестью', 'повести',
            'роман', 'романы', 'романом', 'романе',
            'стихотворение', 'стихотворения', 'стихотворением', 'стихотворении',
            'поэма', 'поэмы', 'поэмой', 'поэме',
            'басня', 'басни', 'басней', 'басне',
            'легенда', 'легенды', 'легендой', 'легенде',
            'миф', 'мифы', 'мифом', 'мифе',
            'притча', 'притчи', 'притчей', 'притче',
            
            # Развлекательный контент
            'игра', 'игры', 'игрой', 'игре',
            'мультфильм', 'мультфильмы', 'мультфильмом', 'мультфильме',
            'фильм', 'фильмы', 'фильмом', 'фильме',
            'сериал', 'сериалы', 'сериалом', 'сериале',
            'книга', 'книги', 'книгой', 'книге',
            'журнал', 'журналы', 'журналом', 'журнале',
            'газета', 'газеты', 'газетой', 'газете',
            
            # Научно-популярный контент (не юридический)
            'инструкция по применению', 'инструкции по применению',
            'руководство пользователя', 'руководства пользователя',
            'техническая документация', 'технической документации',
            'программирование', 'программирования', 'программированием', 'программировании',
            'код', 'коды', 'кодом', 'коде',
            'алгоритм', 'алгоритмы', 'алгоритмом', 'алгоритме',
            
            # Личные документы (не правовые акты)
            'дневник', 'дневники', 'дневником', 'дневнике',
            'письмо', 'письма', 'письмом', 'письме',
            'заметка', 'заметки', 'заметкой', 'заметке',
            'воспоминание', 'воспоминания', 'воспоминанием', 'воспоминании',
        }
        
        # Паттерны для юридических документов
        self.legal_patterns = [
            r'статья\s+\d+',  # статья 1, статья 15
            r'пункт\s+\d+',   # пункт 1, пункт 2
            r'часть\s+\d+',   # часть 1, часть 2
            r'раздел\s+\d+',  # раздел 1, раздел 2
            r'глава\s+\d+',   # глава 1, глава 2
            r'подпункт\s+\d+', # подпункт 1, подпункт 2
            r'федеральный\s+закон',  # федеральный закон
            r'конституция\s+рф',  # конституция рф
            r'гражданский\s+кодекс',  # гражданский кодекс
            r'уголовный\s+кодекс',  # уголовный кодекс
            r'трудовой\s+кодекс',  # трудовой кодекс
            r'налоговый\s+кодекс',  # налоговый кодекс
            r'административный\s+кодекс',  # административный кодекс
            r'семейный\s+кодекс',  # семейный кодекс
            r'жилищный\s+кодекс',  # жилищный кодекс
            r'земельный\s+кодекс',  # земельный кодекс
            r'водный\s+кодекс',  # водный кодекс
            r'лесной\s+кодекс',  # лесной кодекс
            r'воздушный\s+кодекс',  # воздушный кодекс
            r'кодекс\s+об\s+административных\s+правонарушениях',  # кодекс об административных правонарушениях
            r'арбитражный\s+процессуальный\s+кодекс',  # арбитражный процессуальный кодекс
            r'гражданский\s+процессуальный\s+кодекс',  # гражданский процессуальный кодекс
            r'уголовно-процессуальный\s+кодекс',  # уголовно-процессуальный кодекс
            r'уголовно-исполнительный\s+кодекс',  # уголовно-исполнительный кодекс
        ]
        
        # Паттерны для исключения
        self.invalid_patterns = [
            r'жили-были',  # начало сказки
            r'в\s+одной\s+деревне',  # начало сказки
            r'давным-давно',  # начало сказки
            r'однажды',  # начало рассказа
            r'в\s+далекой\s+стране',  # начало сказки
            r'в\s+тридевятом\s+царстве',  # начало сказки
            r'и\s+стали\s+они\s+жить-поживать',  # конец сказки
            r'конец\s+сказки',  # конец сказки
            r'сказка\s+кончилась',  # конец сказки
        ]

    def validate_document(self, text: str, filename: str = None) -> Dict[str, Any]:
        """
        Валидирует документ на соответствие юридической тематике
        
        Args:
            text: Текст документа
            filename: Имя файла (опционально)
            
        Returns:
            Dict с результатами валидации
        """
        if not text or len(text.strip()) < 10:
            return {
                "is_valid": False,
                "document_type": DocumentType.INVALID,
                "confidence": 0.0,
                "reason": "Документ слишком короткий или пустой",
                "suggestions": ["Загрузите документ с достаточным количеством текста"]
            }
        
        # Нормализуем текст для анализа
        normalized_text = text.lower().strip()
        
        # Подсчитываем ключевые слова
        legal_score = self._calculate_legal_score(normalized_text)
        invalid_score = self._calculate_invalid_score(normalized_text)
        
        # Проверяем паттерны
        legal_patterns_found = self._find_legal_patterns(normalized_text)
        invalid_patterns_found = self._find_invalid_patterns(normalized_text)
        
        # Определяем тип документа
        document_type, confidence = self._determine_document_type(
            legal_score, invalid_score, legal_patterns_found, invalid_patterns_found
        )
        
        # Формируем результат
        result = {
            "is_valid": document_type != DocumentType.INVALID,
            "document_type": document_type,
            "confidence": confidence,
            "legal_score": legal_score,
            "invalid_score": invalid_score,
            "legal_patterns_found": legal_patterns_found,
            "invalid_patterns_found": invalid_patterns_found,
            "text_length": len(text),
            "filename": filename
        }
        
        # Добавляем рекомендации
        if not result["is_valid"]:
            result["reason"] = self._get_rejection_reason(legal_score, invalid_score, invalid_patterns_found)
            result["suggestions"] = self._get_suggestions(legal_score, invalid_score)
        
        return result

    def _calculate_legal_score(self, text: str) -> float:
        """Подсчитывает количество юридических ключевых слов"""
        words = re.findall(r'\b\w+\b', text)
        legal_count = sum(1 for word in words if word in self.legal_keywords)
        total_words = len(words)
        
        if total_words == 0:
            return 0.0
        
        return legal_count / total_words

    def _calculate_invalid_score(self, text: str) -> float:
        """Подсчитывает количество неюридических ключевых слов"""
        # Отключена проверка недопустимых ключевых слов
        # Все документы проходят валидацию
        return 0.0

    def _find_legal_patterns(self, text: str) -> List[str]:
        """Находит юридические паттерны в тексте"""
        found_patterns = []
        for pattern in self.legal_patterns:
            matches = re.findall(pattern, text, re.IGNORECASE)
            if matches:
                found_patterns.extend(matches)
        return found_patterns

    def _find_invalid_patterns(self, text: str) -> List[str]:
        """Находит неюридические паттерны в тексте"""
        # Отключена проверка недопустимых паттернов
        # Все документы проходят валидацию
        return []

    def _determine_document_type(self, legal_score: float, invalid_score: float, 
                               legal_patterns: List[str], invalid_patterns: List[str]) -> Tuple[DocumentType, float]:
        """Определяет тип документа на основе анализа"""
        
        # Отключена проверка недопустимых паттернов и ключевых слов
        # Все документы проходят валидацию
        
        # Если мало юридических ключевых слов и паттернов
        if legal_score < 0.01 and not legal_patterns:
            return DocumentType.INVALID, 0.7
        
        # Определяем подтип юридического документа
        if legal_patterns:
            if any('кодекс' in pattern for pattern in legal_patterns):
                return DocumentType.LEGISLATIVE, 0.9
            elif any('статья' in pattern for pattern in legal_patterns):
                return DocumentType.LEGAL, 0.8
            else:
                return DocumentType.LEGAL, 0.7
        
        # Базовый анализ по ключевым словам
        if legal_score > 0.05:
            return DocumentType.LEGAL, 0.6
        elif legal_score > 0.02:
            return DocumentType.REGULATORY, 0.5
        else:
            return DocumentType.INVALID, 0.6

    def _get_rejection_reason(self, legal_score: float, invalid_score: float, 
                            invalid_patterns: List[str]) -> str:
        """Возвращает причину отклонения документа"""
        if invalid_patterns:
            return f"Документ содержит неюридический контент: {', '.join(invalid_patterns[:3])}"
        elif invalid_score > 0.1:
            return "Документ содержит слишком много неюридических терминов"
        elif legal_score < 0.01:
            return "Документ не содержит юридических терминов и не похож на правовой акт"
        else:
            return "Документ не соответствует требованиям юридической тематики"

    def _get_suggestions(self, legal_score: float, invalid_score: float) -> List[str]:
        """Возвращает рекомендации по улучшению документа"""
        suggestions = []
        
        if legal_score < 0.01:
            suggestions.append("Загрузите документ, содержащий правовые термины (статьи, кодексы, законы)")
        
        if invalid_score > 0.05:
            suggestions.append("Убедитесь, что документ не содержит художественную литературу или развлекательный контент")
        
        suggestions.append("Поддерживаемые типы документов: законы, кодексы, постановления, приказы, договоры, судебные решения")
        suggestions.append("Документ должен содержать юридическую терминологию и правовые нормы")
        
        return suggestions

# Глобальный экземпляр валидатора
document_validator = DocumentValidator()
