"""
–°–µ—Ä–≤–∏—Å Canary-—Ä–µ–ª–∏–∑–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏–π
"""

import logging
import hashlib
import json
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class ModelStatus(Enum):
    """–°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏"""
    ACTIVE = "active"
    CANARY = "canary"
    DEPRECATED = "deprecated"
    FAILED = "failed"

@dataclass
class ModelVersion:
    """–í–µ—Ä—Å–∏—è –º–æ–¥–µ–ª–∏"""
    id: str
    name: str
    version: str
    status: ModelStatus
    created_at: datetime
    performance_metrics: Dict[str, float]
    canary_percentage: float = 0.0
    rollback_threshold: float = 0.7
    min_requests: int = 100
    evaluation_period_hours: int = 24

@dataclass
class CanaryMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ Canary-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    total_requests: int
    success_rate: float
    avg_response_time: float
    error_rate: float
    user_satisfaction: float
    quality_score: float
    citation_accuracy: float
    hallucination_rate: float

class CanaryService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Canary-—Ä–µ–ª–∏–∑–∞–º–∏"""
    
    def __init__(self):
        self.models: Dict[str, ModelVersion] = {}
        self.canary_metrics: Dict[str, CanaryMetrics] = {}
        self.rollback_triggers: List[str] = []
        self.initialized = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Canary —Å–µ—Ä–≤–∏—Å–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏
            base_model = ModelVersion(
                id="base_v1",
                name="Saiga Mistral 7B",
                version="1.0.0",
                status=ModelStatus.ACTIVE,
                created_at=datetime.now(),
                performance_metrics={
                    "accuracy": 0.75,
                    "response_time": 2.5,
                    "quality_score": 0.7
                },
                canary_percentage=0.0
            )
            
            self.models[base_model.id] = base_model
            self.initialized = True
            
            logger.info("üéâ Canary —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Canary —Å–µ—Ä–≤–∏—Å–∞: {e}")
            raise
    
    async def deploy_canary(
        self,
        model_name: str,
        version: str,
        canary_percentage: float = 10.0,
        rollback_threshold: float = 0.7,
        evaluation_period_hours: int = 24
    ) -> str:
        """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Canary-–≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏"""
        try:
            if not self.initialized:
                await self.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏
            model_id = f"{model_name}_{version}_{int(datetime.now().timestamp())}"
            
            canary_model = ModelVersion(
                id=model_id,
                name=model_name,
                version=version,
                status=ModelStatus.CANARY,
                created_at=datetime.now(),
                performance_metrics={},
                canary_percentage=canary_percentage,
                rollback_threshold=rollback_threshold,
                evaluation_period_hours=evaluation_period_hours
            )
            
            self.models[model_id] = canary_model
            
            logger.info(f"üöÄ Canary-–≤–µ—Ä—Å–∏—è —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–∞: {model_id} ({canary_percentage}% —Ç—Ä–∞—Ñ–∏–∫–∞)")
            
            return model_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Canary: {e}")
            raise
    
    async def promote_canary(self, model_id: str) -> bool:
        """–ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ Canary-–≤–µ—Ä—Å–∏–∏ –≤ –∞–∫—Ç–∏–≤–Ω—É—é"""
        try:
            if model_id not in self.models:
                raise ValueError(f"–ú–æ–¥–µ–ª—å {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            canary_model = self.models[model_id]
            
            if canary_model.status != ModelStatus.CANARY:
                raise ValueError(f"–ú–æ–¥–µ–ª—å {model_id} –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ Canary")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
            metrics = self.canary_metrics.get(model_id)
            if not metrics:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–¥–µ–ª–∏ {model_id}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            if not self._check_promotion_criteria(canary_model, metrics):
                logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model_id} –Ω–µ –ø—Ä–æ—à–ª–∞ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è")
                return False
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
            for model in self.models.values():
                if model.status == ModelStatus.ACTIVE:
                    model.status = ModelStatus.DEPRECATED
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
            canary_model.status = ModelStatus.ACTIVE
            canary_model.canary_percentage = 100.0
            
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {model_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—É—é")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è Canary: {e}")
            return False
    
    async def rollback_canary(self, model_id: str) -> bool:
        """–û—Ç–∫–∞—Ç Canary-–≤–µ—Ä—Å–∏–∏"""
        try:
            if model_id not in self.models:
                raise ValueError(f"–ú–æ–¥–µ–ª—å {model_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            canary_model = self.models[model_id]
            canary_model.status = ModelStatus.FAILED
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç–∞–±–∏–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
            stable_models = [m for m in self.models.values() if m.status == ModelStatus.DEPRECATED]
            if stable_models:
                latest_stable = max(stable_models, key=lambda x: x.created_at)
                latest_stable.status = ModelStatus.ACTIVE
                latest_stable.canary_percentage = 100.0
            
            logger.info(f"üîÑ Canary-–≤–µ—Ä—Å–∏—è {model_id} –æ—Ç–∫–∞—á–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞ Canary: {e}")
            return False
    
    def _check_promotion_criteria(self, model: ModelVersion, metrics: CanaryMetrics) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        if metrics.total_requests < model.min_requests:
            logger.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {metrics.total_requests}/{model.min_requests}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if metrics.success_rate < model.rollback_threshold:
            logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π success rate: {metrics.success_rate:.2f} < {model.rollback_threshold}")
            return False
        
        if metrics.error_rate > (1 - model.rollback_threshold):
            logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π error rate: {metrics.error_rate:.2f} > {1 - model.rollback_threshold}")
            return False
        
        if metrics.quality_score < 0.6:
            logger.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–∏–π quality score: {metrics.quality_score:.2f} < 0.6")
            return False
        
        if metrics.hallucination_rate > 0.3:
            logger.warning(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π hallucination rate: {metrics.hallucination_rate:.2f} > 0.3")
            return False
        
        return True
    
    async def record_metrics(
        self,
        model_id: str,
        success: bool,
        response_time: float,
        quality_score: float = None,
        citation_accuracy: float = None,
        hallucination_rate: float = None
    ):
        """–ó–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫ –¥–ª—è Canary-–º–æ–¥–µ–ª–∏"""
        try:
            if model_id not in self.models:
                return
            
            if model_id not in self.canary_metrics:
                self.canary_metrics[model_id] = CanaryMetrics(
                    total_requests=0,
                    success_rate=0.0,
                    avg_response_time=0.0,
                    error_rate=0.0,
                    user_satisfaction=0.0,
                    quality_score=0.0,
                    citation_accuracy=0.0,
                    hallucination_rate=0.0
                )
            
            metrics = self.canary_metrics[model_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics.total_requests += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º success rate
            if success:
                metrics.success_rate = (metrics.success_rate * (metrics.total_requests - 1) + 1.0) / metrics.total_requests
            else:
                metrics.success_rate = (metrics.success_rate * (metrics.total_requests - 1) + 0.0) / metrics.total_requests
            
            # –û–±–Ω–æ–≤–ª—è–µ–º response time
            metrics.avg_response_time = (metrics.avg_response_time * (metrics.total_requests - 1) + response_time) / metrics.total_requests
            
            # –û–±–Ω–æ–≤–ª—è–µ–º error rate
            metrics.error_rate = 1.0 - metrics.success_rate
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if quality_score is not None:
                metrics.quality_score = (metrics.quality_score * (metrics.total_requests - 1) + quality_score) / metrics.total_requests
            
            if citation_accuracy is not None:
                metrics.citation_accuracy = (metrics.citation_accuracy * (metrics.total_requests - 1) + citation_accuracy) / metrics.total_requests
            
            if hallucination_rate is not None:
                metrics.hallucination_rate = (metrics.hallucination_rate * (metrics.total_requests - 1) + hallucination_rate) / metrics.total_requests
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–∫–∞—Ç–∞
            await self._check_rollback_conditions(model_id)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –º–µ—Ç—Ä–∏–∫: {e}")
    
    async def _check_rollback_conditions(self, model_id: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–∫–∞—Ç–∞"""
        try:
            model = self.models.get(model_id)
            metrics = self.canary_metrics.get(model_id)
            
            if not model or not metrics or model.status != ModelStatus.CANARY:
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            if metrics.total_requests >= model.min_requests:
                if metrics.success_rate < model.rollback_threshold:
                    logger.warning(f"üö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç: success_rate {metrics.success_rate:.2f} < {model.rollback_threshold}")
                    await self.rollback_canary(model_id)
                    self.rollback_triggers.append(f"Auto-rollback: {model_id} - low success rate")
                
                elif metrics.error_rate > (1 - model.rollback_threshold):
                    logger.warning(f"üö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç: error_rate {metrics.error_rate:.2f} > {1 - model.rollback_threshold}")
                    await self.rollback_canary(model_id)
                    self.rollback_triggers.append(f"Auto-rollback: {model_id} - high error rate")
                
                elif metrics.hallucination_rate > 0.5:
                    logger.warning(f"üö® –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–∫–∞—Ç: hallucination_rate {metrics.hallucination_rate:.2f} > 0.5")
                    await self.rollback_canary(model_id)
                    self.rollback_triggers.append(f"Auto-rollback: {model_id} - high hallucination rate")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –æ—Ç–∫–∞—Ç–∞: {e}")
    
    async def get_model_for_request(self, user_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
            active_models = [m for m in self.models.values() if m.status == ModelStatus.ACTIVE]
            if not active_models:
                return None
            
            active_model = active_models[0]
            
            # –ù–∞—Ö–æ–¥–∏–º Canary-–º–æ–¥–µ–ª–∏
            canary_models = [m for m in self.models.values() if m.status == ModelStatus.CANARY]
            
            if not canary_models:
                return active_model.id
            
            # –í—ã–±–∏—Ä–∞–µ–º Canary-–º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_hash = int(hashlib.md5(user_id.encode()).hexdigest(), 16)
            canary_threshold = sum(m.canary_percentage for m in canary_models)
            
            if (user_hash % 100) < canary_threshold:
                # –í—ã–±–∏—Ä–∞–µ–º Canary-–º–æ–¥–µ–ª—å
                canary_model = canary_models[0]  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
                return canary_model.id
            
            return active_model.id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏: {e}")
            return None
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Canary-—Å–∏—Å—Ç–µ–º—ã"""
        return {
            "status": "canary_operational",
            "initialized": self.initialized,
            "models": {
                model_id: {
                    "name": model.name,
                    "version": model.version,
                    "status": model.status.value,
                    "canary_percentage": model.canary_percentage,
                    "created_at": model.created_at.isoformat(),
                    "performance_metrics": model.performance_metrics
                }
                for model_id, model in self.models.items()
            },
            "canary_metrics": {
                model_id: {
                    "total_requests": metrics.total_requests,
                    "success_rate": metrics.success_rate,
                    "avg_response_time": metrics.avg_response_time,
                    "error_rate": metrics.error_rate,
                    "quality_score": metrics.quality_score,
                    "citation_accuracy": metrics.citation_accuracy,
                    "hallucination_rate": metrics.hallucination_rate
                }
                for model_id, metrics in self.canary_metrics.items()
            },
            "rollback_triggers": self.rollback_triggers[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
canary_service = CanaryService()
