"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ (RBAC)
"""

import logging
from typing import List, Dict, Any, Optional
from sqlalchemy.orm import Session
from sqlalchemy import and_, or_

from ..core.database import SessionLocal
from ..models.user import User
from ..models.rbac import (
    Role, Permission, UserRoleHistory, user_roles, role_permissions,
    SYSTEM_ROLES, SYSTEM_PERMISSIONS, ROLE_PERMISSIONS_MAPPING
)

logger = logging.getLogger(__name__)


class RBACService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏"""
    
    def __init__(self):
        self.db = None
    
    def initialize_rbac_system(self, db: Session) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RBAC —Å–∏—Å—Ç–µ–º—ã —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏"""
        try:
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RBAC —Å–∏—Å—Ç–µ–º—ã...")
            
            # 1. –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∞–≤–∞
            self._create_system_permissions(db)
            
            # 2. –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏
            self._create_system_roles(db)
            
            # 3. –ù–∞–∑–Ω–∞—á–∞–µ–º –ø—Ä–∞–≤–∞ —Ä–æ–ª—è–º
            self._assign_permissions_to_roles(db)
            
            # 4. –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤
            self._migrate_existing_admins(db)
            
            logger.info("‚úÖ RBAC —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RBAC: {e}")
            return False
    
    def _create_system_permissions(self, db: Session):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–∞–≤–∞"""
        for perm_name, perm_data in SYSTEM_PERMISSIONS.items():
            existing = db.query(Permission).filter(Permission.name == perm_name).first()
            if not existing:
                permission = Permission(
                    name=perm_name,
                    display_name=perm_data["display_name"],
                    resource=perm_data["resource"],
                    action=perm_data["action"],
                    is_system=True
                )
                db.add(permission)
        
        db.commit()
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(SYSTEM_PERMISSIONS)} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–∞–≤")
    
    def _create_system_roles(self, db: Session):
        """–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏"""
        for role_name, role_data in SYSTEM_ROLES.items():
            existing = db.query(Role).filter(Role.name == role_name).first()
            if not existing:
                role = Role(
                    name=role_name,
                    display_name=role_data["display_name"],
                    description=role_data["description"],
                    is_system=role_data["is_system"],
                    is_active=True
                )
                db.add(role)
        
        db.commit()
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(SYSTEM_ROLES)} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–æ–ª–µ–π")
    
    def _assign_permissions_to_roles(self, db: Session):
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –ø—Ä–∞–≤–∞ —Ä–æ–ª—è–º"""
        for role_name, permission_names in ROLE_PERMISSIONS_MAPPING.items():
            role = db.query(Role).filter(Role.name == role_name).first()
            if not role:
                continue
            
            for perm_name in permission_names:
                permission = db.query(Permission).filter(Permission.name == perm_name).first()
                if permission and permission not in role.permissions:
                    role.permissions.append(permission)
        
        db.commit()
        logger.info("‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã —Ä–æ–ª—è–º")
    
    def _migrate_existing_admins(self, db: Session):
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤ –≤ RBAC —Å–∏—Å—Ç–µ–º—É"""
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–¥–º–∏–Ω–æ–≤
        existing_admins = db.query(User).filter(User.is_admin == True).all()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å super_admin
        super_admin_role = db.query(Role).filter(Role.name == "super_admin").first()
        
        if not super_admin_role:
            logger.error("‚ùå –†–æ–ª—å super_admin –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        for admin in existing_admins:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–ª–∏ —É –∞–¥–º–∏–Ω–∞
            if not admin.get_roles():
                # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å super_admin
                self.assign_role_to_user(db, admin.id, super_admin_role.id, assigned_by=admin.id)
                logger.info(f"‚úÖ –†–æ–ª—å super_admin –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {admin.email}")
    
    def assign_role_to_user(self, db: Session, user_id: int, role_id: int, assigned_by: int, reason: str = None) -> bool:
        """–ù–∞–∑–Ω–∞—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –µ—â–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
            existing = db.execute(
                user_roles.select().where(
                    and_(user_roles.c.user_id == user_id, user_roles.c.role_id == role_id)
                )
            ).first()
            
            if existing:
                return False  # –†–æ–ª—å —É–∂–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
            
            # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
            db.execute(
                user_roles.insert().values(
                    user_id=user_id,
                    role_id=role_id,
                    assigned_by=assigned_by
                )
            )
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            history = UserRoleHistory(
                user_id=user_id,
                role_id=role_id,
                action="granted",
                assigned_by=assigned_by,
                reason=reason
            )
            db.add(history)
            db.commit()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏: {e}")
            db.rollback()
            return False
    
    def revoke_role_from_user(self, db: Session, user_id: int, role_id: int, revoked_by: int, reason: str = None) -> bool:
        """–û—Ç–∑—ã–≤–∞–µ—Ç —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –£–¥–∞–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏
            result = db.execute(
                user_roles.delete().where(
                    and_(user_roles.c.user_id == user_id, user_roles.c.role_id == role_id)
                )
            )
            
            if result.rowcount == 0:
                return False  # –†–æ–ª—å –Ω–µ –±—ã–ª–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            history = UserRoleHistory(
                user_id=user_id,
                role_id=role_id,
                action="revoked",
                assigned_by=revoked_by,
                reason=reason
            )
            db.add(history)
            db.commit()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Ä–æ–ª–∏: {e}")
            db.rollback()
            return False
    
    def check_permission(self, user: User, permission_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –ø—Ä–∞–≤–æ"""
        return user.has_permission(permission_name)
    
    def get_user_roles(self, db: Session, user_id: int) -> List[Role]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return db.query(Role).join(user_roles).filter(user_roles.c.user_id == user_id).all()
    
    def get_role_permissions(self, db: Session, role_id: int) -> List[Permission]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞ —Ä–æ–ª–∏"""
        return db.query(Permission).join(role_permissions).filter(role_permissions.c.role_id == role_id).all()
    
    def get_all_roles(self, db: Session, include_inactive: bool = False) -> List[Role]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ä–æ–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        query = db.query(Role)
        if not include_inactive:
            query = query.filter(Role.is_active == True)
        return query.order_by(Role.name).all()
    
    def get_all_permissions(self, db: Session) -> List[Permission]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"""
        return db.query(Permission).order_by(Permission.resource, Permission.action).all()
    
    def get_role_by_name(self, db: Session, role_name: str) -> Optional[Role]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ –∏–º–µ–Ω–∏"""
        return db.query(Role).filter(Role.name == role_name).first()
    
    def create_custom_role(self, db: Session, name: str, display_name: str, description: str = None, created_by: int = None) -> Role:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é —Ä–æ–ª—å"""
        try:
            role = Role(
                name=name,
                display_name=display_name,
                description=description,
                is_system=False,
                is_active=True
            )
            db.add(role)
            db.commit()
            db.refresh(role)
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Ä–æ–ª—å: {name}")
            return role
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–ª–∏: {e}")
            db.rollback()
            raise
    
    def get_user_role_history(self, db: Session, user_id: int) -> List[UserRoleHistory]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return db.query(UserRoleHistory).filter(
            UserRoleHistory.user_id == user_id
        ).order_by(UserRoleHistory.created_at.desc()).all()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
rbac_service = RBACService()


def require_permission(permission_name: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    def decorator(func):
        async def wrapper(*args, **kwargs):
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            current_user = None
            for arg in args:
                if isinstance(arg, User):
                    current_user = arg
                    break
            
            if not current_user:
                # –ò—â–µ–º –≤ kwargs
                current_user = kwargs.get('current_admin') or kwargs.get('current_user')
            
            if not current_user:
                raise HTTPException(status_code=401, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–æ
            if not current_user.has_permission(permission_name):
                logger.warning(f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.email} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –ø—Ä–∞–≤–∞ {permission_name}")
                raise HTTPException(
                    status_code=403, 
                    detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: {permission_name}"
                )
            
            import asyncio
            return await func(*args, **kwargs) if asyncio.iscoroutinefunction(func) else func(*args, **kwargs)
        return wrapper
    return decorator
