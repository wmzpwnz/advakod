"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RAG —Å–µ—Ä–≤–∏—Å
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ simple_expert_rag –∫–∞–∫ fallback
"""

import logging
from typing import List, Dict, Any, Optional
from datetime import datetime, date
import asyncio

from .simple_expert_rag import SimpleExpertRAG, LegalMetadata

logger = logging.getLogger(__name__)

class IntegratedRAGService:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RAG —Å–µ—Ä–≤–∏—Å"""
    
    def __init__(self):
        self.simple_rag = SimpleExpertRAG()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—É—é —Å–∏—Å—Ç–µ–º—É
        self.initialized = False
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ RAG —Å–µ—Ä–≤–∏—Å–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é RAG —Å–∏—Å—Ç–µ–º—É
            await self.simple_rag.initialize()
            
            self.initialized = True
            logger.info("üéâ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RAG —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            self.initialized = False
            raise
    
    async def search_with_enhancements(
        self,
        query: str,
        situation_date: Optional[date] = None,
        use_enhanced: bool = True,
        top_k: int = 20,
        rerank_top_k: int = 5
    ) -> Dict[str, Any]:
        """–ü–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ—Å—Ç–æ–π RAG —Å–∏—Å—Ç–µ–º—ã"""
        if not self.initialized:
            await self.initialize()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é RAG —Å–∏—Å—Ç–µ–º—É
            search_results = await self.simple_rag.search_documents(
                query=query,
                situation_date=situation_date,
                top_k=top_k
            )
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            context_documents = [
                {
                    "content": result.get("content", ""),
                    "metadata": result.get("metadata", {}),
                    "final_score": result.get("final_score", 0.0)
                }
                for result in search_results
            ]
            
            return {
                "success": True,
                "context_documents": context_documents,
                "search_results": search_results,
                "total_found": len(search_results),
                "system_used": "simple_expert_rag"
            }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "context_documents": [],
                "search_results": [],
                "total_found": 0,
                "system_used": "simple_expert_rag"
            }
    
    async def generate_enhanced_response(
        self,
        query: str,
        search_data: Dict[str, Any],
        response_text: str,
        enable_fact_checking: bool = False,
        enable_explainability: bool = False
    ) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        try:
            # –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
            return {
                "success": True,
                "response": response_text,
                "fact_checking_enabled": enable_fact_checking,
                "explainability_enabled": enable_explainability,
                "enhancements_applied": False  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "response": response_text,
                "fact_checking_enabled": False,
                "explainability_enabled": False,
                "enhancements_applied": False
            }
    
    async def add_document_with_text_enhanced(
        self,
        text_content: str,
        metadata: LegalMetadata
    ) -> Dict[str, Any]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        if not self.initialized:
            await self.initialize()
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é RAG —Å–∏—Å—Ç–µ–º—É
            result = await self.simple_rag.add_document_with_text(text_content, metadata)
            
            return {
                "success": result.get("success", False),
                "chunks_created": result.get("chunks_created", 0),
                "document_id": result.get("document_id", ""),
                "status": result.get("status", "error"),
                "system_used": "simple_expert_rag"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
            return {
                "success": False,
                "error": str(e),
                "chunks_created": 0,
                "document_id": "",
                "status": "error",
                "system_used": "simple_expert_rag"
            }
    
    async def get_enhanced_search_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∏—Å–∫–∞"""
        try:
            simple_status = self.simple_rag.get_status()
            
            return {
                "simple_rag_status": simple_status,
                "total_documents": simple_status.get("documents_indexed", 0),
                "total_chunks": simple_status.get("chunks_indexed", 0),
                "system_type": "integrated_simple",
                "features_available": simple_status.get("features", [])
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {
                "simple_rag_status": {"status": "error"},
                "total_documents": 0,
                "total_chunks": 0,
                "system_type": "integrated_simple",
                "features_available": [],
                "error": str(e)
            }
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        return {
            "status": "integrated_rag_operational",
            "system_type": "integrated_simple",
            "features": [
                "simple_search",
                "document_processing",
                "basic_rag"
            ],
            "simple_rag_initialized": self.simple_rag.initialized,
            "initialized": self.initialized
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
integrated_rag_service = IntegratedRAGService()