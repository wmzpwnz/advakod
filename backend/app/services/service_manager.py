"""
Service Manager - —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º AI-—Å–µ—Ä–≤–∏—Å–æ–≤
–£–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ graceful shutdown –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import logging
import asyncio
import time
from typing import Dict, Any, List, Optional, Callable
from dataclasses import dataclass
from enum import Enum
from datetime import datetime

from ..core.config import settings
from .unified_llm_service import unified_llm_service, ServiceHealth as LLMServiceHealth
from .unified_rag_service import unified_rag_service

logger = logging.getLogger(__name__)


class ServiceStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤"""
    NOT_STARTED = "not_started"
    INITIALIZING = "initializing"
    HEALTHY = "healthy"
    DEGRADED = "degraded"
    UNHEALTHY = "unhealthy"
    SHUTTING_DOWN = "shutting_down"
    STOPPED = "stopped"
    ERROR = "error"


class ServicePriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    CRITICAL = 1    # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–≤—ã–º–∏
    HIGH = 2        # –í–∞–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    NORMAL = 3      # –û–±—ã—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    LOW = 4         # –ú–æ–≥—É—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏


@dataclass
class ServiceInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"""
    name: str
    instance: Any
    priority: ServicePriority
    status: ServiceStatus
    last_health_check: Optional[datetime]
    initialization_time: Optional[float]
    error_count: int
    last_error: Optional[str]
    restart_count: int
    dependencies: List[str]  # –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    health_check_interval: int  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö


@dataclass
class SystemHealth:
    """–û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    status: ServiceStatus
    total_services: int
    healthy_services: int
    degraded_services: int
    unhealthy_services: int
    last_check: datetime
    uptime: float
    services: Dict[str, ServiceInfo]


class ServiceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º AI-—Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self):
        self._services: Dict[str, ServiceInfo] = {}
        self._initialization_order: List[str] = []
        self._background_tasks: List[asyncio.Task] = []
        self._shutdown_requested = False
        self._startup_time = time.time()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self._health_check_interval = getattr(settings, "SERVICE_HEALTH_CHECK_INTERVAL", 30)
        self._max_restart_attempts = getattr(settings, "SERVICE_MAX_RESTART_ATTEMPTS", 3)
        self._restart_delay = getattr(settings, "SERVICE_RESTART_DELAY", 5)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self._stats = {
            "total_initializations": 0,
            "successful_initializations": 0,
            "failed_initializations": 0,
            "total_restarts": 0,
            "successful_restarts": 0,
            "failed_restarts": 0,
            "average_initialization_time": 0.0
        }
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        self._register_services()
    
    def _register_services(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ AI-—Å–µ—Ä–≤–∏—Å—ã"""
        
        # Unified LLM Service - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å
        self._services["unified_llm"] = ServiceInfo(
            name="unified_llm",
            instance=unified_llm_service,
            priority=ServicePriority.CRITICAL,
            status=ServiceStatus.NOT_STARTED,
            last_health_check=None,
            initialization_time=None,
            error_count=0,
            last_error=None,
            restart_count=0,
            dependencies=[],  # –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            health_check_interval=30
        )
        
        # Unified RAG Service - –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, –∑–∞–≤–∏—Å–∏—Ç –æ—Ç vector store –∏ embeddings
        self._services["unified_rag"] = ServiceInfo(
            name="unified_rag",
            instance=unified_rag_service,
            priority=ServicePriority.HIGH,
            status=ServiceStatus.NOT_STARTED,
            last_health_check=None,
            initialization_time=None,
            error_count=0,
            last_error=None,
            restart_count=0,
            dependencies=["vector_store", "embeddings"],
            health_check_interval=30
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self._calculate_initialization_order()
    
    def _calculate_initialization_order(self):
        """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        services_by_priority = sorted(
            self._services.items(),
            key=lambda x: x[1].priority.value
        )
        
        self._initialization_order = [name for name, _ in services_by_priority]
        
        logger.info("üìã –ü–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: %s", " -> ".join(self._initialization_order))
    
    async def initialize_services(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é AI-—Å–µ—Ä–≤–∏—Å–æ–≤...")
        start_time = time.time()
        
        successful_count = 0
        total_count = len(self._services)
        
        for service_name in self._initialization_order:
            service_info = self._services[service_name]
            
            try:
                logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞: %s (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: %s)", 
                          service_name, service_info.priority.name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                if not await self._check_dependencies(service_name):
                    logger.error("‚ùå –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ %s –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", service_name)
                    service_info.status = ServiceStatus.ERROR
                    service_info.last_error = "Dependencies not met"
                    continue
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å
                service_info.status = ServiceStatus.INITIALIZING
                init_start_time = time.time()
                
                await self._initialize_single_service(service_info)
                
                init_time = time.time() - init_start_time
                service_info.initialization_time = init_time
                service_info.status = ServiceStatus.HEALTHY
                successful_count += 1
                
                logger.info("‚úÖ –°–µ—Ä–≤–∏—Å %s –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ %.2f —Å–µ–∫—É–Ω–¥", 
                          service_name, init_time)
                
                self._stats["successful_initializations"] += 1
                
            except Exception as e:
                service_info.status = ServiceStatus.ERROR
                service_info.error_count += 1
                service_info.last_error = str(e)
                
                logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ %s: %s", service_name, e)
                self._stats["failed_initializations"] += 1
        
        total_time = time.time() - start_time
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._stats["total_initializations"] += total_count
        if self._stats["successful_initializations"] > 0:
            total_init_time = self._stats["average_initialization_time"] * (self._stats["successful_initializations"] - successful_count)
            self._stats["average_initialization_time"] = (total_init_time + total_time) / self._stats["successful_initializations"]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        await self._start_background_tasks()
        
        success_rate = successful_count / total_count
        logger.info("üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: %d/%d —Å–µ—Ä–≤–∏—Å–æ–≤ (%.1f%%) –∑–∞ %.2f —Å–µ–∫—É–Ω–¥", 
                   successful_count, total_count, success_rate * 100, total_time)
        
        return success_rate >= 0.5  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ >= 50% —Å–µ—Ä–≤–∏—Å–æ–≤
    
    async def _check_dependencies(self, service_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã"""
        
        service_info = self._services[service_name]
        
        for dependency in service_info.dependencies:
            if dependency in self._services:
                dep_service = self._services[dependency]
                if dep_service.status not in [ServiceStatus.HEALTHY, ServiceStatus.DEGRADED]:
                    logger.warning("‚ö†Ô∏è –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å %s –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ %s –Ω–µ –≥–æ—Ç–æ–≤–∞ (—Å—Ç–∞—Ç—É—Å: %s)", 
                                 dependency, service_name, dep_service.status.value)
                    return False
            else:
                # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É–ø—Ä–∞–≤–ª—è–µ–º—ã–º —Å–µ—Ä–≤–∏—Å–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º dependency_manager
                if not await self._check_external_dependency_via_manager(dependency):
                    logger.warning("‚ö†Ô∏è –í–Ω–µ—à–Ω—è—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å %s –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ %s –Ω–µ –≥–æ—Ç–æ–≤–∞", 
                                 dependency, service_name)
                    return False
        
        return True
    
    async def _check_external_dependency_via_manager(self, dependency: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ dependency_manager"""
        
        try:
            from ..core.dependency_manager import dependency_manager
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ dependency_manager
            dep_status = dependency_manager.get_dependency_status()
            
            # –ú–∞–ø–ø–∏–Ω–≥ –∏–º–µ–Ω –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            dependency_mapping = {
                "vector_store": "chromadb",
                "embeddings": "embeddings_model",
                "database": "postgresql",
                "cache": "redis"
            }
            
            mapped_name = dependency_mapping.get(dependency, dependency)
            
            if mapped_name in dep_status:
                status = dep_status[mapped_name]["status"]
                return status == "available"
            else:
                # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
                return await self._check_external_dependency(dependency)
                
        except Exception as e:
            logger.warning(f"Error checking dependency {dependency} via manager: {e}")
            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏
            return await self._check_external_dependency(dependency)
    
    async def _check_external_dependency(self, dependency: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        
        if dependency == "vector_store":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å vector store
            try:
                from .vector_store_service import vector_store_service
                return vector_store_service.is_ready()
            except Exception:
                return False
        
        elif dependency == "embeddings":
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å embeddings service
            try:
                from .embeddings_service import embeddings_service
                return hasattr(embeddings_service, '_model_loaded') and embeddings_service._model_loaded
            except Exception:
                return False
        
        return True
    
    async def _initialize_single_service(self, service_info: ServiceInfo):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å"""
        
        service_instance = service_info.instance
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ initialize
        if hasattr(service_instance, 'initialize'):
            await service_instance.initialize()
        else:
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å %s –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ initialize", service_info.name)
    
    async def _start_background_tasks(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏"""
        
        # –ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤
        health_monitor = asyncio.create_task(self._health_monitor_loop())
        self._background_tasks.append(health_monitor)
        
        # –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        recovery_task = asyncio.create_task(self._auto_recovery_loop())
        self._background_tasks.append(recovery_task)
        
        logger.info("üîÑ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ ServiceManager –∑–∞–ø—É—â–µ–Ω—ã")
    
    async def _health_monitor_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        while not self._shutdown_requested:
            try:
                await self._check_all_services_health()
                await asyncio.sleep(self._health_check_interval)
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–µ –∑–¥–æ—Ä–æ–≤—å—è: %s", e)
                await asyncio.sleep(self._health_check_interval)
    
    async def _auto_recovery_loop(self):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        while not self._shutdown_requested:
            try:
                await self._attempt_service_recovery()
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: %s", e)
                await asyncio.sleep(60)
    
    async def _check_all_services_health(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        for service_name, service_info in self._services.items():
            try:
                await self._check_service_health(service_info)
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞ %s: %s", service_name, e)
                service_info.status = ServiceStatus.ERROR
                service_info.error_count += 1
                service_info.last_error = str(e)
    
    async def _check_service_health(self, service_info: ServiceInfo):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        
        service_instance = service_info.instance
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–∞ health_check
        if hasattr(service_instance, 'health_check'):
            health_result = await service_instance.health_check()
            
            if isinstance(health_result, dict):
                status_str = health_result.get("status", "unknown")
                if status_str == "healthy":
                    service_info.status = ServiceStatus.HEALTHY
                elif status_str == "degraded":
                    service_info.status = ServiceStatus.DEGRADED
                else:
                    service_info.status = ServiceStatus.UNHEALTHY
            else:
                # –ï—Å–ª–∏ health_check –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ dict, —Å—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤—ã–º
                service_info.status = ServiceStatus.HEALTHY
        
        elif hasattr(service_instance, 'is_ready'):
            # Fallback –Ω–∞ –º–µ—Ç–æ–¥ is_ready
            if service_instance.is_ready():
                service_info.status = ServiceStatus.HEALTHY
            else:
                service_info.status = ServiceStatus.UNHEALTHY
        
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å—á–∏—Ç–∞–µ–º —Å–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤—ã–º –µ—Å–ª–∏ –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if service_info.status == ServiceStatus.INITIALIZING:
                service_info.status = ServiceStatus.HEALTHY
        
        service_info.last_health_check = datetime.now()
    
    async def _attempt_service_recovery(self):
        """–ü—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã"""
        
        for service_name, service_info in self._services.items():
            if (service_info.status in [ServiceStatus.UNHEALTHY, ServiceStatus.ERROR] and
                service_info.restart_count < self._max_restart_attempts):
                
                logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞: %s (–ø–æ–ø—ã—Ç–∫–∞ %d/%d)", 
                          service_name, service_info.restart_count + 1, self._max_restart_attempts)
                
                try:
                    await self._restart_service(service_name)
                except Exception as e:
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ %s: %s", service_name, e)
    
    async def restart_service(self, service_name: str) -> bool:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
        
        if service_name not in self._services:
            logger.error("‚ùå –°–µ—Ä–≤–∏—Å %s –Ω–µ –Ω–∞–π–¥–µ–Ω", service_name)
            return False
        
        return await self._restart_service(service_name)
    
    async def _restart_service(self, service_name: str) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"""
        
        service_info = self._services[service_name]
        
        try:
            service_info.status = ServiceStatus.SHUTTING_DOWN
            
            # Graceful shutdown –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
            if hasattr(service_info.instance, 'graceful_shutdown'):
                await service_info.instance.graceful_shutdown()
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
            await asyncio.sleep(self._restart_delay)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º
            service_info.status = ServiceStatus.INITIALIZING
            await self._initialize_single_service(service_info)
            
            service_info.status = ServiceStatus.HEALTHY
            service_info.restart_count += 1
            service_info.error_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            service_info.last_error = None
            
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å %s —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω", service_name)
            self._stats["successful_restarts"] += 1
            return True
            
        except Exception as e:
            service_info.status = ServiceStatus.ERROR
            service_info.error_count += 1
            service_info.last_error = str(e)
            
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ %s: %s", service_name, e)
            self._stats["failed_restarts"] += 1
            return False
        
        finally:
            self._stats["total_restarts"] += 1
    
    def get_service_status(self) -> SystemHealth:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        healthy_count = sum(1 for s in self._services.values() if s.status == ServiceStatus.HEALTHY)
        degraded_count = sum(1 for s in self._services.values() if s.status == ServiceStatus.DEGRADED)
        unhealthy_count = sum(1 for s in self._services.values() 
                            if s.status in [ServiceStatus.UNHEALTHY, ServiceStatus.ERROR])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        if unhealthy_count == 0 and degraded_count == 0:
            system_status = ServiceStatus.HEALTHY
        elif unhealthy_count == 0:
            system_status = ServiceStatus.DEGRADED
        elif healthy_count > 0:
            system_status = ServiceStatus.DEGRADED
        else:
            system_status = ServiceStatus.UNHEALTHY
        
        return SystemHealth(
            status=system_status,
            total_services=len(self._services),
            healthy_services=healthy_count,
            degraded_services=degraded_count,
            unhealthy_services=unhealthy_count,
            last_check=datetime.now(),
            uptime=time.time() - self._startup_time,
            services=self._services.copy()
        )
    
    def get_service_info(self, service_name: str) -> Optional[ServiceInfo]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–∏—Å–µ"""
        return self._services.get(service_name)
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ServiceManager"""
        return {
            "initialization": self._stats.copy(),
            "services": {
                name: {
                    "status": info.status.value,
                    "priority": info.priority.name,
                    "error_count": info.error_count,
                    "restart_count": info.restart_count,
                    "initialization_time": info.initialization_time,
                    "last_error": info.last_error
                }
                for name, info in self._services.items()
            },
            "system": {
                "uptime": time.time() - self._startup_time,
                "background_tasks": len(self._background_tasks),
                "shutdown_requested": self._shutdown_requested
            }
        }
    
    async def shutdown_services(self) -> bool:
        """Graceful shutdown –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º graceful shutdown AI-—Å–µ—Ä–≤–∏—Å–æ–≤...")
        self._shutdown_requested = True
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        for task in self._background_tasks:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        shutdown_order = list(reversed(self._initialization_order))
        successful_shutdowns = 0
        
        for service_name in shutdown_order:
            service_info = self._services[service_name]
            
            if service_info.status in [ServiceStatus.HEALTHY, ServiceStatus.DEGRADED]:
                try:
                    logger.info("üîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: %s", service_name)
                    service_info.status = ServiceStatus.SHUTTING_DOWN
                    
                    # Graceful shutdown –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                    if hasattr(service_info.instance, 'graceful_shutdown'):
                        await service_info.instance.graceful_shutdown()
                    
                    service_info.status = ServiceStatus.STOPPED
                    successful_shutdowns += 1
                    
                    logger.info("‚úÖ –°–µ—Ä–≤–∏—Å %s –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", service_name)
                    
                except Exception as e:
                    service_info.status = ServiceStatus.ERROR
                    service_info.last_error = str(e)
                    logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ %s: %s", service_name, e)
        
        total_services = len([s for s in self._services.values() 
                            if s.status not in [ServiceStatus.NOT_STARTED, ServiceStatus.STOPPED]])
        
        if total_services > 0:
            success_rate = successful_shutdowns / total_services
            logger.info("üéØ Shutdown –∑–∞–≤–µ—Ä—à–µ–Ω: %d/%d —Å–µ—Ä–≤–∏—Å–æ–≤ (%.1f%%)", 
                       successful_shutdowns, total_services, success_rate * 100)
        else:
            success_rate = 1.0
            logger.info("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        return success_rate >= 0.8  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ >= 80% —Å–µ—Ä–≤–∏—Å–æ–≤


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
service_manager = ServiceManager()