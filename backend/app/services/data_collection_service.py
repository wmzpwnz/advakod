"""
–°–µ—Ä–≤–∏—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LoRA –æ–±—É—á–µ–Ω–∏—è
"""
import logging
from typing import List, Dict, Any, Tuple
from sqlalchemy.orm import Session
from sqlalchemy import and_, desc
from datetime import datetime, timedelta

from ..models.chat import ChatMessage, ChatSession
from ..models.training_data import TrainingData, DataCollectionLog, QualityEvaluation
from ..models.user import User

logger = logging.getLogger(__name__)


class DataCollectionService:
    """–°–µ—Ä–≤–∏—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è LoRA"""
    
    def __init__(self, db: Session):
        self.db = db
    
    def collect_chat_data(
        self, 
        limit: int = 1000, 
        days_back: int = 30,
        collection_type: str = "auto"
    ) -> Dict[str, Any]:
        """
        –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        
        Args:
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤
            days_back: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è —Å–±–æ—Ä–∞
            collection_type: –¢–∏–ø —Å–±–æ—Ä–∞ (auto, manual, scheduled)
        
        Returns:
            –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ —á–∞—Ç–æ–≤ (–ª–∏–º–∏—Ç: {limit}, –¥–Ω–µ–π –Ω–∞–∑–∞–¥: {days_back})")
            
            # –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Å–±–æ—Ä–∞
            collection_log = DataCollectionLog(
                collection_type=collection_type,
                source="chats",
                created_at=datetime.utcnow()
            )
            self.db.add(collection_log)
            self.db.flush()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
            start_date = datetime.utcnow() - timedelta(days=days_back)
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–∞—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–ò–ò
            chat_pairs = self._get_chat_pairs(start_date, limit)
            
            total_found = len(chat_pairs)
            total_processed = 0
            total_approved = 0
            total_rejected = 0
            
            logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {total_found} –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            
            for user_msg, assistant_msg in chat_pairs:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –ø–∞—Ä–∞
                    existing = self.db.query(TrainingData).filter(
                        and_(
                            TrainingData.instruction == user_msg.content,
                            TrainingData.output == assistant_msg.content
                        )
                    ).first()
                    
                    if existing:
                        logger.debug(f"–î–∏–∞–ª–æ–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                        continue
                    
                    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
                    training_data = TrainingData(
                        instruction=user_msg.content,
                        input="",  # –ö–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ
                        output=assistant_msg.content,
                        source="chat",
                        quality_score=None,  # –ë—É–¥–µ—Ç –æ—Ü–µ–Ω–µ–Ω–æ –ò–ò
                        complexity=None,     # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ò–ò
                        is_approved=False,
                        is_used_for_training=False
                    )
                    
                    self.db.add(training_data)
                    self.db.flush()
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
                    quality_score = self._evaluate_quality_auto(
                        training_data.instruction, 
                        training_data.output
                    )
                    training_data.quality_score = quality_score
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
                    complexity = self._categorize_complexity(
                        training_data.instruction, 
                        training_data.output
                    )
                    training_data.complexity = complexity
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤
                    if complexity == "simple" and quality_score >= 4.0:
                        training_data.is_approved = True
                        training_data.approved_at = datetime.utcnow()
                        total_approved += 1
                        logger.debug(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–¥–æ–±—Ä–µ–Ω –ø—Ä–æ—Å—Ç–æ–π —Å–ª—É—á–∞–π (–∫–∞—á–µ—Å—Ç–≤–æ: {quality_score})")
                    elif complexity == "complex" or quality_score < 3.0:
                        total_rejected += 1
                        logger.debug(f"–¢—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}, –∫–∞—á–µ—Å—Ç–≤–æ: {quality_score})")
                    
                    total_processed += 1
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")
                    continue
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥ —Å–±–æ—Ä–∞
            collection_log.total_found = total_found
            collection_log.total_processed = total_processed
            collection_log.total_approved = total_approved
            collection_log.total_rejected = total_rejected
            collection_log.duration_seconds = (datetime.utcnow() - collection_log.created_at).total_seconds()
            
            self.db.commit()
            
            logger.info(f"‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ {total_found}, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed}, –æ–¥–æ–±—Ä–µ–Ω–æ {total_approved}")
            
            return {
                "total_found": total_found,
                "total_processed": total_processed,
                "total_approved": total_approved,
                "total_rejected": total_rejected,
                "collection_id": collection_log.id
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db.rollback()
            return {
                "error": str(e),
                "total_found": 0,
                "total_processed": 0,
                "total_approved": 0,
                "total_rejected": 0
            }
    
    def _get_chat_pairs(self, start_date: datetime, limit: int) -> List[Tuple[ChatMessage, ChatMessage]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–ò–ò"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            user_messages = self.db.query(ChatMessage).join(ChatSession).filter(
                and_(
                    ChatMessage.role == "user",
                    ChatSession.created_at >= start_date
                )
            ).order_by(desc(ChatMessage.created_at)).limit(limit * 2).all()
            
            pairs = []
            
            for user_msg in user_messages:
                # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç –ò–ò –≤ —Ç–æ–π –∂–µ —Å–µ—Å—Å–∏–∏
                assistant_msg = self.db.query(ChatMessage).filter(
                    and_(
                        ChatMessage.session_id == user_msg.session_id,
                        ChatMessage.role == "assistant",
                        ChatMessage.created_at > user_msg.created_at
                    )
                ).order_by(ChatMessage.created_at).first()
                
                if assistant_msg:
                    pairs.append((user_msg, assistant_msg))
                    
                    if len(pairs) >= limit:
                        break
            
            return pairs
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return []
    
    def _evaluate_quality_auto(self, instruction: str, output: str) -> float:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            instruction: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            output: –û—Ç–≤–µ—Ç –ò–ò
        
        Returns:
            –û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 5
        """
        try:
            score = 0.0
            
            # 1. –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞ (–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ä–µ–¥–Ω–µ–º 1,425 —Å–∏–º–≤–æ–ª–æ–≤)
            output_length = len(output)
            if 50 <= output_length <= 2000:  # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
                score += 2.0
            elif 20 <= output_length <= 3000:
                score += 1.0
            else:
                score += 0.5
            
            # 2. –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã (–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç 38-61%)
            legal_terms = [
                '–∑–∞–∫–æ–Ω', '—Å—É–¥', '–¥–æ–≥–æ–≤–æ—Ä', '–ø—Ä–∞–≤–æ', '–æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ', 
                '–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '—Å—Ç–∞—Ç—å—è', '–∫–æ–¥–µ–∫—Å', '—Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π',
                '–≥—Ä–∞–∂–¥–∞–Ω—Å–∫–∏–π', '—Ç—Ä—É–¥–æ–≤–æ–π', '—É–≥–æ–ª–æ–≤–Ω—ã–π', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π'
            ]
            legal_count = sum(1 for term in legal_terms if term in output.lower())
            score += min(2.0, legal_count * 0.3)
            
            # 3. –°—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã (–¥–æ–±–∞–≤–∏—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–µ)
            if any(ref in output for ref in ['—Å—Ç.', '–§–ó', '–ì–ö –†–§', '–¢–ö –†–§', '–£–ö –†–§', '–ö–æ–ê–ü –†–§']):
                score += 1.5
            
            # 4. –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–∞
            question_length = len(instruction)
            if 10 <= question_length <= 500:
                score += 1.0
            elif 5 <= question_length <= 1000:
                score += 0.5
            
            # 5. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            if len(set(instruction.split())) > 3:  # –ú–∏–Ω–∏–º—É–º 4 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤–∞
                score += 0.5
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ 1-5
            final_score = min(5.0, max(1.0, score))
            
            return round(final_score, 2)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
            return 3.0  # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _categorize_complexity(self, instruction: str, output: str) -> str:
        """
        –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        
        Args:
            instruction: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            output: –û—Ç–≤–µ—Ç –ò–ò
        
        Returns:
            simple, medium, complex
        """
        try:
            # –ü—Ä–æ—Å—Ç—ã–µ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ –æ–±—É—á–µ–Ω–∏–µ)
            if (len(output) >= 100 and 
                len(output) <= 1500 and
                any(term in output.lower() for term in ['–∑–∞–∫–æ–Ω', '–ø—Ä–∞–≤–æ', '–¥–æ–≥–æ–≤–æ—Ä']) and
                len(instruction) >= 20 and
                len(instruction) <= 200):
                return "simple"
            
            # –°–ª–æ–∂–Ω—ã–µ (—Ç—Ä–µ–±—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏)
            elif (len(output) > 2000 or 
                  len(instruction) > 500 or
                  any(complex_word in instruction.lower() for complex_word in [
                      '—Å–ª–æ–∂–Ω—ã–π', '–∑–∞–ø—É—Ç–∞–Ω–Ω—ã–π', '—Å–ø–æ—Ä–Ω—ã–π', '–Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π',
                      '–ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–π', '–∫–æ–Ω—Ñ–ª–∏–∫—Ç', '–¥–∏—Å–ø—É—Ç'
                  ]) or
                  instruction.count('?') > 2):  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                return "complex"
            
            # –°—Ä–µ–¥–Ω–∏–µ (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
            else:
                return "medium"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
            return "medium"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    
    def get_pending_review_data(self, limit: int = 50) -> List[TrainingData]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —Ç—Ä–µ–±—É—é—â–∏—Ö —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            return self.db.query(TrainingData).filter(
                and_(
                    TrainingData.is_approved == False,
                    TrainingData.complexity.in_(["medium", "complex"])
                )
            ).order_by(desc(TrainingData.created_at)).limit(limit).all()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
            return []
    
    def approve_training_data(self, data_id: int, approver_id: int) -> bool:
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            training_data = self.db.query(TrainingData).filter(
                TrainingData.id == data_id
            ).first()
            
            if not training_data:
                return False
            
            training_data.is_approved = True
            training_data.approved_by = approver_id
            training_data.approved_at = datetime.utcnow()
            
            self.db.commit()
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ {data_id} –æ–¥–æ–±—Ä–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {approver_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db.rollback()
            return False
    
    def reject_training_data(self, data_id: int, reason: str = None) -> bool:
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        try:
            training_data = self.db.query(TrainingData).filter(
                TrainingData.id == data_id
            ).first()
            
            if not training_data:
                return False
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ is_rejected)
            training_data.metadata = training_data.metadata or {}
            training_data.metadata["rejected"] = True
            training_data.metadata["rejection_reason"] = reason
            training_data.metadata["rejected_at"] = datetime.utcnow().isoformat()
            
            self.db.commit()
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ {data_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            self.db.rollback()
            return False
    
    def get_collection_stats(self, days: int = 7) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            start_date = datetime.utcnow() - timedelta(days=days)
            
            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            total_data = self.db.query(TrainingData).filter(
                TrainingData.created_at >= start_date
            ).count()
            
            approved_data = self.db.query(TrainingData).filter(
                and_(
                    TrainingData.created_at >= start_date,
                    TrainingData.is_approved == True
                )
            ).count()
            
            pending_data = self.db.query(TrainingData).filter(
                and_(
                    TrainingData.created_at >= start_date,
                    TrainingData.is_approved == False
                )
            ).count()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
            simple_data = self.db.query(TrainingData).filter(
                and_(
                    TrainingData.created_at >= start_date,
                    TrainingData.complexity == "simple"
                )
            ).count()
            
            medium_data = self.db.query(TrainingData).filter(
                and_(
                    TrainingData.created_at >= start_date,
                    TrainingData.complexity == "medium"
                )
            ).count()
            
            complex_data = self.db.query(TrainingData).filter(
                and_(
                    TrainingData.created_at >= start_date,
                    TrainingData.complexity == "complex"
                )
            ).count()
            
            return {
                "total_data": total_data,
                "approved_data": approved_data,
                "pending_data": pending_data,
                "simple_data": simple_data,
                "medium_data": medium_data,
                "complex_data": complex_data,
                "approval_rate": (approved_data / total_data * 100) if total_data > 0 else 0
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
