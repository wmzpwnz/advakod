"""
–ú–æ–¥–µ–ª–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
"""

from sqlalchemy import Column, Integer, String, Text, DateTime, ForeignKey, Boolean, JSON, Float
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from ..core.database import Base


class ResponseFeedback(Base):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –æ—Ç–≤–µ—Ç—ã –ò–ò"""
    __tablename__ = "response_feedback"

    id = Column(Integer, primary_key=True, index=True)
    message_id = Column(Integer, ForeignKey('chat_messages.id', ondelete='CASCADE'), nullable=False, index=True)
    user_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False, index=True)
    
    # –û—Ü–µ–Ω–∫–∞: positive, negative, neutral
    rating = Column(String(20), nullable=False, index=True)
    
    # –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    reason = Column(String(100), nullable=True)  # not_answered, inaccurate, hard_to_understand, other
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    comment = Column(Text, nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ metadata —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å SQLAlchemy)
    feedback_metadata = Column(JSON, nullable=True)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)
    
    # –°–≤—è–∑–∏
    message = relationship("ChatMessage", back_populates="feedback")
    user = relationship("User")
    
    def __repr__(self):
        return f"<ResponseFeedback(id={self.id}, message_id={self.message_id}, rating={self.rating})>"


class ModerationReview(Base):
    """–û—Ü–µ–Ω–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    __tablename__ = "moderation_reviews"

    id = Column(Integer, primary_key=True, index=True)
    message_id = Column(Integer, ForeignKey('chat_messages.id', ondelete='CASCADE'), nullable=False, index=True)
    moderator_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), nullable=False, index=True)
    
    # –û—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 10 –∑–≤–µ–∑–¥
    star_rating = Column(Integer, nullable=False)
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º (JSON array)
    problem_categories = Column(JSON, nullable=True)
    
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    comment = Column(Text, nullable=False)
    
    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    suggested_fix = Column(Text, nullable=True)
    
    # –°—Ç–∞—Ç—É—Å: pending, reviewed, approved, rejected
    status = Column(String(20), nullable=False, default='reviewed', index=True)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: high, medium, low
    priority = Column(String(20), nullable=False, default='medium', index=True)
    
    # Confidence score –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    original_confidence = Column(Float, nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ metadata —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å SQLAlchemy)
    review_metadata = Column(JSON, nullable=True)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    message = relationship("ChatMessage", back_populates="moderation_reviews")
    moderator = relationship("User", foreign_keys=[moderator_id])
    
    def __repr__(self):
        return f"<ModerationReview(id={self.id}, message_id={self.message_id}, rating={self.star_rating})>"


class ProblemCategory(Base):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
    __tablename__ = "problem_categories"

    id = Column(Integer, primary_key=True, index=True)
    
    # –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏–º—è
    name = Column(String(50), unique=True, nullable=False, index=True)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
    display_name = Column(String(100), nullable=False)
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = Column(Text, nullable=True)
    
    # –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å (1-5)
    severity = Column(Integer, nullable=False, default=3)
    
    # –ê–∫—Ç–∏–≤–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
    is_active = Column(Boolean, default=True, index=True)
    
    # –ò–∫–æ–Ω–∫–∞/—ç–º–æ–¥–∑–∏
    icon = Column(String(10), nullable=True)
    
    # –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_order = Column(Integer, default=0)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    def __repr__(self):
        return f"<ProblemCategory(id={self.id}, name={self.name})>"


class TrainingDataset(Base):
    """–î–∞—Ç–∞—Å–µ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    __tablename__ = "training_datasets"

    id = Column(Integer, primary_key=True, index=True)
    
    # –í–µ—Ä—Å–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞
    version = Column(String(20), nullable=False, index=True)
    
    # –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    question = Column(Text, nullable=False)
    
    # –ü–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π)
    bad_answer = Column(Text, nullable=False)
    
    # –•–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
    good_answer = Column(Text, nullable=False)
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ review
    review_id = Column(Integer, ForeignKey('moderation_reviews.id', ondelete='SET NULL'), nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ metadata —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å SQLAlchemy)
    dataset_metadata = Column(JSON, nullable=True)
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏
    used_in_training = Column(Boolean, default=False, index=True)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)
    
    # –°–≤—è–∑–∏
    review = relationship("ModerationReview")
    
    def __repr__(self):
        return f"<TrainingDataset(id={self.id}, version={self.version})>"


class ModeratorStats(Base):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    __tablename__ = "moderator_stats"

    id = Column(Integer, primary_key=True, index=True)
    moderator_id = Column(Integer, ForeignKey('users.id', ondelete='CASCADE'), unique=True, nullable=False, index=True)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
    total_reviews = Column(Integer, default=0)
    
    # –ë–∞–ª–ª—ã
    points = Column(Integer, default=0, index=True)
    
    # –ë–µ–π–¥–∂–∏ (JSON array)
    badges = Column(JSON, default=list)
    
    # –†–∞–Ω–≥: novice, expert, master, legend
    rank = Column(String(20), default='novice', index=True)
    
    # –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞, –∫–æ—Ç–æ—Ä—É—é —Å—Ç–∞–≤–∏—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    average_rating = Column(Float, nullable=True)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (JSON)
    category_stats = Column(JSON, default=dict)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # –°–≤—è–∑–∏
    moderator = relationship("User")
    
    def __repr__(self):
        return f"<ModeratorStats(moderator_id={self.moderator_id}, rank={self.rank}, points={self.points})>"


class ModerationQueue(Base):
    """–û—á–µ—Ä–µ–¥—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    __tablename__ = "moderation_queue"

    id = Column(Integer, primary_key=True, index=True)
    message_id = Column(Integer, ForeignKey('chat_messages.id', ondelete='CASCADE'), unique=True, nullable=False, index=True)
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: high, medium, low
    priority = Column(String(20), nullable=False, default='medium', index=True)
    
    # –ü—Ä–∏—á–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
    reason = Column(String(100), nullable=True)  # low_confidence, user_complaint, random_sample
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω –ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    assigned_to = Column(Integer, ForeignKey('users.id', ondelete='SET NULL'), nullable=True, index=True)
    
    # –°—Ç–∞—Ç—É—Å: pending, in_review, completed
    status = Column(String(20), nullable=False, default='pending', index=True)
    
    # Confidence score
    confidence_score = Column(Float, nullable=True)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –∏–∑ metadata —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å SQLAlchemy)
    queue_metadata = Column(JSON, nullable=True)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now(), index=True)
    assigned_at = Column(DateTime(timezone=True), nullable=True)
    completed_at = Column(DateTime(timezone=True), nullable=True)
    
    # –°–≤—è–∑–∏
    message = relationship("ChatMessage")
    assigned_moderator = relationship("User", foreign_keys=[assigned_to])
    
    def __repr__(self):
        return f"<ModerationQueue(id={self.id}, message_id={self.message_id}, priority={self.priority})>"


# –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ–±–ª–µ–º
DEFAULT_PROBLEM_CATEGORIES = [
    {
        "name": "inaccurate_info",
        "display_name": "–ù–µ—Ç–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "description": "–û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏",
        "severity": 5,
        "icon": "‚ùå",
        "display_order": 1
    },
    {
        "name": "outdated_data",
        "display_name": "–£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ",
        "description": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞ –∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤—É",
        "severity": 4,
        "icon": "üìÖ",
        "display_order": 2
    },
    {
        "name": "wrong_article",
        "display_name": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è –∑–∞–∫–æ–Ω–∞",
        "description": "–£–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç—å—è –∏–ª–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–æ–Ω–∞",
        "severity": 5,
        "icon": "üìú",
        "display_order": 3
    },
    {
        "name": "poor_structure",
        "display_name": "–ü–ª–æ—Ö–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞",
        "description": "–û—Ç–≤–µ—Ç –ø–ª–æ—Ö–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω, —Å–ª–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å",
        "severity": 2,
        "icon": "üèóÔ∏è",
        "display_order": 4
    },
    {
        "name": "missing_sources",
        "display_name": "–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏",
        "description": "–ù–µ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∑–∞–∫–æ–Ω—ã, —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ —Å—É–¥–µ–±–Ω—É—é –ø—Ä–∞–∫—Ç–∏–∫—É",
        "severity": 3,
        "icon": "üîó",
        "display_order": 5
    },
    {
        "name": "hallucination",
        "display_name": "–ì–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏",
        "description": "–í—ã–¥—É–º–∞–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–∫–æ–Ω—ã –∏–ª–∏ —Å—Ç–∞—Ç—å–∏",
        "severity": 5,
        "icon": "üåÄ",
        "display_order": 6
    },
    {
        "name": "incomplete_answer",
        "display_name": "–ù–µ–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç",
        "description": "–û—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª–Ω–æ—Å—Ç—å—é",
        "severity": 3,
        "icon": "üìù",
        "display_order": 7
    },
    {
        "name": "other",
        "display_name": "–î—Ä—É–≥–æ–µ",
        "description": "–î—Ä—É–≥–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ –≤—Ö–æ–¥—è—â–∏–µ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã—à–µ",
        "severity": 2,
        "icon": "‚ö†Ô∏è",
        "display_order": 8
    }
]
