from fastapi import APIRouter, Depends, HTTPException, status, Request
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from sqlalchemy.orm import Session
from datetime import datetime, timedelta
from typing import Optional
import logging

logger = logging.getLogger(__name__)

from ..core.database import get_db
from ..core.config import settings
from ..models.user import User
from ..schemas.user import UserCreate, UserLogin, Token, User as UserSchema
from ..services.auth_service import AuthService
from ..services.audit_service import log_user_login, log_user_logout, log_security_incident, get_audit_service
from ..core.validators import validate_email, validate_password, validate_username, validate_full_name
from ..models.audit_log import ActionType, SeverityLevel
from ..core.admin_security import admin_security

router = APIRouter()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
auth_service = AuthService()


@router.post("/register", response_model=UserSchema)
async def register(user_data: UserCreate, db: Session = Depends(get_db)):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    validated_email = validate_email(user_data.email)
    validated_password = validate_password(user_data.password)
    validated_username = validate_username(user_data.username)
    validated_full_name = validate_full_name(user_data.full_name)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    existing_user = db.query(User).filter(User.email == validated_email).first()
    if existing_user:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username
    existing_username = db.query(User).filter(User.username == validated_username).first()
    if existing_username:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        )
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    hashed_password = auth_service.get_password_hash(validated_password)
    
    db_user = User(
        email=validated_email,
        username=validated_username,
        hashed_password=hashed_password,
        full_name=validated_full_name,
        company_name=user_data.company_name,
        legal_form=user_data.legal_form,
        inn=user_data.inn,
        ogrn=user_data.ogrn
    )
    
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    
    return db_user


@router.post("/login", response_model=Token)
async def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(get_db), request: Request = None):
    """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # form_data.username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å email
    user = auth_service.authenticate_user(db, form_data.username, form_data.password)
    if not user:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞
        log_security_incident(
            db=db,
            event_type="failed_login",
            user_id=None,
            request=request,
            details={"username": form_data.username}
        )
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å —É—á–µ—Ç–æ–º –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if user.is_admin:
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã - –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ (30 –º–∏–Ω—É—Ç)
        access_token = auth_service.create_access_token(
            data={"sub": user.email}, is_admin=True
        )
    else:
        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ (8 —á–∞—Å–æ–≤)
        access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = auth_service.create_access_token(
            data={"sub": user.email}, expires_delta=access_token_expires
        )
    
    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥
    try:
        log_user_login(db=db, user=user, request=request, success=True)
    except Exception as e:
        # –ï—Å–ª–∏ –∞—É–¥–∏—Ç –ª–æ–≥–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞
        logger.warning(f"Failed to log user login: {e}")
    
    return {"access_token": access_token, "token_type": "bearer"}


@router.post("/login-email", response_model=Token)
async def login_with_email(login_data: UserLogin, db: Session = Depends(get_db)):
    """–í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email"""
    user = auth_service.authenticate_user(db, login_data.email, login_data.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å —É—á–µ—Ç–æ–º –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if user.is_admin:
        # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã - –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –∂–∏–∑–Ω–∏ (30 –º–∏–Ω—É—Ç)
        access_token = auth_service.create_access_token(
            data={"sub": user.email}, is_admin=True
        )
    else:
        # –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ä–æ–∫ (8 —á–∞—Å–æ–≤)
        access_token_expires = timedelta(minutes=settings.ACCESS_TOKEN_EXPIRE_MINUTES)
        access_token = auth_service.create_access_token(
            data={"sub": user.email}, expires_delta=access_token_expires
        )
    
    return {"access_token": access_token, "token_type": "bearer"}


@router.post("/admin-login", response_model=Token)
async def admin_login(
    login_data: UserLogin, 
    request: Request,
    db: Session = Depends(get_db)
):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
    logger.info("üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∫–∏")
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ IP whitelist (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    if settings.ENVIRONMENT == "production" and not admin_security.check_admin_ip_access(request):
        admin_security.record_failed_admin_login(request)
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤"
        )
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ brute force
    if not admin_security.check_admin_brute_force(request):
        raise HTTPException(
            status_code=status.HTTP_429_TOO_MANY_REQUESTS,
            detail="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    # 3. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    user = auth_service.authenticate_user(db, login_data.email, login_data.password)
    if not user:
        admin_security.record_failed_admin_login(request)
        log_security_incident(
            db=db,
            event_type="failed_admin_login",
            user_id=None,
            request=request,
            details={"email": login_data.email}
        )
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    # 3.5. –ü—Ä–æ–≤–µ—Ä–∫–∞ 2FA –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞)
    if user.two_factor_enabled:
        # –¢—Ä–µ–±—É–µ–º 2FA —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        two_factor_token = request.headers.get("X-2FA-Token")
        if not two_factor_token:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–¢—Ä–µ–±—É–µ—Ç—Å—è 2FA —Ç–æ–∫–µ–Ω –¥–ª—è –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
        
        from ..services.two_factor_service import two_factor_service
        if not two_factor_service.verify_2fa(user, two_factor_token):
            admin_security.record_failed_admin_login(request)
            log_security_incident(
                db=db,
                event_type="failed_2fa_admin_login",
                user_id=user.id,
                request=request,
                details={"email": login_data.email}
            )
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="–ù–µ–≤–µ—Ä–Ω—ã–π 2FA —Ç–æ–∫–µ–Ω"
            )
    else:
        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ 2FA –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ - –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û –î–õ–Ø –°–£–ü–ï–†–ê–î–ú–ò–ù–ê
        # TODO: –í–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ 2FA
        logger.warning("‚ö†Ô∏è –ê–¥–º–∏–Ω –≤—Ö–æ–¥–∏—Ç –±–µ–∑ 2FA - —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        # raise HTTPException(
        #     status_code=status.HTTP_400_BAD_REQUEST,
        #     detail="–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ 2FA"
        # )
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if not user.is_admin:
        admin_security.record_failed_admin_login(request)
        log_security_incident(
            db=db,
            event_type="non_admin_login_attempt",
            user_id=user.id,
            request=request,
            details={"email": login_data.email}
        )
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"
        )
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    if not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_403_FORBIDDEN,
            detail="–ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω"
        )
    
    # 6. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π —Ç–æ–∫–µ–Ω (30 –º–∏–Ω—É—Ç)
    access_token = auth_service.create_access_token(
        data={"sub": user.email}, is_admin=True
    )
    
    # 7. –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –∞–¥–º–∏–Ω—Å–∫–∏–π –≤—Ö–æ–¥
    try:
        log_user_login(db=db, user=user, request=request, success=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        audit_service = get_audit_service(db)
        audit_service.log_action(
            user_id=user.id,
            action=ActionType.ADMIN_LOGIN,
            resource="admin_panel",
            resource_id=None,
            description=f"–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user.email}",
            details=None,
            request=request,
            severity=SeverityLevel.HIGH,
            status="success",
            error_message=None,
            request_id=None,
            duration_ms=None
        )
        logger.info(f"‚úÖ –ê–¥–º–∏–Ω {user.email} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω –≤—Ö–æ–¥–∞: {e}")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    return {
        "access_token": access_token, 
        "token_type": "bearer",
        "expires_in": 1800,  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        "admin": True
    }


@router.get("/me", response_model=UserSchema)
async def read_users_me(current_user: User = Depends(auth_service.get_current_user)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    return current_user


@router.put("/me", response_model=UserSchema)
async def update_user_me(
    user_update: dict,
    current_user: User = Depends(auth_service.get_current_user),
    db: Session = Depends(get_db)
):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    for field, value in user_update.items():
        if hasattr(current_user, field) and value is not None:
            setattr(current_user, field, value)
    
    db.commit()
    db.refresh(current_user)
    
    return current_user
