"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from fastapi import HTTPException, Request, Depends
from sqlalchemy.orm import Session
import ipaddress

from .database import get_db
from .config import settings
from ..models.user import User
from ..models.audit_log import AuditLog, ActionType, SeverityLevel
from ..services.auth_service import auth_service

logger = logging.getLogger(__name__)


class AdminSecurityService:
    """–°–µ—Ä–≤–∏—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏"""
    
    def __init__(self):
        # –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ .env)
        self.admin_ip_whitelist = self._load_ip_whitelist()
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞
        self.max_login_attempts = 3
        # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–∞ 15 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫
        self.lockout_duration = timedelta(minutes=15)
        # –ö—ç—à –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ {ip: [timestamp1, timestamp2, ...]}
        self.failed_attempts = {}
        
    def _load_ip_whitelist(self) -> list:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ IP –∞–¥—Ä–µ—Å–æ–≤"""
        whitelist_str = settings.ADMIN_IP_WHITELIST
        
        whitelist = []
        for ip_str in whitelist_str.split(","):
            ip_str = ip_str.strip()
            if ip_str:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π IP
                    if ip_str == "localhost":
                        whitelist.extend(["127.0.0.1", "::1"])
                    else:
                        ipaddress.ip_address(ip_str)
                        whitelist.append(ip_str)
                except ValueError:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π IP –≤ whitelist: {ip_str}")
        
        logger.info(f"üîí Admin IP whitelist: {whitelist}")
        return whitelist
    
    def check_admin_ip_access(self, request: Request) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –¥–æ—Å—Ç—É–ø —Å –¥–∞–Ω–Ω–æ–≥–æ IP"""
        # –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É IP
        import os
        if os.getenv("ENVIRONMENT", "development") == "development":
            logger.info("üîì –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É IP")
            return True
            
        client_ip = self.get_client_ip(request)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º whitelist
        if client_ip not in self.admin_ip_whitelist:
            logger.warning(f"üö´ –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ —Å –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ IP: {client_ip}")
            return False
            
        return True
    
    def get_client_ip(self, request: Request) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π IP –∫–ª–∏–µ–Ω—Ç–∞"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–æ–∫—Å–∏
        forwarded_for = request.headers.get("X-Forwarded-For")
        if forwarded_for:
            return forwarded_for.split(",")[0].strip()
        
        real_ip = request.headers.get("X-Real-IP")
        if real_ip:
            return real_ip
            
        return request.client.host if request.client else "unknown"
    
    def check_admin_brute_force(self, request: Request) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ brute force –∞—Ç–∞–∫–∏"""
        client_ip = self.get_client_ip(request)
        current_time = datetime.utcnow()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        if client_ip in self.failed_attempts:
            self.failed_attempts[client_ip] = [
                attempt_time for attempt_time in self.failed_attempts[client_ip]
                if current_time - attempt_time < self.lockout_duration
            ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        attempts_count = len(self.failed_attempts.get(client_ip, []))
        
        if attempts_count >= self.max_login_attempts:
            logger.warning(f"üö´ IP {client_ip} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É")
            return False
            
        return True
    
    def record_failed_admin_login(self, request: Request):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É"""
        client_ip = self.get_client_ip(request)
        current_time = datetime.utcnow()
        
        if client_ip not in self.failed_attempts:
            self.failed_attempts[client_ip] = []
            
        self.failed_attempts[client_ip].append(current_time)
        
        attempts_count = len(self.failed_attempts[client_ip])
        logger.warning(f"‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É —Å IP {client_ip}. –ü–æ–ø—ã—Ç–∫–∞ {attempts_count}/{self.max_login_attempts}")
    
    def validate_admin_action(self, user: User, action: str, resource: str = None) -> bool:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"""
        
        # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        if not user.is_admin:
            return False
            
        if not user.is_active:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        critical_actions = [
            "delete_user",
            "toggle_admin_status", 
            "clear_all_documents",
            "delete_document",
            "modify_system_settings"
        ]
        
        if action in critical_actions:
            # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ç—Ä–µ–±—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            logger.warning(f"üî• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∞–¥–º–∏–Ω—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}")
            
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏:
            # - –¢—Ä–µ–±–æ–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            # - –ü—Ä–æ–≤–µ—Ä—è—Ç—å 2FA
            # - –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
            
        return True


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
admin_security = AdminSecurityService()


def get_secure_admin(
    request: Request,
    current_user: User = Depends(auth_service.get_current_active_user),
    db: Session = Depends(get_db)
) -> User:
    """–£—Å–∏–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ä–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    # 1. –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
    if not current_user.is_admin:
        raise HTTPException(status_code=403, detail="–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ IP whitelist (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
    if not admin_security.check_admin_ip_access(request):
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        audit_log = AuditLog(
            user_id=current_user.id,
            action=ActionType.SECURITY_INCIDENT,
            resource="admin_access",
            description=f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ —Å –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ IP: {admin_security._get_client_ip(request)}",
            severity=SeverityLevel.HIGH,
            ip_address=admin_security._get_client_ip(request),
            user_agent=request.headers.get("User-Agent", ""),
            status="blocked"
        )
        db.add(audit_log)
        db.commit()
        
        raise HTTPException(
            status_code=403, 
            detail="–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω —Ç–æ–ª—å–∫–æ —Å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö IP –∞–¥—Ä–µ—Å–æ–≤"
        )
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    if not current_user.is_active:
        raise HTTPException(status_code=403, detail="–ê–∫–∫–∞—É–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    # 4. –õ–æ–≥–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–π –¥–æ—Å—Ç—É–ø
    audit_log = AuditLog(
        user_id=current_user.id,
        action=ActionType.ADMIN_ACCESS,
        resource="admin_panel",
        description=f"–î–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏",
        severity=SeverityLevel.MEDIUM,
        ip_address=admin_security._get_client_ip(request),
        user_agent=request.headers.get("User-Agent", ""),
        status="success"
    )
    db.add(audit_log)
    db.commit()
    
    return current_user


def require_admin_action_validation(action: str, resource: str = None):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    def decorator(func):
        async def wrapper(*args, **kwargs):
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
            current_user = None
            for arg in args:
                if isinstance(arg, User):
                    current_user = arg
                    break
            
            if not current_user:
                # –ò—â–µ–º –≤ kwargs
                current_user = kwargs.get('current_admin') or kwargs.get('current_user')
            
            if current_user and not admin_security.validate_admin_action(current_user, action, resource):
                raise HTTPException(
                    status_code=403, 
                    detail=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è: {action}"
                )
            
            import asyncio
            return await func(*args, **kwargs) if asyncio.iscoroutinefunction(func) else func(*args, **kwargs)
        return wrapper
    return decorator
