"""
Dependency Manager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ –ø–æ—Ä—è–¥–∫–æ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import asyncio
import logging
import time
from typing import Dict, List, Optional, Callable, Any, Set
from dataclasses import dataclass
from enum import Enum
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)


class DependencyStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    NOT_CHECKED = "not_checked"
    CHECKING = "checking"
    AVAILABLE = "available"
    UNAVAILABLE = "unavailable"
    ERROR = "error"


class DependencyType(Enum):
    """–¢–∏–ø—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    DATABASE = "database"
    CACHE = "cache"
    VECTOR_STORE = "vector_store"
    MODEL_FILE = "model_file"
    EXTERNAL_SERVICE = "external_service"
    NETWORK = "network"


@dataclass
class DependencyInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    name: str
    type: DependencyType
    check_function: Callable
    status: DependencyStatus
    last_check: Optional[datetime]
    check_interval: int  # —Å–µ–∫—É–Ω–¥—ã
    timeout: int  # —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    retry_count: int
    max_retries: int
    error_message: Optional[str]
    required: bool  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
    dependencies: List[str]  # –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —ç—Ç–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏


class DependencyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    def __init__(self):
        self._dependencies: Dict[str, DependencyInfo] = {}
        self._initialization_order: List[str] = []
        self._check_tasks: Dict[str, asyncio.Task] = {}
        self._shutdown_requested = False
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self._default_timeout = 30
        self._default_max_retries = 3
        self._default_check_interval = 60
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        self._register_standard_dependencies()
    
    def _register_standard_dependencies(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        
        # PostgreSQL Database
        self.register_dependency(
            name="postgresql",
            type=DependencyType.DATABASE,
            check_function=self._check_postgresql,
            required=True,
            timeout=10,
            max_retries=5,
            check_interval=30
        )
        
        # Redis Cache
        self.register_dependency(
            name="redis",
            type=DependencyType.CACHE,
            check_function=self._check_redis,
            required=False,  # –ï—Å—Ç—å fallback –Ω–∞ in-memory
            timeout=5,
            max_retries=3,
            check_interval=30
        )
        
        # ChromaDB Vector Store
        self.register_dependency(
            name="chromadb",
            type=DependencyType.VECTOR_STORE,
            check_function=self._check_chromadb,
            required=True,
            timeout=15,
            max_retries=3,
            check_interval=60,
            dependencies=["postgresql"]  # ChromaDB –º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç PostgreSQL
        )
        
        # AI Model File
        self.register_dependency(
            name="ai_model_file",
            type=DependencyType.MODEL_FILE,
            check_function=self._check_ai_model_file,
            required=True,
            timeout=5,
            max_retries=1,  # –§–∞–π–ª –ª–∏–±–æ –µ—Å—Ç—å, –ª–∏–±–æ –Ω–µ—Ç
            check_interval=300  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ
        )
        
        # Embeddings Model
        self.register_dependency(
            name="embeddings_model",
            type=DependencyType.MODEL_FILE,
            check_function=self._check_embeddings_model,
            required=True,
            timeout=10,
            max_retries=2,
            check_interval=300
        )
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._calculate_initialization_order()
    
    def register_dependency(
        self,
        name: str,
        type: DependencyType,
        check_function: Callable,
        required: bool = True,
        timeout: int = None,
        max_retries: int = None,
        check_interval: int = None,
        dependencies: List[str] = None
    ):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å"""
        
        self._dependencies[name] = DependencyInfo(
            name=name,
            type=type,
            check_function=check_function,
            status=DependencyStatus.NOT_CHECKED,
            last_check=None,
            check_interval=check_interval or self._default_check_interval,
            timeout=timeout or self._default_timeout,
            retry_count=0,
            max_retries=max_retries or self._default_max_retries,
            error_message=None,
            required=required,
            dependencies=dependencies or []
        )
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self._calculate_initialization_order()
        
        logger.info(f"Registered dependency: {name} (type: {type.value}, required: {required})")
    
    def _calculate_initialization_order(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        
        # –¢–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞
        visited = set()
        temp_visited = set()
        order = []
        
        def visit(dep_name: str):
            if dep_name in temp_visited:
                raise ValueError(f"Circular dependency detected involving {dep_name}")
            
            if dep_name not in visited:
                temp_visited.add(dep_name)
                
                if dep_name in self._dependencies:
                    for dependency in self._dependencies[dep_name].dependencies:
                        visit(dependency)
                
                temp_visited.remove(dep_name)
                visited.add(dep_name)
                order.append(dep_name)
        
        # –û–±—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for dep_name in self._dependencies:
            if dep_name not in visited:
                visit(dep_name)
        
        self._initialization_order = order
        logger.info(f"Dependency initialization order: {' -> '.join(self._initialization_order)}")
    
    async def check_all_dependencies(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        
        logger.info("üîç Starting dependency checks...")
        results = {}
        
        for dep_name in self._initialization_order:
            if dep_name in self._dependencies:
                result = await self._check_single_dependency(dep_name)
                results[dep_name] = result
                
                dep_info = self._dependencies[dep_name]
                if not result and dep_info.required:
                    logger.error(f"‚ùå Required dependency {dep_name} is not available")
                    # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
                elif result:
                    logger.info(f"‚úÖ Dependency {dep_name} is available")
                else:
                    logger.warning(f"‚ö†Ô∏è Optional dependency {dep_name} is not available")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total = len(results)
        available = sum(results.values())
        required_deps = [name for name, info in self._dependencies.items() if info.required]
        required_available = sum(results.get(name, False) for name in required_deps)
        
        logger.info(f"üìä Dependency check complete: {available}/{total} available, "
                   f"{required_available}/{len(required_deps)} required available")
        
        return results
    
    async def _check_single_dependency(self, dep_name: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Å retry –ª–æ–≥–∏–∫–æ–π"""
        
        if dep_name not in self._dependencies:
            logger.error(f"Unknown dependency: {dep_name}")
            return False
        
        dep_info = self._dependencies[dep_name]
        dep_info.status = DependencyStatus.CHECKING
        dep_info.last_check = datetime.now()
        
        for attempt in range(dep_info.max_retries + 1):
            try:
                logger.debug(f"Checking dependency {dep_name} (attempt {attempt + 1}/{dep_info.max_retries + 1})")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                result = await asyncio.wait_for(
                    dep_info.check_function(),
                    timeout=dep_info.timeout
                )
                
                if result:
                    dep_info.status = DependencyStatus.AVAILABLE
                    dep_info.retry_count = 0
                    dep_info.error_message = None
                    return True
                else:
                    dep_info.status = DependencyStatus.UNAVAILABLE
                    
            except asyncio.TimeoutError:
                error_msg = f"Timeout after {dep_info.timeout}s"
                dep_info.error_message = error_msg
                logger.warning(f"Dependency {dep_name} check timeout: {error_msg}")
                
            except Exception as e:
                error_msg = str(e)
                dep_info.error_message = error_msg
                logger.warning(f"Dependency {dep_name} check error: {error_msg}")
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π)
            if attempt < dep_info.max_retries:
                wait_time = 2 ** attempt  # Exponential backoff
                logger.debug(f"Waiting {wait_time}s before retry...")
                await asyncio.sleep(wait_time)
        
        # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        dep_info.status = DependencyStatus.ERROR
        dep_info.retry_count = dep_info.max_retries + 1
        
        return False
    
    async def wait_for_dependencies(self, required_only: bool = True, timeout: int = 300) -> bool:
        """–ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        
        logger.info(f"‚è≥ Waiting for dependencies (timeout: {timeout}s, required_only: {required_only})")
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            results = await self.check_all_dependencies()
            
            if required_only:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                required_deps = [name for name, info in self._dependencies.items() if info.required]
                all_required_ready = all(results.get(name, False) for name in required_deps)
                
                if all_required_ready:
                    logger.info("‚úÖ All required dependencies are ready")
                    return True
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                if all(results.values()):
                    logger.info("‚úÖ All dependencies are ready")
                    return True
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(5)
        
        logger.error(f"‚ùå Timeout waiting for dependencies after {timeout}s")
        return False
    
    def get_dependency_status(self) -> Dict[str, Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        
        status = {}
        for name, info in self._dependencies.items():
            status[name] = {
                "type": info.type.value,
                "status": info.status.value,
                "required": info.required,
                "last_check": info.last_check.isoformat() if info.last_check else None,
                "retry_count": info.retry_count,
                "max_retries": info.max_retries,
                "error_message": info.error_message,
                "dependencies": info.dependencies
            }
        
        return status
    
    def start_continuous_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        
        logger.info("üîÑ Starting continuous dependency monitoring")
        
        for dep_name, dep_info in self._dependencies.items():
            task = asyncio.create_task(self._monitoring_loop(dep_name))
            self._check_tasks[dep_name] = task
    
    async def _monitoring_loop(self, dep_name: str):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        
        dep_info = self._dependencies[dep_name]
        
        while not self._shutdown_requested:
            try:
                await asyncio.sleep(dep_info.check_interval)
                
                if not self._shutdown_requested:
                    await self._check_single_dependency(dep_name)
                    
            except Exception as e:
                logger.error(f"Error in monitoring loop for {dep_name}: {e}")
                await asyncio.sleep(dep_info.check_interval)
    
    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        
        logger.info("üõë Stopping dependency monitoring")
        self._shutdown_requested = True
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for task in self._check_tasks.values():
            task.cancel()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
        if self._check_tasks:
            await asyncio.gather(*self._check_tasks.values(), return_exceptions=True)
        
        self._check_tasks.clear()
    
    # –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    
    async def _check_postgresql(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
        try:
            from ..core.database import engine
            
            # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
            with engine.connect() as conn:
                result = conn.execute("SELECT 1")
                return result.fetchone() is not None
                
        except Exception as e:
            logger.debug(f"PostgreSQL check failed: {e}")
            return False
    
    async def _check_redis(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            from ..core.cache import cache_service
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ cache_service
            if cache_service.redis_client and cache_service._initialized:
                await cache_service.redis_client.ping()
                return True
            else:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                await cache_service.initialize()
                return cache_service._initialized
                
        except Exception as e:
            logger.debug(f"Redis check failed: {e}")
            return False
    
    async def _check_chromadb(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ ChromaDB"""
        try:
            from ..services.vector_store_service import vector_store_service
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å vector store
            return vector_store_service.is_ready()
            
        except Exception as e:
            logger.debug(f"ChromaDB check failed: {e}")
            return False
    
    async def _check_ai_model_file(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ AI –º–æ–¥–µ–ª–∏"""
        try:
            from ..core.config import settings
            import os
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –º–æ–¥–µ–ª–∏
            model_path = getattr(settings, 'MODEL_PATH', '/app/models/vistral-24b-v0.1.Q4_K_M.gguf')
            
            if os.path.exists(model_path):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1GB)
                file_size = os.path.getsize(model_path)
                return file_size > 1024 * 1024 * 1024  # 1GB
            
            return False
            
        except Exception as e:
            logger.debug(f"AI model file check failed: {e}")
            return False
    
    async def _check_embeddings_model(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ embeddings"""
        try:
            from ..services.embeddings_service import embeddings_service
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å embeddings
            return hasattr(embeddings_service, '_model_loaded') and embeddings_service._model_loaded
            
        except Exception as e:
            logger.debug(f"Embeddings model check failed: {e}")
            return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
dependency_manager = DependencyManager()