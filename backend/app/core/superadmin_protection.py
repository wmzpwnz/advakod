"""
–ó–∞—â–∏—Ç–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ä—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import logging
import hashlib
import secrets
from typing import Optional, Dict, Any
from datetime import datetime, timedelta
from sqlalchemy.orm import Session

from ..models.user import User
from ..models.rbac import Role, user_roles
from ..core.database import SessionLocal

logger = logging.getLogger(__name__)


class SuperAdminProtection:
    """–°–µ—Ä–≤–∏—Å –∑–∞—â–∏—Ç—ã —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    
    def __init__(self):
        self.superadmin_email = "admin@ai-lawyer.ru"  # –í–∞—à email
        self.backup_codes = []  # –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞
        self.emergency_token = None  # –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        self.emergency_token_expires = None
        
    def is_superadmin(self, user: User) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º"""
        if user.email != self.superadmin_email:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å super_admin
        db = SessionLocal()
        try:
            superadmin_role = db.query(Role).filter(Role.name == "super_admin").first()
            if not superadmin_role:
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            user_role = db.execute(
                user_roles.select().where(
                    user_roles.c.user_id == user.id,
                    user_roles.c.role_id == superadmin_role.id
                )
            ).first()
            
            return user_role is not None
        finally:
            db.close()
    
    def generate_emergency_token(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞"""
        token = secrets.token_urlsafe(32)
        self.emergency_token = hashlib.sha256(token.encode()).hexdigest()
        self.emergency_token_expires = datetime.utcnow() + timedelta(hours=24)
        
        logger.warning(f"üö® –≠–ö–°–¢–†–ï–ù–ù–´–ô –¢–û–ö–ï–ù –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù: {token}")
        logger.warning(f"‚è∞ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {self.emergency_token_expires}")
        
        return token
    
    def verify_emergency_token(self, token: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω"""
        if not self.emergency_token or not self.emergency_token_expires:
            return False
            
        if datetime.utcnow() > self.emergency_token_expires:
            self.emergency_token = None
            self.emergency_token_expires = None
            return False
            
        token_hash = hashlib.sha256(token.encode()).hexdigest()
        return token_hash == self.emergency_token
    
    def generate_backup_codes(self, count: int = 5) -> list:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã –¥–æ—Å—Ç—É–ø–∞"""
        codes = []
        for _ in range(count):
            code = secrets.token_urlsafe(8).upper()
            codes.append(code)
            
        self.backup_codes = codes
        
        logger.warning(f"üîë –†–ï–ó–ï–†–í–ù–´–ï –ö–û–î–´ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–´:")
        for i, code in enumerate(codes, 1):
            logger.warning(f"   {i}. {code}")
            
        return codes
    
    def verify_backup_code(self, code: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥"""
        return code.upper() in self.backup_codes
    
    def revoke_backup_code(self, code: str) -> bool:
        """–û—Ç–∑—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫–æ–¥"""
        if code.upper() in self.backup_codes:
            self.backup_codes.remove(code.upper())
            return True
        return False
    
    def protect_superadmin_account(self, user: User) -> Dict[str, Any]:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä—ã –∑–∞—â–∏—Ç—ã –∫ –∞–∫–∫–∞—É–Ω—Ç—É —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
        if not self.is_superadmin(user):
            return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º"}
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        protection_status = {
            "is_protected": True,
            "email": user.email,
            "last_login": user.updated_at,
            "two_factor_enabled": user.two_factor_enabled,
            "backup_codes_count": len(self.backup_codes),
            "emergency_token_active": self.emergency_token is not None,
            "emergency_token_expires": self.emergency_token_expires
        }
        
        return protection_status
    
    def create_superadmin_safeguards(self) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã
            backup_codes = self.generate_backup_codes(5)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            emergency_token = self.generate_emergency_token()
            
            safeguards = {
                "backup_codes": backup_codes,
                "emergency_token": emergency_token,
                "instructions": {
                    "backup_codes": "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–∏ –∫–æ–¥—ã –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö.",
                    "emergency_token": "–≠—Ç–æ—Ç —Ç–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 24 —á–∞—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É.",
                    "security_tips": [
                        "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ –∫–æ–¥—ã —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º",
                        "–•—Ä–∞–Ω–∏—Ç–µ –∫–æ–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –ø–∞—Ä–æ–ª—è",
                        "–†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–¥—ã",
                        "–í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é"
                    ]
                }
            }
            
            logger.info("üõ°Ô∏è –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω—ã")
            return safeguards
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—â–∏—Ç–Ω—ã—Ö –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤: {e}")
            return {"error": str(e)}
    
    def emergency_access_recovery(self, emergency_token: str, new_password: str) -> bool:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
        if not self.verify_emergency_token(emergency_token):
            return False
        
        try:
            db = SessionLocal()
            user = db.query(User).filter(User.email == self.superadmin_email).first()
            
            if not user:
                return False
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å
            from ..services.auth_service import AuthService
            auth_service = AuthService()
            user.hashed_password = auth_service.get_password_hash(new_password)
            user.updated_at = datetime.utcnow()
            
            db.commit()
            
            # –û—Ç–∑—ã–≤–∞–µ–º —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
            self.emergency_token = None
            self.emergency_token_expires = None
            
            logger.warning("üö® –≠–ö–°–¢–†–ï–ù–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –î–û–°–¢–£–ü–ê –í–´–ü–û–õ–ù–ï–ù–û")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return False
        finally:
            db.close()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
superadmin_protection = SuperAdminProtection()


def require_superadmin_protection():
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∑–∞—â–∏—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞"""
    def decorator(func):
        def wrapper(*args, **kwargs):
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö
            current_user = None
            for arg in args:
                if isinstance(arg, User):
                    current_user = arg
                    break
            
            if not current_user:
                # –ò—â–µ–º –≤ kwargs
                current_user = kwargs.get('current_admin') or kwargs.get('current_user')
            
            if not current_user:
                raise Exception("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
            if not superadmin_protection.is_superadmin(current_user):
                raise Exception("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            protection_status = superadmin_protection.protect_superadmin_account(current_user)
            
            return func(*args, **kwargs)
        return wrapper
    return decorator
