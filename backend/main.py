from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse
from contextlib import asynccontextmanager
import logging
import asyncio
import time
import sys
import os
import json
from typing import Dict, Any

from app.core.config import settings
from app.core.database import init_db
from app.api import api_router
from app.api.websocket import router as websocket_router
from app.api.lora_training import router as lora_training_router
from app.api.analytics import router as analytics_router
# from app.api.advanced_analytics import router as advanced_analytics_router  # Temporarily disabled - missing pandas
from app.api.enhanced_chat import router as enhanced_chat_router
from app.core.cache import cache_service
from app.core.enhanced_logging import get_logger, SecurityEvent, LogLevel
from app.core.enhanced_rate_limiter import enhanced_rate_limiter
# –ù–æ–≤—ã–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
from app.services.unified_llm_service import unified_llm_service
from app.services.unified_rag_service import unified_rag_service
from app.services.service_manager import service_manager
from app.services.unified_monitoring_service import unified_monitoring_service

# Legacy —Å–µ—Ä–≤–∏—Å—ã (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) - –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
from app.services.embeddings_service import embeddings_service
from app.services.enhanced_embeddings_service import enhanced_embeddings_service
from app.services.vector_store_service import vector_store_service

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è performance optimizer –∏ rate limiter
from app.core.advanced_performance_optimizer import performance_optimizer
from app.middleware.ml_rate_limit import MLRateLimiter

# Prometheus –º–µ—Ç—Ä–∏–∫–∏
try:
    from app.core.prometheus_metrics import PrometheusMetrics
except ImportError:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ prometheus_metrics –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class PrometheusMetrics:
        def __init__(self):
            pass
        def record_http_request(self, *args, **kwargs):
            pass
        def record_ai_inference(self, *args, **kwargs):
            pass
        def record_error(self, *args, **kwargs):
            pass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = get_logger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Prometheus –º–µ—Ç—Ä–∏–∫
try:
    prometheus_metrics = PrometheusMetrics()
except:
    # Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ prometheus_metrics –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    class MockPrometheusMetrics:
        def record_http_request(self, *args, **kwargs):
            pass
        def record_ai_inference(self, *args, **kwargs):
            pass
        def record_error(self, *args, **kwargs):
            pass
    prometheus_metrics = MockPrometheusMetrics()

# Lifespan context manager –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ Starting –ê–î–í–ê–ö–û–î - –ò–ò-–Æ—Ä–∏—Å—Ç –¥–ª—è –†–§")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        init_db()
        logger.info("‚úÖ Database initialized successfully")
    except Exception as e:
        logger.log_error(e, {"service": "database"})
        logger.error(f"Database initialization failed: {e}")
    
    try:
        await cache_service.initialize()
        logger.info("‚úÖ Cache service initialized")
    except Exception as e:
        logger.log_error(e, {"service": "cache"})
    
    # –ù–æ–≤–∞—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞–º–∏
    app.state.service_manager = service_manager
    app.state.unified_services = {
        "llm": unified_llm_service,
        "rag": unified_rag_service,
        "monitoring": unified_monitoring_service
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É AI-—Å–µ—Ä–≤–∏—Å–æ–≤
    logger.info("üöÄ Initializing unified AI services system...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ServiceManager - –æ–Ω —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ AI-—Å–µ—Ä–≤–∏—Å–∞–º–∏
        success = await service_manager.initialize_services()
        
        if success:
            logger.info("‚úÖ Unified AI services initialized successfully")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è app.state
            system_health = service_manager.get_service_status()
            app.state.system_health = system_health
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await unified_monitoring_service.initialize()
            logger.info("‚úÖ Monitoring system initialized")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä
            # await admin_metrics_collector.start() # –£–î–ê–õ–ï–ù–û - –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            logger.info("‚úÖ Admin panel metrics collector initialization skipped")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–ª–µ—Ä—Ç–æ–≤
            from app.services.alert_service import alert_evaluation_service
            await alert_evaluation_service.start()
            logger.info("‚úÖ Alert evaluation service started")
            
        else:
            logger.error("‚ùå Failed to initialize some AI services")
            
    except Exception as e:
        logger.error(f"‚ùå Critical error during AI services initialization: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (legacy)
    try:
        logger.info("üöÄ Initializing performance optimizers...")
        await performance_optimizer.start_background_optimizations()
        logger.info("‚úÖ Performance optimizers initialized")
    except Exception as e:
        logger.error(f"Performance optimizer initialization failed: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º cleanup task –¥–ª—è rate limiter (legacy)
    try:
        # Rate limiter cleanup - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π ml_rate_limiter
        ml_rate_limiter_instance = MLRateLimiter()
        await ml_rate_limiter_instance.initialize_cleanup()
        logger.info("‚úÖ Rate limiter cleanup task initialized")
    except Exception as e:
        logger.error(f"Rate limiter cleanup initialization failed: {e}")
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è legacy —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    try:
        logger.info("üöÄ Initializing legacy services for compatibility...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º embeddings
        from app.services.embeddings_service import embeddings_service
        embeddings_service.load_model()
        logger.info("‚úÖ Embeddings service initialized")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º vector store
        from app.services.vector_store_service import vector_store_service
        vector_store_service.initialize()
        logger.info("‚úÖ Vector store service initialized")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º unified LLM
        await unified_llm_service.ensure_model_loaded_async()
        logger.info("‚úÖ Unified LLM service initialized")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG
        from app.services.rag_service import rag_service
        rag_ready = rag_service.is_ready()
        logger.info(f"‚úÖ RAG service ready: {rag_ready}")
        
    except Exception as e:
        logger.error(f"‚ùå Legacy services initialization failed: {e}")
    
    # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò - –ë–ï–ó –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê
    try:
        logger.info("üöÄ Critical model initialization...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å
        if not unified_llm_service.is_model_loaded():
            logger.warning("‚ö†Ô∏è Model not loaded, attempting initialization...")
            await unified_llm_service.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if unified_llm_service.is_model_loaded():
                logger.info("‚úÖ Model successfully loaded")
            else:
                logger.error("‚ùå Model failed to load - service will work in degraded mode")
                # –ù–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–ú - —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –º–æ–¥–µ–ª–∏
        else:
            logger.info("‚úÖ Model already loaded and ready")
            
    except Exception as e:
        logger.error(f"‚ùå Critical model initialization failed: {e}")
        logger.warning("‚ö†Ô∏è Service will continue without model - manual initialization required")
        # –ù–ï –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–ú - —Ä–∞–±–æ—Ç–∞–µ–º –≤ degraded —Ä–µ–∂–∏–º–µ
    
    logger.info("üöÄ Server started with unified AI services architecture.")
    
    yield
    
    # Shutdown
    logger.info("üîÑ Shutting down server...")
    
    # Graceful shutdown —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö AI-—Å–µ—Ä–≤–∏—Å–æ–≤
    try:
        await service_manager.shutdown_services()
        logger.info("‚úÖ Unified AI services shutdown completed")
    except Exception as e:
        logger.log_error(e, {"service": "service_manager", "phase": "shutdown"})
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try:
        await unified_monitoring_service.graceful_shutdown()
        logger.info("‚úÖ Monitoring system stopped")
    except Exception as e:
        logger.log_error(e, {"service": "monitoring", "phase": "shutdown"})
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
    try:
        # await admin_metrics_collector.stop()  # –£–î–ê–õ–ï–ù–û - –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        logger.info("‚úÖ Admin panel metrics collector cleanup skipped")
    except Exception as e:
        logger.log_error(e, {"service": "admin_metrics_collector", "phase": "shutdown"})
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–ª–µ—Ä—Ç–æ–≤
    try:
        # from app.services.alert_service import alert_evaluation_service  # –£–î–ê–õ–ï–ù–û
        # await alert_evaluation_service.stop()  # –£–î–ê–õ–ï–ù–û - –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        logger.info("‚úÖ Alert evaluation service cleanup skipped")
    except Exception as e:
        logger.log_error(e, {"service": "alert_evaluation", "phase": "shutdown"})
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (legacy)
    try:
        await performance_optimizer.stop_background_optimizations()
        logger.info("‚úÖ Performance optimizers stopped")
    except Exception as e:
        logger.log_error(e, {"service": "performance_optimizer", "phase": "shutdown"})
    
    try:
        await cache_service.close()
        logger.info("‚úÖ Cache service closed")
    except Exception as e:
        logger.log_error(e, {"service": "cache", "phase": "shutdown"})
    
    # –û—á–∏—Å—Ç–∫–∞ rate limiter (legacy)
    try:
        enhanced_rate_limiter.cleanup_old_entries()
        logger.info("‚úÖ Rate limiter cleaned up")
    except Exception as e:
        logger.log_error(e, {"service": "rate_limiter", "phase": "shutdown"})
    
    logger.info("‚úÖ Server shutdown completed")

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.VERSION,
    description="–ò–ò-–Æ—Ä–∏—Å—Ç –¥–ª—è –†–§ - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–ø—Ä–∞–≤–æ–≤–µ–¥ 24/7",
    openapi_url=f"{settings.API_V1_STR}/openapi.json",
    lifespan=lifespan
)

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –º–µ—Ç—Ä–∏–∫
@app.middleware("http")
async def log_requests_and_metrics(request: Request, call_next):
    """Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
    start_time = time.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    client_ip = request.client.host if request.client else "unknown"
    user_agent = request.headers.get("user-agent", "unknown")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    response = await call_next(request)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    duration = time.time() - start_time
    
    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    logger.log_api_request(
        method=request.method,
        path=str(request.url.path),
        status_code=response.status_code,
        response_time=duration,
        ip_address=client_ip
    )
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ Prometheus (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if prometheus_metrics:
        prometheus_metrics.record_http_request(
            method=request.method,
            endpoint=str(request.url.path),
            status_code=response.status_code,
            duration=duration
        )
    
    return response

# Middleware –¥–ª—è rate limiting
@app.middleware("http")
async def rate_limit_middleware(request: Request, call_next):
    """Middleware –¥–ª—è rate limiting"""
    client_ip = request.client.host if request.client else "unknown"
    path = str(request.url.path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    if not enhanced_rate_limiter.is_allowed(
        ip_address=client_ip,
        endpoint=path
    ):
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        logger.log_security_event(
            event=SecurityEvent.RATE_LIMIT_EXCEEDED,
            ip_address=client_ip,
            details={"path": path},
            severity=LogLevel.WARNING
        )
        
        return JSONResponse(
            status_code=429,
            content={
                "error": "Rate limit exceeded",
                "message": "Too many requests. Please try again later.",
                "retry_after": enhanced_rate_limiter.get_reset_time(client_ip, path)
            }
        )
    
    response = await call_next(request)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ rate limiting
    remaining = enhanced_rate_limiter.get_remaining_requests(client_ip, path)
    reset_time = enhanced_rate_limiter.get_reset_time(client_ip, path)
    
    response.headers["X-RateLimit-Remaining"] = str(remaining)
    response.headers["X-RateLimit-Reset"] = str(int(time.time() + reset_time))
    
    return response

# Middleware –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ rate limiting
from app.middleware.security_headers import (
    SecurityHeadersMiddleware, 
    InputValidationMiddleware
)
from app.middleware.readiness import ReadinessMiddleware
from app.middleware.ml_rate_limit import MLRateLimitMiddleware, MLRateLimiter
from app.middleware.admin_panel_monitoring import AdminPanelMonitoringMiddleware, admin_metrics_collector

# Initialize rate limiter
ml_rate_limiter = MLRateLimiter()

app.add_middleware(AdminPanelMonitoringMiddleware)
app.add_middleware(MLRateLimitMiddleware, rate_limiter=ml_rate_limiter)
app.add_middleware(ReadinessMiddleware)
app.add_middleware(SecurityHeadersMiddleware)
app.add_middleware(InputValidationMiddleware)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.get_cors_origins(),
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ö–æ—Å—Ç–æ–≤
# –í Docker networking —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ö–æ—Å—Ç—ã —á–µ—Ä–µ–∑ wildcard
allowed_hosts = ["*"]
if settings.ENVIRONMENT == "production":
    # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
    production_hosts = os.getenv("TRUSTED_HOSTS", "advacodex.com,www.advacodex.com,*.advacodex.com").split(",")
    allowed_hosts = [host.strip() for host in production_hosts if host.strip()]

app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=allowed_hosts
)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(api_router, prefix=settings.API_V1_STR)
app.include_router(websocket_router, prefix="/ws", tags=["websocket"])
app.include_router(lora_training_router, prefix="/api/v1", tags=["lora-training"])
app.include_router(analytics_router, prefix="/api/v1/analytics", tags=["analytics"])
# app.include_router(advanced_analytics_router, tags=["advanced-analytics"])  # Temporarily disabled
app.include_router(enhanced_chat_router, prefix="/api/v1/chat", tags=["enhanced-chat"])

# Backup system router - temporarily disabled
# from app.api.backup import router as backup_router
# app.include_router(backup_router, prefix="/api/v1", tags=["backup"])

# Alert management router
from app.api.alerts import router as alerts_router
app.include_router(alerts_router, prefix="/api/v1/alerts", tags=["alerts"])

# Admin WebSocket router (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
# from app.api.admin_websocket import router as admin_websocket_router
# app.include_router(admin_websocket_router, prefix="/ws", tags=["admin-websocket"])

# Admin Notifications router (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
# from app.api.admin_notifications import router as admin_notifications_router
# app.include_router(admin_notifications_router, prefix="/api/v1/admin", tags=["admin-notifications"])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.log_error(exc, {
        "path": str(request.url.path),
        "method": request.method,
        "client_ip": request.client.host if request.client else "unknown"
    })
    
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal server error",
            "message": "An unexpected error occurred. Please try again later.",
            "request_id": id(request)
        }
    )

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–Æ—Ä–∏—Å—Ç –¥–ª—è –†–§!",
        "version": settings.VERSION,
        "docs": "/docs",
        "api": settings.API_V1_STR,
        "health": "/health",
        "ready": "/ready"
    }

@app.get("/health")
async def health():
    """Liveness probe - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    return {
        "status": "healthy",
        "service": "ai-lawyer-backend",
        "version": settings.VERSION,
        "timestamp": time.time()
    }

@app.get("/ready")
async def readiness():
    """Readiness probe - –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö AI-—Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç ServiceManager
    system_health = service_manager.get_service_status()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_health = await unified_monitoring_service.health_check()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    status = {
        "ready": system_health.status.value in ["healthy", "degraded"],
        "system_status": system_health.status.value,
        "services": {
            "total": system_health.total_services,
            "healthy": system_health.healthy_services,
            "degraded": system_health.degraded_services,
            "unhealthy": system_health.unhealthy_services
        },
        "monitoring": {
            "status": monitoring_health["status"],
            "metrics_count": monitoring_health.get("metrics_count", 0),
            "active_alerts": monitoring_health.get("active_alerts", 0)
        },
        "uptime": system_health.uptime,
        "last_check": system_health.last_check.isoformat()
    }
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 503 –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞
    status_code = 200 if status["ready"] else 503
    
    from fastapi import Response
    return Response(
        content=json.dumps(status, ensure_ascii=False, indent=2),
        media_type="application/json",
        status_code=status_code
    )

@app.get("/ready/{endpoint_path:path}")
async def check_endpoint_readiness(endpoint_path: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ endpoint'–∞"""
    from app.middleware.readiness import ReadinessChecker
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å API –µ—Å–ª–∏ –Ω–µ—Ç
    if not endpoint_path.startswith("/"):
        endpoint_path = "/" + endpoint_path
    if not endpoint_path.startswith("/api/"):
        endpoint_path = "/api/v1/" + endpoint_path.lstrip("/")
    
    status = ReadinessChecker.check_endpoint_readiness(app, endpoint_path)
    
    status_code = 200 if status["ready"] else 503
    
    from fastapi import Response
    return Response(
        content=json.dumps(status, ensure_ascii=False, indent=2),
        media_type="application/json",
        status_code=status_code
    )

@app.get("/metrics")
async def get_prometheus_metrics():
    """Prometheus –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ exposition"""
    from prometheus_client import generate_latest, CONTENT_TYPE_LATEST
    from fastapi import Response
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    unified_metrics = unified_monitoring_service.get_prometheus_metrics()
    
    # –ü–æ–ª—É—á–∞–µ–º legacy –º–µ—Ç—Ä–∏–∫–∏
    legacy_metrics = generate_latest()
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    combined_metrics = unified_metrics + "\n" + legacy_metrics.decode('utf-8')
    
    return Response(
        content=combined_metrics,
        media_type=CONTENT_TYPE_LATEST
    )

@app.get("/metrics/json")
async def get_metrics_json():
    """–ú–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ –æ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–∞—à–±–æ—Ä–¥–∞ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        dashboard_data = unified_monitoring_service.get_dashboard_data()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É ServiceManager
        service_manager_stats = service_manager.get_stats()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        unified_service_stats = {}
        
        if unified_llm_service.is_model_loaded():
            unified_service_stats["unified_llm"] = unified_llm_service.get_metrics().__dict__
        
        if unified_rag_service.is_ready():
            unified_service_stats["unified_rag"] = unified_rag_service.get_metrics().__dict__
        
        # Legacy –º–µ—Ç—Ä–∏–∫–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        legacy_stats = {}
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å performance_monitor
            if 'performance_monitor' in globals():
                legacy_stats["performance_monitor"] = performance_monitor.get_all_metrics()
            legacy_stats["performance_optimizer"] = performance_optimizer.get_performance_summary()
        except Exception as e:
            logger.warning(f"Failed to get legacy metrics: {e}")
        
        return {
            "unified_services": unified_service_stats,
            "service_manager": service_manager_stats,
            "monitoring_dashboard": dashboard_data,
            "legacy_metrics": legacy_stats,
            "timestamp": time.time()
        }
    except Exception as e:
        logger.error(f"Error getting unified metrics: {e}")
        return {
            "error": "Failed to get metrics",
            "timestamp": time.time()
        }

@app.get("/rate-limit/stats/{user_id}")
async def get_user_rate_limit_stats(user_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        ml_rate_limiter_instance = MLRateLimiter()
        stats = ml_rate_limiter_instance.get_user_stats(user_id)
        return {
            "success": True,
            "stats": stats,
            "timestamp": time.time()
        }
    except Exception as e:
        logger.error(f"Error getting user rate limit stats: {e}")
        return {
            "success": False,
            "error": str(e),
            "timestamp": time.time()
        }

if __name__ == "__main__":
    try:
        import uvicorn
        uvicorn.run(
            "main:app",
            host="0.0.0.0",
            port=8000,
            reload=settings.DEBUG,
            log_level="info"
        )
    except ImportError:
        logger.error("uvicorn –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install uvicorn")
        sys.exit(1)