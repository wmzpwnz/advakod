#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ê–î–í–ê–ö–û–î
"""
import sys
import os
import asyncio
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.services.embeddings_service import embeddings_service
from app.services.vector_store_service import vector_store_service
from app.services.unified_llm_service import unified_llm_service
from app.services.rag_service import rag_service

logger = logging.getLogger(__name__)

async def initialize_all_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å–∏—Å—Ç–µ–º—ã"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –ê–î–í–ê–ö–û–î...")
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º embeddings
        print("üìö –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è embeddings service...")
        embeddings_service.load_model()
        print("‚úÖ Embeddings service –≥–æ—Ç–æ–≤")
        
        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º vector store
        print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è vector store service...")
        vector_store_service.initialize()
        print("‚úÖ Vector store service –≥–æ—Ç–æ–≤")
        
        # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º unified LLM (Vistral)
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è unified LLM service (Vistral)...")
        await unified_llm_service.ensure_model_loaded_async()
        print("‚úÖ Unified LLM service –≥–æ—Ç–æ–≤")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º RAG
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ RAG service...")
        rag_ready = rag_service.is_ready()
        print(f"‚úÖ RAG service –≥–æ—Ç–æ–≤: {rag_ready}")
        
        print("\nüéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print(f"  - Embeddings: {embeddings_service.is_ready()}")
        print(f"  - Vector Store: {vector_store_service.is_ready()}")
        print(f"  - Unified LLM: {unified_llm_service.is_model_loaded()}")
        print(f"  - RAG System: {rag_service.is_ready()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        logger.exception("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
        return False

if __name__ == "__main__":
    success = asyncio.run(initialize_all_services())
    sys.exit(0 if success else 1)
