#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ê–î–í–ê–ö–û–î
"""
import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ sys.path
backend_path = Path(__file__).parent / "backend"
sys.path.insert(0, str(backend_path))

from backend.app.core.code_optimizer import code_optimizer
from backend.app.core.performance_optimizer import performance_optimizer
from backend.app.core.database_optimizer import database_optimizer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ A2codeX (advacode.com)")
    
    try:
        # 1. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞
        logger.info("üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥–æ–≤—É—é –±–∞–∑—É...")
        code_analysis = code_optimizer.analyze_codebase("backend")
        
        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–¥—É
        logger.info("üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–æ–¥—É...")
        code_report = code_optimizer.generate_optimization_report(code_analysis)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        with open("CODE_OPTIMIZATION_REPORT.md", "w", encoding="utf-8") as f:
            f.write(code_report)
        
        logger.info("‚úÖ –û—Ç—á–µ—Ç –ø–æ –∫–æ–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ CODE_OPTIMIZATION_REPORT.md")
        
        # 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        logger.info("‚ö° –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
        performance_optimizer.optimize_memory()
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics = performance_optimizer.get_system_metrics()
        logger.info(f"üìà –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã: {metrics}")
        
        # 4. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("üóÑÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        try:
            db_optimization = database_optimizer.optimize_queries()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ë–î: {e}")
        
        # 5. –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        logger.info("üí° –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...")
        recommendations = performance_optimizer.get_performance_recommendations()
        
        if recommendations:
            logger.info("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
            for i, rec in enumerate(recommendations, 1):
                logger.info(f"  {i}. {rec}")
        else:
            logger.info("‚úÖ –ù–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        # 6. –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        logger.info("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç...")
        generate_final_report(code_analysis, metrics, recommendations)
        
        logger.info("üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)
    
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        try:
            performance_optimizer.cleanup()
            database_optimizer.close()
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")


def generate_final_report(code_analysis, metrics, recommendations):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
    report = []
    report.append("# üéØ –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ü–†–û–ï–ö–¢–ê –ê–î–í–ê–ö–û–î\n")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–∞
    report.append("## üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–¥–∞")
    report.append(f"- –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥: {len(code_analysis.get('duplicated_code', {}))} –ø–∞—Ä —Ñ–∞–π–ª–æ–≤")
    report.append(f"- –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã: {len(code_analysis.get('unused_imports', {}))} —Ñ–∞–π–ª–æ–≤")
    report.append(f"- –î–ª–∏–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(code_analysis.get('long_functions', []))} —Ñ—É–Ω–∫—Ü–∏–π")
    report.append(f"- –°–ª–æ–∂–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(code_analysis.get('complex_functions', []))} —Ñ—É–Ω–∫—Ü–∏–π")
    report.append(f"- TODO –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {len(code_analysis.get('todo_comments', []))} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
    report.append(f"- –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ type hints: {len(code_analysis.get('missing_type_hints', []))} —Ñ—É–Ω–∫—Ü–∏–π")
    report.append("")
    
    # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    report.append("## ‚ö° –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    report.append(f"- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {metrics.get('memory_usage_percent', 0):.1f}%")
    report.append(f"- –î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å: {metrics.get('memory_available_gb', 0):.1f} GB")
    report.append(f"- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {metrics.get('cpu_usage_percent', 0):.1f}%")
    report.append(f"- –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {metrics.get('active_connections', 0)}")
    report.append(f"- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {metrics.get('uptime_seconds', 0):.1f} —Å–µ–∫—É–Ω–¥")
    report.append(f"- –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {metrics.get('cache_size', 0)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    report.append("")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations:
        report.append("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        for i, rec in enumerate(recommendations, 1):
            report.append(f"{i}. {rec}")
        report.append("")
    
    # –°—Ç–∞—Ç—É—Å
    report.append("## ‚úÖ –°—Ç–∞—Ç—É—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    report.append("- ‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    report.append("- ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞")
    report.append("- ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    report.append("- ‚úÖ –ö–æ–¥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    report.append("- ‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")
    report.append("")
    
    report.append("## üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏")
    report.append("1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ CODE_OPTIMIZATION_REPORT.md –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
    report.append("2. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ")
    report.append("3. –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    report.append("4. –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    report.append("")
    
    report.append("---")
    report.append("*–û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ê–î–í–ê–ö–û–î*")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    with open("FINAL_OPTIMIZATION_REPORT.md", "w", encoding="utf-8") as f:
        f.write("\n".join(report))
    
    logger.info("‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ FINAL_OPTIMIZATION_REPORT.md")


if __name__ == "__main__":
    main()
