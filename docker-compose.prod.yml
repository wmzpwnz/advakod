version: '3.8'

services:
  # PostgreSQL база данных для продакшена
  postgres:
    image: postgres:15-alpine
    container_name: advakod_postgres
    environment:
      POSTGRES_DB: advakod_db
      POSTGRES_USER: advakod
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=ru_RU.UTF-8 --lc-ctype=ru_RU.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups  # Папка для бэкапов
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U advakod -d advakod_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - advakod_network
    shm_size: 256mb
    command: 
      - "postgres"
      - "-c" 
      - "shared_buffers=256MB"
      - "-c" 
      - "max_connections=100"
      - "-c"
      - "work_mem=4MB"
      - "-c"
      - "maintenance_work_mem=64MB"

  # Qdrant векторная база данных для продакшена
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: advakod_qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC порт
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - advakod_network

  # Redis для кеширования
  redis:
    image: redis:7-alpine
    container_name: advakod_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - advakod_network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # Backend с Vistral-24B-Instruct
  backend:
    build: ./backend
    container_name: advakod_backend
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://advakod:${POSTGRES_PASSWORD}@postgres:5432/advakod_db
      - REDIS_URL=redis://redis:6379
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - VISTRAL_MODEL_PATH=/opt/advakod/models/vistral-24b-instruct-q4_K_M.gguf
      - VISTRAL_N_CTX=8192
      - VISTRAL_N_THREADS=8
      - VISTRAL_MAX_CONCURRENCY=1
      - VISTRAL_INFERENCE_TIMEOUT=900
      - SECRET_KEY=${SECRET_KEY}
      - BACKEND_CORS_ORIGINS=https://advacodex.com,https://www.advacodex.com
    volumes:
      - ./backend:/app
      - /opt/advakod/models:/opt/advakod/models:ro
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      - postgres
      - redis
      - qdrant
    restart: unless-stopped
    networks:
      - advakod_network
    deploy:
      resources:
        limits:
          memory: 28G  # Основная память для Vistral 24B
        reservations:
          memory: 24G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 300s  # Дополнительное время для загрузки Vistral 24B (5 минут)

  # Frontend (статический build через Nginx)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: advakod_frontend
    environment:
      - REACT_APP_API_URL=https://advacodex.com/api/v1
      - REACT_APP_WS_URL=wss://advacodex.com/ws
    restart: unless-stopped
    networks:
      - advakod_network

  # Nginx для продакшена
  nginx:
    image: nginx:alpine
    container_name: advakod_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro  # SSL сертификаты
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - advakod_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  qdrant_data:
    driver: local
  redis_data:
    driver: local

networks:
  advakod_network:
    driver: bridge